%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 13.0.1%%For: (marina) ()%%Title: (11-34.eps)%%CreationDate: 2/6/11 3:55 PM%%BoundingBox: 30 88 544 725%%HiResBoundingBox: 30.4834 88.5664 543.8691 724.6626%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 0.74902 0.678431 0.670588 0.901961 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 283.5 424.8936 283.5 424.8936%AI3_TileBox: -22.5356 29.1963 589.4648 821.1968%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 566.9291 850.3937%AI5_RulerUnits: 4%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -547 830.3936 1 1829 1029 18 0 0 50 75 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 104 128 8%%BeginData: 21386 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C4527F827F827F827F827F827F827F827F827F827F827F827F8270027%F8270027F8270527F8272727F8272727F8272727F8272727F8272727F827%2727F8270527F8270027F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F8F87DF827F8F8F827F8F8F827F8F8F8%27F800F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F800F827F8F8F827F8F8F827F8F8F827FD09F87D27F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F8270027F827%0527F8272727F8272727F8272727F8272727F8270527F8270027F8270027%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827FD04F87DF8F8F800F8F8F827F8F8F827F8F8F827F805F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F800F827F8F8%F827F8F8F805FD0FF87D27F827F827F827F827F827F827F827F827F827F8%27F8270027F8270527F8272727F827272700272727002727270027272700%2727270027272700272727F8272727F8270027F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F8F87DF8F8F827F8F8%F827F8F8F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F800F827F8F8F827F8F8F827F8F8F827%FD07F87D27F827F827F827F827F827F827F827F827F827F827F827F82700%27F8270527F8272727F8272727F8272727F8272727F8272727F8272727F8%272727F8272727F8270027F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F8F87DF800F8F8F827F8F8F827F800%F827F805F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F800F827F8F8F827F8F8F805FD0DF87D27F827F827F827F8%27F827F827F827F827F827F8270027F8272727F82727270027272705FD13%270527272700272727F8272727F8270527F8270027F827F827F827F827F8%27F827F827F827F827F827F827F827F827F8F87DF827F8F8F827F8F8F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F800F827F8F8F827F8F8F827F8F8F805FD05%F87D27F827F827F827F827F827F827F827F827F827F827F8270027F82727%27F8272727F82727270027272700272727002727270027272700272727F8%272727F8272727F8270527F8270027F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F8F87DF8F8F827F8F8F827F8F8F827F805%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F800F827F8F8F827F8F8F800FD0BF87D27F827F827F827F8%27F827F827F827F827F8270027F8272727F827272700FD1F270527272721%270427F8272727F8270027F827F827F827F827F827F827F827F827F827F8%27F827F827F8F87DF8F8F827F8F8F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F8270027F8270027F8270027F827%0027F827F827F827F827F827274B6A4C2127F827F827F827F827F827F827%F827F800F827F8F8F827F8F8F827F8F8F800F8F8F87D27F827F827F827F8%27F827F827F827F827F827F8270027F8272727F8272727F8272727002727%2705FD0F270027272700272727F852527794958E70F8270027F827F827F8%27F827F827F827F827F827F827F827F827F827F827F8F87DF827F8F8F827%F8F8F827F805F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827277C%527771716A4BF827F827F827F827F827F800F827F8F8F827F8F8F800FD09%F87D27F827F827F827F827F827F827F827F8270027F8272727F827272700%FD2427522E9BB89C9C7045270527F8270027F827F827F827F827F827F827%F827F827F827F827F827F8F87DF827F8F8F827F800F827F827F827F827F8%27F827F827F827F827F827F827F827F8270027F8270027F8270527F82727%27F8270527F8270027F8270027F827F827F82721272777714B2027F827F8%27F827F827F827F827F8F8F827F8F8F827F8F8F827FD05F87D27F827F827%F827F827F827F827F827F827F8270027F8272727F8272727F827272700FD%17270527272700272727F827F827529C4B27F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F8F87DF8F8F827F8F8F827F800F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F82700%27F8270027F8270027F8270027F827F827F827F827F827F827F827275295%4B2005F827F827F827F827F827F8F8F827F8F8F827FD0BF87D27F827F827%F827F827F827F827F8270027F8272727F827272700FD27270527275852BE%2727F8270527F827F827F827F827F827F827F827F827F827F827F827F827%F8F87DF8F8F827F800F827F827F827F827F827F827F827F827F827F827F8%27F827F8270027F8270527F8272727002727270027272700272727F82705%27F8270027F827F8050552769B4B4B2105F827F827F827F827F827F821F8%27F8F8F827F8F8F827F8F8F827F8F8F87D27F827F827F827F827F827F827%F827F8270027F8270527F8272727F827272700FD1B2700270527004B4C9B%9A774B706A27F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F8F87DF827F8F8F827F800F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F8270027F8270527F8272727F8270527F8%270027F827F827274B4B76769B522721946927F827F827F827F827F827F8%05F827F8F8F827F8F8F805FD09F87D27F827F827F827F827F827F8270027%F8270527F827272700FD1D2705274B76759A9AA1767C52524C708E954B27%F8272727F8270027F827F827F827F827F827F827F827F827F827F827F827%F8F87DF827F8F8F827F827F827F827F827F827F827F827F827F827F827F8%27F8270027F8270527F8272727002727270527272705272727007599C299%7C512E274C4C708E946A4BF827F827F827F827F827F827F827F827F827F8%00F827F8F8F827F8F8F827FD05F87D27F827F827F827F827F827F827F827%F827F8270527F8272727F827272700FD162799C1A0512D274C6A948E946A%4B21270427F8270527F8270027F827F827F827F827F827F827F827F827F8%27F827F827F827F8F87DF8F8F827F8F8F827F805F827F827F827F827F827%F827F827F827F827F827F827F827F8270027F82705270027272700272727%F899C151054C6A946A702127F805F827F827F827F827F827F827F827F827%F827F827F800F827F8F8F827F8F8F800FD07F87D27F827F827F827F827F8%27F827F8270027F82727270027272705FD17270551C15246B79470272705%2705FD072700272727F8270527F8270027F827F827F827F827F827F827F8%27F827F827F827F8F87DF8F8F827F800F827F827F827F827F827F827F827%F827F827F827F827F827F8270027F8272727002727270027272705272727%997B219421270427F8270027F827F827F827F827F827F827F827F827F827%F827F827F800F827F8F8F827F8F8F827F8F8F827F8F8F87D27F827F827F8%27F827F827F827F827F8270027F8272727F8272727F827272705FD11274B%9F054B4C27052705270027272700272727F8272727F8270027F827F827F8%27F827F827F827F827F827F827F827F827F827F827F8F87DF827F8F8F827%F800F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F8270027F8270527F8272727F8755127F870212726752627F8272127F827%F827F827F827F827F827F827F827F827F805F827F8F8F827F8F8F805FD09%F87D27F827F827F827F827F827F8270027F8270527F827272700FD192775%5105274B759F9F759F9F4B8DB66927272700272727F8272727F8270027F8%27F827F827F827F827F827F827F827F827F827F827F8F87DF827F8F8F827%F821F827F827F827F827F827F827F827F827F827F827F827F827F8270027%F82727270027272700272727007B4B27F8759E4BF8270051928D8DB02027%F827F827F827F827F827F827F827F827F827F827F8F8F827F8F8F827F8F8%F827FD05F87D27F827F827F827F827F827F827F827F827F8270027F82727%27F82727270027272705FD0F2751750075742705270527054B8CB58C4BF8%272727F8270527F8270027F827F827F827F827F827F827F827F827F827F8%27F827F827F8F87DF8F8F827F8F8F827F800F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F8270027F8270027F82700515127%5027F827F827F827269974C19E27F827F827F827F827F827F827F827F827%F827F8F8F827F8F8F827FD0BF87D27F827F827F827F827F827F827F82700%27F8272727F827272700FD17274BA0275100FD0527009F51054BC1752727%2700272727F8270027F827F827F827F827F827F827F827F827F827F827F8%27F827F8F87DF8F8F827F8F8F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F8270027F8270527F8272727F8270027754B5027%F8270027269FC175F875759FF827F827F827F827F827F827F827F827F827%F800F827F8F8F827F8F8F827F8F8F805F8F8F87D27F827F827F827F827F8%27F827F827F827F827F8270027F8272727F82727270027272700FD0E27A0%27759F75519999C175C1C19999C27527F8270527F8270027F827F827F827%F827F827F827F827F827F827F827F827F827F827F8F87DF827F8F8F827F8%F8F827F805F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F8277552F87575756E75992720756F754B27F8%27F827F805F805F805F827F827F827F800F827F8F8F827F8F8F800FD09F8%7D27F827F827F827F827F827F827F827F8270027F8272727F82727270027%272705FD112705757628214B0027279A05270527F8270527F8272727214B%456F69942127F827F827F827F827F827F827F827F827F827F827F827F8F8%7DF827F8F8F827F800F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F8270027F8270027F8270027F827267C27274527F8276F%27F827214B456F698D69948DB18DB18D8D6927F827F827F800F827F8F8F8%27F8F8F827F8F8F827FD05F87D27F827F827F827F827F827F827F827F827%F827F827F8270027F8272727F8272727F827272700272727002727270527%27270027755205702727274C054B694B21272127214B454B214B4505456F%F827F827F827F827F827F827F827F827F827F827F827F827F8F87DF8F8F8%27F8F8F827F8F8F827F805F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F851524B4527F80521704527F8%27F827F827F805F84B4569F84B4504F827F800F827F8F8F827F8F8F800FD%0BF87D27F827F827F827F827F827F827F827F827F8270027F8272727F827%27270027272705FD0F2705274B9A6F27272705704B2700272727F8270527%457045276927454BF827F827F827F827F827F827F827F827F827F827F827%F827F8F87DF8F8F827F8F8F827F800F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827456F21707627F8%27F84B2105F827F805F827206F6945F8054569F8692005F827F827F827F8%F8F827F8F8F827F8F8F827FD07F87D27F827F827F827F827F827F827F827%F827F827F827F827F8270027F8272727F8272727F8272727F8272727F827%05278DB6455252522727F84B4527F827214B45948D934527040520B12105%4527F827F827F827F827F827F827F827F827F827F827F827F827F8F87DF8%00F8F8F827F8F8F827F8F8F827F805F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F80545B1212752520027F8274594B08D8D%8D69694427F805F827F88D69052069F827F800F827F8F8F827F8F8F805FD%0DF87D27F827F827F827F827F827F827F827F827F827F8270027F8270527%F8272727F8272727002727270027272705270570B14B529A2727054B6928%294B214B2727F8270527F827046FB027F84B4527F827F827F827F827F827%F827F827F827F827F827F827F827F8F87DF827F8F8F827F8F8F827F800F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F82745B14B584B69696F8D4B0607F805F827F827F827F827F84BB045F8%276927F827F821F827F8F8F827F8F8F827F8F8F827FD09F87D27F827F827%F827F827F827F827F827F827F827F827F827F827F8270027F8270027F827%2727F8272727F8272727F827B0945252F84B2127042906270527F8270027%F827F827B093F805454BF827F827F827F827F827F827F827F827F827F827%F827F827FD04F87DF8F8F800F8F8F827F8F8F827F8F8F827F805F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F86FB0522D27%F805F8270606F827F827F827F827F8278D8DF8056869F827F800F827F8F8%F827F8F8F805FD0FF87D27F827F827F827F827F827F827F827F827F827F8%27F827F827F8270027F8272727F8272727F827272700272727002705B170%592727F827262806272727F8270527F8278D93F8278D6FF827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F8F87DF8F8F827F8F8%F827F8F8F827F800F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F82720B052522727F827F806F827F827F827F805%444BF8458D4BF805F827F800F827F8F8F827F8F8F827F8F8F827F8F8F800%FD07F87D27F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F8270027F8270027F8270027F8270527F827699452522727F8%27062FF8270027F827216FF8938D27F827F827F827F827F827F827F827F8%27F827F827F827F827F827F8F8F827F8F87DFD09F827F8F8F827F8F8F827%F800F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827694C5252F827F8270D0CF827F827F869F8696805F805F827F8F8F827%F8F8F827F8F8F800FD11F87D27F827F827F827F827F827F827F827F827F8%27F827F827F827F827F8270027F8270027F8270527F8272727F8272727F8%27054B69525227F827F82714350527F827456F6905F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F8F87DF805F8F8%F827F8F8F827F8F8F827F8F8F827F800F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827208D277D2700F827F827133C05F8%206F6869F827F805F827F800F827F8F8F827F8F8F827F8F8F827F8F8F800%FD09F87D27F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F8270027F827F827F84BB0272E5205%27F827F82706360526446F8D6FF84B4427F827F827F827F827F827F827F8%27F827F827F827F827F8F8F827FD04F87DFD0BF805F8F8F827F8F8F827F8%F8F827F800F827F827F827F827F827F827F827F827F827F827F827F80544%B020275227F827F827F820002F050520458C8D8CB020F8F827F8F8F827F8%F8F800FD13F87D27F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F8270027F8270027F8270027F8938D27%277D2727F827F827F827002E0628F88D8D272027F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F8F87DF8F8F805F8F8F827F8%F8F827F8F8F827F8F8F827F800F827F827F827F827F827F827F827F827F8%27F827F827F827F827F8278D6FF8275227F827F827F827F827F805052868%8D4405F8F8F827F8F8F827F8F8F827F8F8F827FD0FF87D27F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F82721B04A9927522727F827F827F827F827F845%456F68B0F827F827F827F827F827F827F827F827F827F827F827F8F8F827%F8F8F827F8F87DFD0DF800F8F8F827F8F8F827F8F8F827F800F827F800F8%27F805F827F827F827F827F827F827F8458D4B6E275227F827F800F827F8%00F84B8C8D2045FC69F827F8F8F805FD19F87D27F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F82769B04A9927522727F827F827F827F84B44B0682720B0%8D27F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F8F87DFD05F800F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F800F8%27F800F827F827F827F827F827F827F827F827F8698D276E515227F827F8%27F805F86FF845FC45F8458CB02005F8F8F827F8F8F827F8F8F805FD11F8%7DF8F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F805688D20757552F827F827%F800F87526056893F805448DB069F827F827F827F827F827F827F827F827%F827F8F8F827F8F8F827FD04F87DFD13F805F8F8F827F8F8F827F8F8F827%F8F8F827F8F8F827F800F827F800F827F88D682120994A27F8F8F84B6E6E%2000F88DF805F86844B08CF8F800FD1BF87D27F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F8278DB5204B2E756E756EBBBA752005F88D6805F827684BFC%B0F827F827F827F827F827F827F827F827F827F827F827F827F827FD04F8%7DFD0BF805F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8%F8F827F800F827F800F827F88D8C274476F827266F6E27F8F820698C45F8%054444448D8D21F827F8F8F827F8F8F800FD13F87D27F8F8F827F800F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F8278D8D20526F45F805F805F84B688D208DF805208D%F88D448D2027F827F827F827F827F827F800F827F8F8F827F8F8F827FD06%F87DFD19F800F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F88D%4445272720694445448DFC69F8684405F84420208C206845B045FD1BF87D%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F8278D276952F805F84B688D68%4BF8278C27F82744056869F86F45B16905F827F827F827F827F827F827F8%27F827F827F827F8F8F827F8F87DFD0DF800F8F8F827F8F8F827F8F8F827%F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F82069F86F4505F8F8%F805F8F8F8278C44F8054420F88DF8452069B069F800FD19F87DF8F827F8%F8F827F8F8F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F84B68054B932005F827F827F8278C6FF8%05204BF8694405440569B16904F827F827F827F8F8F827F8F8F827F8F8F8%27FD08F87DFD1FF800F8F8F800F8F8F805F8F8F827F8F8F8054468F852F8%682005F8F8F8458C44F8F8F844F82068F82045F88DB069FD1BF87DF8F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F88D202E2705F86F446F446F684BF827%F84B20056827204BF84BB0B14505F827F827F827F827F827F827F827F8F8%F827F8F8F827FD04F87DFD13F800F8F8F805F8F8F827F8F8F827F8F8F827%F8F8F827F8F8F827F8F8F82768F82727F8F8F8272020F805F8F8F82744F8%4445F845F80468B08D214521FD19F87D27F8F8F827F8F8F827F8F8F827F8%F8F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F80544690552F827F827F827F805F827F805F84B4445F86FF805F8B08D%8D20B120F8F827F8F8F827F8F8F827F8F8F827FD0AF87DFD2FF88CF85227%FD0EF8202044F8F8F8698C6944456945FD19F87D27F8F8F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F84B68275227F827F827F827F827F827F827F8054469F827F8%4BB04B6969446F4504F827F827F827F821F827F8F8F827FD0AF87DFD1DF8%00F8F8F805F8F8F827F8F8F827F8F8F80568442727F8F8F827F8F8F827F8%F8F800F8F84445F8F8F821B069F88D44204469FD19F87DFD06F827F8F8F8%27F8F8F827F8F8F827F8F8F827F800F827F827F827F827F827F827F827F8%27F827F805F88D2052F827F827F827F827F827F827F8054469F805F821B0%8DF8458D6FF8696904F8F8F827F8F8F827FD10F87DFD2DF844682E27FD0D%F82068F8F8F869FC8DF8F8686920F84469FD19F87DF8F827F8F8F827F8F8%F827F821F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F805686F2E27F827F827F827F827F827F805F8B0444568B0B045%F805448D6927F8696905F821F827F8F8F827F8F8F827FD0CF87DFD2BF804%208C2727FD0DF820688D686820FD04F88DB020F8F86969FD19F87DFD0CF8%27F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F800F827F800F827F8%27F8696F52F827F805F827F800F827F8F8F827F8F8F805F8F8F827F82044%4BF8F8F86969F8F827FD16F87DFD2BF8206852FD1EF86869FD19F87DFD08%F827F8F8F827F8F8F827F804F827F827F827F827F827F827F827F827F827%F827F827F805689A2DF8F827F827F827F827F827F827F827F827F827F827%F827F827F827F8F8F86F69F8F827F8F8F827FD12F87DFD2AF8208D4B27FD%1EF8448DFD19F87DFD12F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8%F827F8F8F88D7627F827F805F827F8F8F827F8F8F827F8F8F827F8F8F827%F8F8F827F8F8F827F8456904FD18F87DFD29F868932EF8F8F828222A0707%00FD18F88DFD19F87DFD0EF827F8F8F827F8F8F827F8F8F827F8F8F827F8%27F827F827F827F8448D52F8204493B0B0FC9321060627F827F827F827F8%27F8F8F827F8F8F827F8F8F827F8F88D27FD18F87DFD27F8208C76F8448C%FCFCB0FCFCFC8CF80500FD16F86944FD18F87DFD1CF827F8F8F827F8F8F8%27F8F88C9A2768FCB0FCB0FCB0FCB0FC45F806F826F8F8F820FD10F82069%FD18F87DFD26F86893278CFCFC8C682020208CFCFC44F80000F8F8F805FD%05F80D05FD0BF86920FD17F87DFD18F827F8F8F827F8F8F827F8F8F80568%B52E93FCB04427F8F8F805F8B0FC6FF828F82606300D36F8F8053C141B06%FD0AF84545FD17F87DFD24F868B52E69FC69FD08F868B0200500F80607F8%0D0D2044938D8C4B3605FD0AF869FD17F87DFD23F868B52E4BFC44F8F8F8%272727F8F8F869FC20F8290606F8F80D70FCB0FCB0FCFC8D3C05FD09F845%69FD16F87DFD22F844B552278C44F8F827522727275227F844B0F8F80000%F8F820B0FD08FC8D13F8F8F80C0C0CFD04F86945FD15F87DFD21F868B652%05448DF8275227FD05F852278D8CFD04F82068B0FCB08C936F9A6FB0FCB0%5205F835132E0C35F8F8F8208D4BFD14F87DFD1FF8208C932E05F88CF805%5227FD07F86FFCB0F8F8F8448CB0FCB044272E270552278CFC76051313F8%F8F80C05F8F8F8208D69FD13F87DFD1EF84B8C9A27F8F84568F85227FD07%F8206893FC69448DFCB0FC8DF82752F8F8F8275927FC6F1A13FD04F82E05%FD05F869B645FD11F87DFD1DF893B06FFD04F844442752FD08F8682045FC%FCB0FCFC8C44F80527FD05F8272E688CFD06F80605FD06F844B68E69FD0F%F87DFD1AF82E4BB58D27FD05F88D4B52FD08F84445F82793B5FCB06820F8%275227FD05F827526F8CFD06F82FFD09F86F8EB76A21FD0CF87DFD17F827%277693B04404FD05F820685205FD07F82068F8F8F82E93FC6905F8525227%FD07F8524B8CFD05F80505FD04F8050D0E06F8F8F820698E9420FD0AF87D%FD12F827272E2E5976948C68FD08F8449427FD08F88DFD04F844B06F7D52%7D5227FD07F82752526820FD04F80C05F8F8F80C142F003006F8060700F8%2021FD0AF87DFD0FF805272E2D524B6F8C8C44FD0AF88C6F05FD07F86820%F8F8F868FC200527522727FD09F8524B8CFD05F80505F8F8050E05F8F806%060006F80700FD0CF87DFD0AF820F82020706F6F696F68694420F8204445%FD07F8209352FD07F84444F8F8208C8DFD10F8277D6820FD05F82F06060D%4B2020F8280E28F8F80628FD0CF87DFD07F8204468446F6F694444204420%20F8F8F868FCFCFC8DFD06F86876FD07F82068F8F8688C44FD11F8275293%20FD06F80C2E93FCB08C44F806F8F8F80701F8F80600FD08F87DFD06F868%4444F84B4C4B20FD08F88DFCB593B0FC45FD04F8449427FD07F8682020B0%6820FD13F8599344FD06F84BB5FC8D68B0FC44FD04F80630062A0806FD08%F87DFD05F86820F820696F44448C8C44FD05F868FC9327526FFC8CF8F8F8%209352FD07F8444420B044FD15F8277668FD05F8059AFC44F8F8F868FC68%FD04F800070105FD09F87DFD04F84568698C6F762EF8F8F869FC45F8F8F8%20FCB55205F85293B0682044945227FD06F8208DF8B044FD16F827529A68%05F8F80576B08DFD05F821688D44FD06F8206821FD06F87DFD04F844B08C%20F852524B2727F8FC68F8F8F820B06F05F8F827526F936F765227FD07F8%8DF84468FD18F827529A686F4B708C8CFD09F8686844F8F8F8448C8C8C68%20FD04F87DFD04F8446820F8F8F852FD0427688DF8F8F88DB052F8F8F827%525952595227FD07F84420F86820FD19F8272E524B6F4420FD0BF8204469%44686820F8446820FD04F87DFD0EF827698C20F88CFC70FD05F8FD045227%FD07F82044F8F868FD2FF820FD0BF87DFD0EF8524BB0FCB0FC6F2E05FD05%F8522727FD08F84420F84544FD3BF87DFD0EF82727206868442727FD11F8%44F8F86820FD3BF87DFD0EF82727F8F8F82752FD11F82020F86869FD3CF8%7DFD0FF8FD042752FD12F8206844B0FD3DF87DFD10F8272727FD13F820FC%B020FD3DF87DFD27F88C20FD3EF87DFD67F87DFD67F87DFD67F87DFD67F8%7DFD67F87DFD67F87D%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI5_End_NonPrinting--6 Bn%AI5_BeginGradient: (Unnamed gradient 109)(Unnamed gradient 109) 0 2 Bd[<0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001><FDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFCFCFBFBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F8F8F8F8F8F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F6F6F6F6F5F5F5F5F5F5F5F5F5F4F4F4F4F4F4F3F3F3F3F3F2F2F2F2F1F1F1F1F0F0F0EFEFEFEFEEEEEEEEEDEDEDEDECECECEBEBEBEBEAEAEAEAEAE9E9E9E8E8E8E7E7E7E7E7E7E7E6E6E5E4E4E4E3E2E2E1E0E0DFDEDEDDDD><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFDFCFBFAF9F8F6F5F3F2F0EFEEECEBEAE9E7E6E5E4E2E1DFDEDCDAD8D6D4D2D0CECCC9C8C6C4C3C1BFBEBCBAB8B7B5B3B1AFADABA9A7A5A2A09E9C9A98969492908D8B89868482807E7B797774716F6D6B69676563615E5C5A585554514F4D4A474543413F3D3B39373432302E2C2A27252321201D1B1A171513110F0E0C0A090705040201000000000000000000000000000000000000000000>01<0000010101020202030303040404050505060606070707070808080909090A0A0A0B0B0B0C0C0C0D0D0D0E0E0E0F0F0F101010111111121212131313141414151515151616161717171818181919191A1A1A1B1B1B1C1C1C1D1D1D1E1E1E1F1F1F202020212121222222232323232424242525252626262727272828282929292A2A2A2B2B2B2C2C2C2D2D2D2E2E2E2F2F2F303030313131313232323333333434343535353636363737373838><000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABAC>4 %_Br[0.003922 0.866667 0 0 1 0.219608 0.67451 2 50 100 %_BS%_0.003922 0.866667 0 0 1 0.219608 0.67451 2 50 100 Bs0 0.992157 1 0 1 0 0 2 50 0 %_BS%_0 0.992157 1 0 1 0 0 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 13)(Unnamed gradient 13) 1 2 Bd[<B5B5B6B6B7B7B6B7B7B7B8B8B9B9B9BABAB9B9BABABBBBBBBCBCBCBDBBBCBCBDBDBDBCBCBDBDBDBEBCBCBCBDBDBDBDBDBDBEBEBDBDBDBDBDBEBEBEBEBEBFBEBEBFBFBFBF><A1A1A2A2A3A3A4A5A5A3A4A4A5A5A6A6A7A8A8A9A9A9AAAAABABA9A9AAABABABACACABABABACACACADADABABACACACACACACACADADADADADADADADACACACADADADADADAD><8F8F909090919192929495959596969797979898989999999A9A9D9D9D9D9E9E9E9FA1A1A2A2A2A2A3A3A5A5A5A5A6A6A6A6A7A7A7A7A7A8A8A8A8A9AAAAAAAAAAABABAB><7376787A7C7E80828486888B8D8F919396989A9C9EA1A3A5A7A9ABADAFB1B3B5B7B9BCBEC0C2C4C5C6C8C9CACBCCCDCFD0D2D3D4D6D7D8D9DADBDCDDDEDFE0E2E3E4E5E6><3D3C3B3A39383837363534333231302F2E2E2D2C2B2A29282726252424232221201F1E1D1C1B1A19191817161514131211100F0F0E0D0C0B0A0908070605050403020100><3F3E3D3C3B3A39383737363534333231302F2E2D2C2B2A29282727262524232221201F1E1D1C1B1A19181817161514131211100F0E0D0C0B0A0908080706050403020100><44434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A2928272625242321201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>4 %_Br[0.709804 0.631373 0.560784 0.45098 0.239216 0.247059 0.266667 2 50 0 %_BS%_0.709804 0.631373 0.560784 0.45098 0.239216 0.247059 0.266667 2 50 0 Bs0.74902 0.678431 0.670588 0.901961 0 0 0 2 50 100 %_BS%_0.74902 0.678431 0.670588 0.901961 0 0 0 2 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 47)(Unnamed gradient 47) 0 2 Bd[0<C4C3C2C1C0BEBDBCBBBAB9B7B6B5B3B2B1B0AEAEADACABAAA9A8A6A5A4A2A2A19F9E9D9B9998989695939290908F8E8C8B8A8A8887868684838180807E7D7B7B7A797977767575737272706F6F6D6C6C6B6A6A6867676565646262616160605E5D5D5C5C5A5A5959575756565555535353525251514F4F4F4E4E4E4D4D4D4B4B4B4A4A4A4A48484848484747474747>101<606162636465666768696A6B6C6D6E6F70717272737475767778797A7B7C7C7D7E7F8081828383848586878888898A8B8C8D8D8E8F90909192939494959697979899999A9B9C9C9D9E9E9FA0A0A1A2A2A3A4A4A5A6A6A7A7A8A9A9AAAAABABACADADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B4B5B5B6B6B7B7B7B8B8B8B9B9B9BABABABBBBBBBBBCBCBCBCBCBDBDBDBDBD>04 %_Br[0 0.278431 1 0 1 0.741176 0 2 50.0844 100 %_BS%_0 0.278431 1 0 1 0.741176 0 2 50.0844 100 Bs0 0.768627 1 0 1 0.376471 0 2 36.2637 0 %_BS%_0 0.768627 1 0 1 0.376471 0 2 36.2637 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 5)(Unnamed gradient 5) 0 2 Bd[<0000000000000000000000000000000000000102030405060809090A0B0C0D0F101112131314151617191A1A1C1D1E1F202021222324252627272829292A2A2B2C2D2D2E2F2F303131323233343435353637373838393A3A><FDFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFCFCF9F8><000000000000000000000000000000000000000000000101010101010102020203030303040404040405050607070809090A0B0B0C0D0D0E0F1010111213141516171718191A1B1C1D1E1F202122232425262728292A2B2D><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7>0<00000101020202030303040405050506060607070808080909090A0A0B0B0B0C0C0D0D0D0E0E0E0F0F1010101111111212131313141414151516161617171818181919191A1A1B1B1B1C1C1C1D1D1E1E1E1F1F1F20202121>4 %_Br[0.227451 1 0.972549 0.176471 0.654902 0 0.129412 2 50 100 %_BS%_0.227451 1 0.972549 0.176471 0.654902 0 0.129412 2 50 100 Bs0 0.992157 1 0 1 0 0 2 50 0 %_BS%_0 0.992157 1 0 1 0 0 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 66)(Unnamed gradient 66) 0 2 Bd[<1B1A191817161514131211100F0E0D0D0B0B0A090807060504030202010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><B4B5B4B4B4B4B4B4B5B4B5B4B5B4B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B6B5B6B6B6B6B6B6B5B6B6B5B5B4B4B4B2B2B1B1B1B0B0AFAFAFAEAEADACACABABABA9A9A8A8A8A6A6A5A5A5A4A4A4A3A3A2A2A2A0A0A09F9F9D9D9D9C9C9C9A9A9A989897979695959593939392929290908F8F8F8E8E8E8C8C8C8B8B8B8989898888888686868585858383838282828180807F7F7F7F7D7D7D7B7B7B7A7A7A78787878777777757575747474747272727170706F6F6F6F6D6D6D6D6C6C6C6A6A6A6A6969696968686866666666656565656363636362626262616160605F5F5F5F5E5D5D5D5C5C5C5C5C5B5B5B5B5959595959585858585856565656565555555555545454545452525252525151515151515050505050504E4E4E4E4E4E4D4D4D4D4D4D4D4C4C4C4C4C4C4B4B4A4A4A4A4A4A4A4A4A4848484848484848484848474747474747474747474747><000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101030507090A0C0E11131417191A1C1E212325282A2D2D2F313336383A3C3E3E414346484A4D4D4F515356585A5B5C5E61626465676A6C6E7070727476787B7B7D7F8183838487898B8C8E8F929494969799999B9D9FA0A0A2A4A5A6A7A9ABABACAFB0B0B2B4B4B5B7B8B8B9BABBBBBCBEBEBFC1C2C3C4C6C6C7C8C8C9CBCBCCCDCDCED0D0D1D2D2D4D5D5D6D7D7D8D9D9DADBDBDCDCDEDFE0E1E2E3E4E4E5E6E6E7E7E8E9E9EAEAEBEBECEDEDEEEEEFEFF0F0F0F1F1F2F2F3F3F4F4F4F4F5F5F6F6F6F6F7F7F8F8F9F9F9F9FAFAFBFBFBFBFCFCFCFCFCFDFDFDFDFEFEFEFEFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>01<60606161626263636364646565666666676768686969696A6A6B6B6B6C6C6D6D6E6E6E6F6F70707071717272727373747474757576767677777878787979797A7A7B7B7B7C7C7D7D7D7E7E7E7F7F808080818181828283838384848485858586868787878888888989898A8A8A8B8B8C8C8C8D8D8D8E8E8E8F8F8F909090919191929292939393949494959595969696979797979898989999999A9A9A9B9B9B9B9C9C9C9D9D9D9E9E9E9E9F9F9FA0A0A0A1A1A1A1A2A2A2A2A3A3A3A4A4A4A4A5A5A5A5A6A6A6A7A7A7A7A8A8A8A8A9A9A9A9AAAAAAAAABABABABACACACACADADADADAEAEAEAEAEAFAFAFAFB0B0B0B0B0B1B1B1B1B1B2B2B2B2B2B3B3B3B3B3B4B4B4B4B4B5B5B5B5B5B6B6B6B6B6B6B7B7B7B7B7B7B8B8B8B8B8B8B9B9B9B9B9B9B9BABABABABABABABABBBBBBBBBBBBBBBBBBBCBCBCBCBCBCBCBCBCBCBCBDBDBDBDBDBDBDBDBDBDBDBD><D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADADACABAAA9A8A7A6A5A4A3A2A1A1A09F9E9D9C9B9A9999989796959493929191908F8E8D8C8B8B8A8988878685858483828180807F7E7D7C7B7B7A7978777676757473727271706F6E6E6D6C6B6A6A696867676665646363626160605F5E5D5D5C5B5A5A59585857565555545352525150504F4E4D4D4C4B4B4A4949484747464545444343424141403F3F3E3D3D3C3B3B3A39393838373636353434333332313130302F2E2E2D2D2C2C2B2A2A292928282727262525242423232222212120201F1F1E1E1D1D1C1C1B1B1A1A19191818171716161615151414131312121211111010100F0F0E0E0E0D0D0D0C0C0B0B0B0A0A0A0909090808080707070706060605050505040404040303030302020202020101010101010100000000000000>4 %_Br[0 0.278431 1 0 1 0.741176 0 2 50.0844 100 %_BS%_0 0.278431 1 0 1 0.741176 0 2 50.0844 100 Bs0.105882 0.705882 0 0 1 0.376471 0.843137 2 36.2637 0 %_BS%_0.105882 0.705882 0 0 1 0.376471 0.843137 2 36.2637 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 74)(Unnamed gradient 74) 1 2 Bd[<9D9D9D9D9D9D9D9D9D9D9D9D9D9E9E9E9E9E9E9E9E9E9E9F9F9F9F9F9F9FA0A0A0A0A0A0A1A1A1A2A2A2A2A2A3A3A3A3A3A4A4A4A5A5A5A5A6A6A6A7A7A8A8A8A8A9A9AAAAABABABABACACACACADADADAEAEAFAFAFAFB0B1B1B1B1B2B2B3B4B4B4B5B5B5B5B6B6B6B7B7B7B8B8B8B9B9B9B9BABABABABABBBBBBBCBCBDBDBDBEBEBEBEBFBFBFBFC0C0C0C1C1C1C2C2C2C2C2C3C3C3C3C3C4C4C5C6C6C6C7C7C7C8C8C8C8C9C9C9C9CACACBCBCCCCCDCDCDCDCECECECFD0D0D0D0D1D1D1D2D2D3D3D4D4D4D5D5D5D5D6D6D7D7D7D8D8D9D9D9DADADADADBDBDB><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020203040405070709090B0C0C0E1010121313151717191B1B1D1E1E20222224262828292B2B2D2F313133353737383A3C3C3D3F4143434547494B4B4D4F51545456585A5C5E5E6062646668686A6C6E707274767677797B7C7E808183838586888A8B8D8E90919394969898999B9C9D9E9FA1A2A3A4A6A7A8A9AAABACAD><3C3C3C3C3C3C3C3C3C3C3C3C3C3B3B3B3B3B3B3B3B3B3B3A3A3A3939393939393938383837373736363635353434343333333333323231313030302F2F2F2F2E2E2D2D2C2C2B2B2A2A292928282727262525232322222120201F1F1F1F1E1D1D1C1C1C1B1B1A19191817171514141312121110100F0E0E0D0B0B0A09080806050505040303020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>00<DFDFDFDFDFDFDFDEDEDEDEDEDEDDDDDDDDDDDCDCDCDCDCDBDBDBDADADADAD9D9D9D8D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D2D2D2D1D1D0D0CFCFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0BFBFBEBEBDBDBCBBBBBAB9B9B8B8B7B6B6B5B4B4B3B2B2B1B0B0AFAEAEADACACABAAAAA9A8A7A7A6A5A5A4A3A2A2A1A09F9F9E9D9C9C9B9A999898979695949493929190908F8E8D8C8B8B8A89888786868584838281807F7F7E7D7C7B7A79787777767574737271706F6E6D6C6B6A6A696867666564636261605F5E5D5C5B5A5958><DBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADAD9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9>4 %_Br[0.615686 0 0.235294 0 0 0.87451 0.858824 2 64.8352 0 %_BS%_0.615686 0 0.235294 0 0 0.87451 0.858824 2 64.8352 0 Bs0.858823 0.678431 0 0 0 0.345098 0.85098 2 50 100 %_BS%_0.858823 0.678431 0 0 0 0.345098 0.85098 2 50 100 BsBD%AI5_EndGradient%AI5_Begin_NonPrintingNp4 Bn%AI5_BeginGradient: (Linear Gradient 1)(Linear Gradient 1) 0 2 Bd[<00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F2021222324252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F5152535455565658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F90909192939494959696979898999A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAABABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2><00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C1D1D1E1F202122222324262728292A2B2C2D2E2E2F30313233343536373838393A3B3C3D3E3F4041434445464648494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F60616263646465666768696A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC><00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F8081818283838485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423222120>4 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Linear Gradient 2)(Linear Gradient 2) 0 6 Bd[<C5C5C5C5C6C6C7C7C8C8C8C8C9C9C9CACBCBCCCCCCCCCCCCCDCDCECECFCFD0D0D1D1D1D1D1D2D2D2D3D3D3D4D4D4D4D4D4D5D5D5D5D5D6D6D6D6D7D6D7D7D7D7D7D8D8D8D9D9D9DAD9DADADADADADADADADADBDBDADBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDCDBDBDBDBDBDBDADBDBDADBDADADADADADADADADADADAD9D9D9D9D8D8D8D8D8D7D7D7D7D7D7D6D6D6D6D6D6><3032343436383A3B3D3F3F4143444648494B4D4F4F51535557595B5C5E6062646567686A6C6E70727476787A7D7F81838587898B8D8D8E9092949597999A9C9E9FA1A2A3A5A6A8A9ABACAEAFB0B1B2B3B4B5B6B7B7B8B9BABBBCBDBEBFC0C0C1C2C2C3C4C4C5C6C7C7C8C9C9C9CACACBCCCCCDCDCECECFCFCFD0D0D0D1D1D1D2D2D2D3D3D4D3D4D4D4D5D5D5D6D6D6D6D6D6D6D6D6D7D7><232120201F1E1C1B18171716141312100F0E0D0C0C09080706050402010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>0<0000010101020203030304040505060606070708080809090A0A0B0B0B0C0C0D0D0E0E0E0F0F10101111111212131314141415151616171718181819191A1A1B1B1C1C1C1D1D1E1E1F1F20202021212222232324242425252626272728282829292A2A2B2B2C2C2D2D2D2E2E2F2F303031313232323333343435353636373737383839393A3A3B3B3C3C3C3D3D3E3E3F3F404041414242><A09F9E9E9D9C9B9A99989897969594939291908F8F8E8D8C8B8A89888786858483828281807F7E7D7C7B7A79787776757473727170706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110><C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCDCDCDCDCDCDCDCDCDCDCDCDCECECECECECECECECECECECECFCFCFCFCFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D2D2D2D2D2D2>4 %_Br<8282828383838384848485858586868686878787878788888989898A8A8A8B8B8C8C8C8D8D8D8D8E8E8E8F8F8F8F90909091919292939394949595959696969697979898989899999A9A9A9A9B9B9C9C9C9C9D9D9E9E9E9E9F9E9F9FA0A0A0A1A1A1A2A2A2A2A3A3A3A4A4A5A5A5A6A6A6A7A7A8A8A8A9A9AAAAAAAAABABABABACACACADADADADADAEAEAFAFB0B0B0B1B1B2B2B3B3B4B4B4B5B5B6B6B7B7B7B9B8B9B9BABABBBBBBBCBCBDBDBDBDBEBEBFBFBFBFBFC0C0C0C0C1C1C1C1C1C1C1C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C3C4C3C4C4C4C4C4C4C5C5C5C5C5C5C5C5><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010203030405060608080A0A0B0C0C0E0E101012121313161618181A1B1B1C1C1E1E2020232325252828292A2B2C2E2E3030><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFCFBFAF9F9F7F5F4F1F1F0EEEDECEBEBEBEAE8E7E6E6E4E2E1DFDDDCDBDAD9D8D7D6D5D5D3D2D1D0CECDCBCBCAC8C7C6C5C4C3C2C2C0BFBEBCBBBAB8B7B5B5B4B2B1B0AEADACAAA9A7A6A6A4A3A1A09E9C9A9997959492908E8E8C8A88868582817E7D7A79767572706F6C6A6866646462605D5C59575553514E4D4A484644413F3C3A373633312E2C29282523>0<737373727272727171717070706F6F6F6E6E6E6D6D6D6C6C6B6B6B6A6A6A69696868686767666665656564646363626262616160605F5F5E5E5D5D5C5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A494948484747464545444443434242414140403F3E3E3D3D3C3C3B3B3A3A39383837373636353534333332323131302F2F2E2E2D2D2C2B2B2A2A29292827272626252424232322222120201F1F1E1D1D1C1C1B1A1A191918171716161514141313121111100F0F0E0E0D0C0C0B0B0A09090807070606050404030302010100><F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F3F2F2F2F1F1F1F0F0F0F0EFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAEAE9E9E9E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDCDBDBDADADAD9D9D8D8D8D7D7D6D6D6D5D5D4D4D4D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCCCCCCCBCBCACAC9C9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C3C2C2C1C1C0C0BFBFBFBEBEBDBDBCBCBBBBBBBABAB9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADACACABABAAAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A0><0F0F10101011111212131314141515161617171819191A1A1B1C1C1D1D1E1F1F2021212223232425252627272829292A2B2C2C2D2E2E2F303131323334343536373738393A3A3B3C3D3D3E3F404141424344454546474849494A4B4C4D4D4E4F5051525253545556575758595A5B5C5D5D5E5F60616263636465666768696A6A6B6C6D6E6F70717272737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919293949495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6>4 %_Br<0001030405050608090A0B0D0E0F111213151618191A1C1D1E1F202123242627282A2B2C2D2F303132343536373838393B3C3D3E3F4141434445464748494A4B4C4D4F4F51525353535455565758595A5B5C5C5D5E5F60616162626364656667676869696A6A6B6B6C6D6D6E6F7070707172737374757575757576767778787879797A7B7B7B7C7C7D7D7D7D7E7E7F80808081818182828282><444341413F3E3E3C3C3A3939373634343232312F2E2C2C2B292927262624232120201E1D1B1B1A18181515141212100F0F0C0C0B0909060606040402020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>10<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBABAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E9E9D9C9B9A99989796959594939291908F8E8D8D8C8B8A8988878786858483828281807F7E7D7D7C7B7A79797877767675747473><BFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C6C6C6C7C7C8C8C8C9C9CACACACBCBCCCCCCCDCDCECECECFCFD0D0D0D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDCDDDDDEDEDEDFDFE0E0E0E1E1E1E2E2E3E3E3E4E4E4E5E5E6E6E6E7E7E7E8E8E9E9E9EAEAEAEBEBEBECECECEDEDEEEEEEEFEFEFF0F0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7F7F8F8><00000000000101010101010101010102020202020202020203030303030303030304040404040404040404050505050505050505050606060606060606060707070707070707070708080808080808080808090909090909090909090A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F>4 %_Br0<9E9D9B999896959392908F8E8C8B8A88878684838181807E7D7B7A79777675737272706F6D6C6B6A6A68676564626261605E5D5D5C5A595757565555535251514F4E4E4D4B4B4A4A4848474745454444>101<7F808182838485868788898A8B8C8D8E8F90919293939495969798999A9B9C9D9E9E9FA0A1A2A3A4A4A5A6A7A8A9A9AAABACADADAEAFB0B1B1B2B3B3B4B5B6B6B7B8B8B9BABABBBBBCBCBDBDBEBEBFBF>04 %_Br0<FDFDFDFDFDFCFCFCFCFCFBFBFBFBFBFAFAFAFAFAF9F9F9F8F8F8F7F7F6F6F5F5F5F5F4F4F3F3F2F2F1F1F0F0EFEFEFEEEEEDEDECECECEBEBEAE9E9E9E8E7E7E7E6E6E5E5E4E3E3E3E2E1E0E0E0DFDEDEDDDDDCDCDBDADAD9D8D8D7D7D6D6D5D4D4D3D2D2D1D1D0CFCFCECDCDCCCCCBCACAC9C9C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0C0BEBEBDBDBCBCBBBBBABAB9B9B7B7B6B6B5B5B3B3B3B2B2B1B1B1B0B0AEAEAEADADACACACABABABAAAAAAA9A9A9A8A8A8A6A6A6A6A5A5A5A5A4A4A4A4A2A2A2A2A2A1A1A1A1A19F9F9F9F9F9F9F9F9E9E9E9E9E9E9E9E9E>101<000102030405060708090A0B0C0D0E0F10111112131415161718191A1B1C1D1D1E1F20212223242425262728292A2A2B2C2D2E2F2F3031323334343536373838393A3B3B3C3D3E3E3F40414142434444454647474849494A4B4B4C4D4E4E4F505051525253535455555657575858595A5A5B5B5C5D5D5E5E5F5F606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6E6F6F70707071717272727373747474757575767676777777787878797979797A7A7A7A7B7B7B7B7C7C7C7C7C7D7D7D7D7D7E7E7E7E7E7E7E7E7F7F7F7F7F7F7F7F7F>04 %_Br[0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 %_BS%_0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 Bs0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 %_BS%_0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 Bs0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 %_BS%_0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 Bs0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 %_BS%_0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 Bs0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 %_BS%_0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 Bs0 0.992157 1 0 1 0 0 2 33.3333 0 %_BS%_0 0.992157 1 0 1 0 0 2 33.3333 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 1)(Radial Gradient 1) 1 2 Bd[<00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F2021222324252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F5152535455565658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F90909192939494959696979898999A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAABABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2><00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C1D1D1E1F202122222324262728292A2B2C2D2E2E2F30313233343536373838393A3B3C3D3E3F4041434445464648494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F60616263646465666768696A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC><00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F8081818283838485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423222120>4 %_Br[1 0 50 0 %_BS%_1 0 50 0 Bs0 0 50 100 %_BS%_0 0 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 2)(Radial Gradient 2) 1 6 Bd[0<FDFDFDFDFDFCFCFCFCFCFBFBFBFBFBFAFAFAFAFAF9F9F9F8F8F8F7F7F6F6F5F5F5F5F4F4F3F3F2F2F1F1F0F0EFEFEFEEEEEDEDECECECEBEBEAE9E9E9E8E7E7E7E6E6E5E5E4E3E3E3E2E1E0E0E0DFDEDEDDDDDCDCDBDADAD9D8D8D7D7D6D6D5D4D4D3D2D2D1D1D0CFCFCECDCDCCCCCBCACAC9C9C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0C0BEBEBDBDBCBCBBBBBABAB9B9B7B7B6B6B5B5B3B3B3B2B2B1B1B1B0B0AEAEAEADADACACACABABABAAAAAAA9A9A9A8A8A8A6A6A6A6A5A5A5A5A4A4A4A4A2A2A2A2A2A1A1A1A1A19F9F9F9F9F9F9F9F9E9E9E9E9E9E9E9E9E>101<000102030405060708090A0B0C0D0E0F10111112131415161718191A1B1C1D1D1E1F20212223242425262728292A2A2B2C2D2E2F2F3031323334343536373838393A3B3B3C3D3E3E3F40414142434444454647474849494A4B4B4C4D4E4E4F505051525253535455555657575858595A5A5B5B5C5D5D5E5E5F5F606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6E6F6F70707071717272727373747474757575767676777777787878797979797A7A7A7A7B7B7B7B7C7C7C7C7C7D7D7D7D7D7E7E7E7E7E7E7E7E7F7F7F7F7F7F7F7F7F>04 %_Br0<9E9D9B999896959392908F8E8C8B8A88878684838181807E7D7B7A79777675737272706F6D6C6B6A6A68676564626261605E5D5D5C5A595757565555535251514F4E4E4D4B4B4A4A4848474745454444>101<7F808182838485868788898A8B8C8D8E8F90919293939495969798999A9B9C9D9E9E9FA0A1A2A3A4A4A5A6A7A8A9A9AAABACADADAEAFB0B1B1B2B3B3B4B5B6B6B7B8B8B9BABABBBBBCBCBDBDBEBEBFBF>04 %_Br<0001030405050608090A0B0D0E0F111213151618191A1C1D1E1F202123242627282A2B2C2D2F303132343536373838393B3C3D3E3F4141434445464748494A4B4C4D4F4F51525353535455565758595A5B5C5C5D5E5F60616162626364656667676869696A6A6B6B6C6D6D6E6F7070707172737374757575757576767778787879797A7B7B7B7C7C7D7D7D7D7E7E7F80808081818182828282><444341413F3E3E3C3C3A3939373634343232312F2E2C2C2B292927262624232120201E1D1B1B1A18181515141212100F0F0C0C0B0909060606040402020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>10<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBABAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E9E9D9C9B9A99989796959594939291908F8E8D8D8C8B8A8988878786858483828281807F7E7D7D7C7B7A79797877767675747473><BFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C6C6C6C7C7C8C8C8C9C9CACACACBCBCCCCCCCDCDCECECECFCFD0D0D0D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDCDDDDDEDEDEDFDFE0E0E0E1E1E1E2E2E3E3E3E4E4E4E5E5E6E6E6E7E7E7E8E8E9E9E9EAEAEAEBEBEBECECECEDEDEEEEEEEFEFEFF0F0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7F7F8F8><00000000000101010101010101010102020202020202020203030303030303030304040404040404040404050505050505050505050606060606060606060707070707070707070708080808080808080808090909090909090909090A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F>4 %_Br<8282828383838384848485858586868686878787878788888989898A8A8A8B8B8C8C8C8D8D8D8D8E8E8E8F8F8F8F90909091919292939394949595959696969697979898989899999A9A9A9A9B9B9C9C9C9C9D9D9E9E9E9E9F9E9F9FA0A0A0A1A1A1A2A2A2A2A3A3A3A4A4A5A5A5A6A6A6A7A7A8A8A8A9A9AAAAAAAAABABABABACACACADADADADADAEAEAFAFB0B0B0B1B1B2B2B3B3B4B4B4B5B5B6B6B7B7B7B9B8B9B9BABABBBBBBBCBCBDBDBDBDBEBEBFBFBFBFBFC0C0C0C0C1C1C1C1C1C1C1C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C3C4C3C4C4C4C4C4C4C5C5C5C5C5C5C5C5><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010203030405060608080A0A0B0C0C0E0E101012121313161618181A1B1B1C1C1E1E2020232325252828292A2B2C2E2E3030><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFCFBFAF9F9F7F5F4F1F1F0EEEDECEBEBEBEAE8E7E6E6E4E2E1DFDDDCDBDAD9D8D7D6D5D5D3D2D1D0CECDCBCBCAC8C7C6C5C4C3C2C2C0BFBEBCBBBAB8B7B5B5B4B2B1B0AEADACAAA9A7A6A6A4A3A1A09E9C9A9997959492908E8E8C8A88868582817E7D7A79767572706F6C6A6866646462605D5C59575553514E4D4A484644413F3C3A373633312E2C29282523>0<737373727272727171717070706F6F6F6E6E6E6D6D6D6C6C6B6B6B6A6A6A69696868686767666665656564646363626262616160605F5F5E5E5D5D5C5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A494948484747464545444443434242414140403F3E3E3D3D3C3C3B3B3A3A39383837373636353534333332323131302F2F2E2E2D2D2C2B2B2A2A29292827272626252424232322222120201F1F1E1D1D1C1C1B1A1A191918171716161514141313121111100F0F0E0E0D0C0C0B0B0A09090807070606050404030302010100><F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F3F2F2F2F1F1F1F0F0F0F0EFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAEAE9E9E9E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDCDBDBDADADAD9D9D8D8D8D7D7D6D6D6D5D5D4D4D4D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCCCCCCCBCBCACAC9C9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C3C2C2C1C1C0C0BFBFBFBEBEBDBDBCBCBBBBBBBABAB9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADACACABABAAAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A0><0F0F10101011111212131314141515161617171819191A1A1B1C1C1D1D1E1F1F2021212223232425252627272829292A2B2C2C2D2E2E2F303131323334343536373738393A3A3B3C3D3D3E3F404141424344454546474849494A4B4C4D4D4E4F5051525253545556575758595A5B5C5D5D5E5F60616263636465666768696A6A6B6C6D6E6F70717272737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919293949495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6>4 %_Br<C5C5C5C5C6C6C7C7C8C8C8C8C9C9C9CACBCBCCCCCCCCCCCCCDCDCECECFCFD0D0D1D1D1D1D1D2D2D2D3D3D3D4D4D4D4D4D4D5D5D5D5D5D6D6D6D6D7D6D7D7D7D7D7D8D8D8D9D9D9DAD9DADADADADADADADADADBDBDADBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDCDBDBDBDBDBDBDADBDBDADBDADADADADADADADADADADAD9D9D9D9D8D8D8D8D8D7D7D7D7D7D7D6D6D6D6D6D6><3032343436383A3B3D3F3F4143444648494B4D4F4F51535557595B5C5E6062646567686A6C6E70727476787A7D7F81838587898B8D8D8E9092949597999A9C9E9FA1A2A3A5A6A8A9ABACAEAFB0B1B2B3B4B5B6B7B7B8B9BABBBCBDBEBFC0C0C1C2C2C3C4C4C5C6C7C7C8C9C9C9CACACBCCCCCDCDCECECFCFCFD0D0D0D1D1D1D2D2D2D3D3D4D3D4D4D4D5D5D5D6D6D6D6D6D6D6D6D6D7D7><232120201F1E1C1B18171716141312100F0E0D0C0C09080706050402010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>0<0000010101020203030304040505060606070708080809090A0A0B0B0B0C0C0D0D0E0E0E0F0F10101111111212131314141415151616171718181819191A1A1B1B1C1C1C1D1D1E1E1F1F20202021212222232324242425252626272728282829292A2A2B2B2C2C2D2D2D2E2E2F2F303031313232323333343435353636373737383839393A3A3B3B3C3C3C3D3D3E3E3F3F404041414242><A09F9E9E9D9C9B9A99989897969594939291908F8F8E8D8C8B8A89888786858483828281807F7E7D7C7B7A79787776757473727170706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110><C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCDCDCDCDCDCDCDCDCDCDCDCDCECECECECECECECECECECECECFCFCFCFCFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D2D2D2D2D2D2>4 %_Br[0 0.992157 1 0 1 0 0 2 33.3333 0 %_BS%_0 0.992157 1 0 1 0 0 2 33.3333 0 Bs0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 %_BS%_0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 Bs0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 %_BS%_0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 Bs0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 %_BS%_0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 Bs0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 %_BS%_0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 Bs0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 %_BS%_0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Offset Squares Pattern)(Offset Squares Pattern) 0 0 55.0781 55.0801 [%AI3_Tile(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0 0 m0 55.0801 L55.0781 55.0801 L55.0781 0 L0 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.043137 0 0.713725 0 1 1 0.4 Xa 0.043137 0 0.713725 0 1 1 0.4 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR26.1436 52.3262 m26.1436 29.4307 L3.03125 29.4307 L3.03125 52.3262 L26.1436 52.3262 Lf25.0264 50.123 m5.89063 50.123 L5.89063 32.4961 L25.0264 32.4961 L25.0264 50.123 Lf*U*u5.89063 50.123 m25.0264 50.123 L25.0264 32.4961 L5.89063 32.4961 L5.89063 50.123 Ln10.0313 34.2578 m24.1338 34.2578 L24.1338 48.3613 L10.0313 48.3613 L10.0313 34.2578 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.501961 0.984314 0 0.968627 0.576471 0.117647 Xa 0 0.501961 0.984314 0 0.968627 0.576471 0.117647 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR22.4082 48.793 m8.30566 48.793 L8.30566 34.6895 L22.4082 34.6895 L22.4082 48.793 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.003922 0.984314 0.976471 0 0.929412 0.12549 0.141176 Xa 0.003922 0.984314 0.976471 0 0.929412 0.12549 0.141176 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR52.6943 24.7852 m52.6943 1.67578 L28.9355 1.67578 L28.9355 24.7852 L52.6943 24.7852 Lf47.6777 22.582 m30.0527 22.582 L30.0527 4.95703 L47.6777 4.95703 L47.6777 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR30.0527 22.582 m50.6982 22.582 L50.6982 4.95703 L30.0527 4.95703 L30.0527 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.501961 0 0.992157 0 0.54902 0.776471 0.247059 Xa 0.501961 0 0.992157 0 0.54902 0.776471 0.247059 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR47.4199 21.252 m32.2393 21.252 L32.2393 6.50293 L47.4199 6.50293 L47.4199 21.252 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.698039 0.14902 0 0 0.160784 0.670588 0.886275 Xa 0.698039 0.14902 0 0 0.160784 0.670588 0.886275 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR27.5391 27.5391 m27.5391 0 L0 0 L0 27.5391 L27.5391 27.5391 Lf25.4316 26.1445 m2.75293 26.1445 L2.75293 2.16992 L25.4316 2.16992 L25.4316 26.1445 Lf*U*u4.95605 7.40039 m22.582 7.40039 L22.582 25.0273 L4.95605 25.0273 L4.95605 7.40039 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.188235 0 0.980392 0 0.85098 0.878431 0.129412 Xa 0.188235 0 0.980392 0 0.85098 0.878431 0.129412 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR22.582 5.67383 m4.95605 5.67383 L4.95605 25.0273 L22.582 25.0273 L22.582 5.67383 Lf20.3887 21.3281 m7.58105 21.3281 L7.58105 10.0313 L20.3887 10.0313 L20.3887 21.3281 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 Xa 0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR6.93555 8.73633 m21.0371 8.73633 L21.0371 22.8379 L6.93555 22.8379 L6.93555 8.73633 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.623529 0 0.003922 0 0.2 0.776471 0.956863 Xa 0.623529 0 0.003922 0 0.2 0.776471 0.956863 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR55.0781 55.0801 m55.0781 27.5391 L27.5391 27.5391 L27.5391 55.0801 L55.0781 55.0801 Lf52.3252 50.9688 m30.292 50.9688 L30.292 28.9355 L52.3252 28.9355 L52.3252 50.9688 Lf*U*u30.292 50.9688 m52.3252 50.9688 L52.3252 28.9355 L30.292 28.9355 L30.292 50.9688 Ln32.4951 30.0527 m50.1221 30.0527 L50.1221 47.6777 L32.4951 47.6777 L32.4951 30.0527 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.043137 0 0.713725 0 1 1 0.4 Xa 0.043137 0 0.713725 0 1 1 0.4 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR50.1221 30.0527 m32.4951 30.0527 L32.4951 48.9727 L50.1221 48.9727 L50.1221 30.0527 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.901961 0 0 1 0.2 0.6 Xa 0 0.901961 0 0 1 0.2 0.6 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.9063 33.749 m49.0078 33.749 L49.0078 47.8506 L34.9063 47.8506 L34.9063 33.749 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7907.8833 8616.3486 m-7816.0479 8616.3486 L-7816.0479 8612.0693 L-7907.8833 8612.0693 L-7907.8833 8616.3486 Ln0 O0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa-7907.6631 8613.6689 m-7908 8613.7354 -7907.4814 8613.9248 -7907.8833 8613.7822 C-7907.8379 8613.6641 -7907.7725 8613.5752 -7907.6631 8613.6689 Cf-7817.1675 8613.835 m-7818.2529 8614.5977 -7819.6816 8613.8271 -7820.8701 8614.3135 C-7821.0098 8614.3457 -7820.8354 8613.8955 -7821.1484 8613.9961 C-7822.3008 8614.5889 -7824.1162 8614.2354 -7825.5195 8613.7783 C-7825.4346 8613.6602 L-7825.7021 8613.5752 -7826.0283 8613.9658 -7826.3115 8613.9111 C-7826.3135 8613.833 -7826.2207 8613.7998 -7826.2861 8613.6914 C-7826.3574 8613.9287 -7826.7979 8613.8018 -7826.9189 8613.9775 C-7827.0303 8613.8857 -7827.0195 8613.6982 -7827.1641 8613.5938 C-7827.3262 8613.8633 L-7827.7769 8614.5029 -7828.4209 8613.8193 -7829.0361 8614.1494 C-7829.0063 8614.0869 -7828.9453 8614.0381 -7828.9941 8613.9775 C-7829.9814 8614.3662 -7831.2168 8614.293 -7832.3208 8614.4365 C-7832.2769 8614.3418 -7832.2363 8614.1689 -7832.3008 8614.0615 C-7832.3555 8614.3447 -7832.6963 8614.416 -7832.9922 8614.4717 C-7833.1255 8614.1807 -7833.4995 8614.7373 -7833.8467 8614.5762 C-7833.8169 8614.5127 L-7834.0732 8614.8174 -7834.1973 8614.3369 -7834.4053 8614.7021 C-7834.5684 8614.4736 L-7834.6807 8614.8838 -7834.9395 8614.2607 -7835.1514 8614.4697 C-7835.1445 8614.5537 L-7835.3442 8614.6533 -7835.4482 8614.4473 -7835.6338 8614.5166 C-7835.6514 8614.4697 L-7836.0854 8614.5762 -7836.3379 8614.3486 -7836.3271 8614.6689 C-7836.4795 8614.4121 -7835.9063 8614.5518 -7836.1455 8614.1777 C-7837.5732 8614.5088 -7839.0459 8614.4434 -7840.4834 8614.4502 C-7840.6465 8614.3213 -7840.7505 8614.2822 -7840.7871 8614.1602 C-7840.9307 8614.2256 -7841.3281 8614.2197 -7841.4585 8614.3838 C-7841.4102 8614.377 -7841.5513 8614.2197 -7841.6274 8614.2041 C-7841.8887 8614.083 -7841.9131 8614.5557 -7842.2002 8614.4121 C-7842.0859 8614.3271 -7842.0469 8614.2236 -7842.0854 8614.1045 C-7842.3301 8614.3545 -7842.6577 8614.3145 -7842.9473 8614.3955 C-7842.9023 8614.3418 -7842.8325 8614.3096 -7842.8433 8614.209 C-7843.1602 8614.4922 -7843.4209 8614.1494 -7843.6982 8614.3281 C-7843.5947 8614.1436 L-7844.0415 8613.9189 -7843.7266 8614.5303 -7844.1128 8614.3975 C-7844.02 8614.3389 -7844.0527 8614.2666 -7844.0361 8614.1914 C-7844.3965 8614.5273 -7844.9795 8614.416 -7845.3389 8614.5303 C-7845.3174 8614.5049 -7845.3232 8614.4541 Y-7845.7148 8614.4961 -7846.1245 8614.3916 -7846.5552 8614.5381 C-7846.7119 8614.4561 -7846.5039 8614.0869 -7846.9185 8614.1553 C-7846.9033 8614.5264 -7847.6221 8614.3076 -7847.3779 8614.7275 C-7847.7319 8614.667 -7848.2925 8614.5273 -7848.5283 8614.6533 C-7848.3691 8614.5127 -7848.7007 8614.2002 -7848.4063 8614.1689 C-7848.6289 8613.9434 L-7848.5957 8613.792 -7848.3999 8613.9951 -7848.4707 8613.8037 C-7848.6182 8613.8193 -7849.0479 8613.9658 -7849.1797 8613.9053 C-7849.4531 8614.1328 -7849.7041 8614.5576 -7850.1465 8614.6045 C-7849.9385 8614.46 -7850.2646 8614.1953 -7850.1235 8614.1318 C-7850.7407 8614.8418 L-7850.8877 8614.8594 -7850.7725 8614.5498 -7850.9854 8614.6465 C-7850.9746 8614.7441 -7851.0674 8614.8057 -7851.1318 8614.8857 C-7851.1875 8614.8418 -7851.7441 8614.9775 -7851.8081 8614.6113 C-7851.8735 8614.4697 -7851.5684 8614.5361 -7851.7314 8614.4053 C-7852.0029 8614.4082 -7852.0151 8614.5342 -7852.2871 8614.54 C-7852.2925 8614.4912 L-7852.4717 8614.4365 -7852.8213 8614.6465 -7852.6265 8614.8486 C-7852.5015 8614.8594 -7852.6738 8614.6289 -7852.4888 8614.7354 C-7852.6152 8614.9473 -7852.9312 8615.0068 -7853.2031 8615.0098 C-7853.1104 8614.9521 -7853.1216 8614.8545 -7853.0845 8614.751 C-7853.4497 8615.0381 -7853.8369 8615.1289 -7854.2451 8615.249 C-7854.2515 8615.4229 -7854.0928 8614.9326 -7854.0327 8615.0244 C-7854.5557 8614.7832 -7855.1128 8615.3662 -7855.5479 8615.0137 C-7855.4766 8614.9834 -7855.5098 8615.2607 -7855.5146 8615.2119 C-7855.7666 8615.1904 -7855.7549 8614.9385 -7855.9189 8615.0313 C-7855.9355 8614.8838 -7856.1255 8615.0791 -7856.2944 8615.124 C-7856.3818 8615.2305 -7856.3384 8615.0518 -7856.1914 8615.0361 C-7856.4268 8615.1602 -7857.3691 8615.3877 -7857.9131 8615.1729 C-7857.9023 8615.2705 -7858.2471 8615.5313 -7858.3721 8615.5205 C-7858.3232 8615.292 L-7858.4375 8615.1553 -7858.7422 8615.3115 -7858.7632 8615.1162 C-7859.0303 8615.3936 -7857.7344 8614.8799 -7858.0957 8615.0938 C-7858.1895 8614.9033 -7858.5991 8615.458 -7858.5215 8615.1465 C-7858.7725 8615.1553 -7859.0161 8615.4121 -7859.2559 8615.1982 C-7859.1865 8615.2354 -7859.0522 8614.8809 -7859.2549 8614.8975 C-7859.6123 8614.9385 -7859.3564 8615.0068 -7859.6465 8615.083 C-7859.8281 8615.1768 L-7859.8398 8615.3994 -7860.1475 8615.1465 -7860.0146 8615.3955 C-7860.0586 8615.2119 -7860.5337 8615.5088 -7860.4971 8615.1396 C-7860.4473 8614.8486 L-7860.6016 8614.8701 -7860.7002 8615.1553 -7860.8213 8615.2832 C-7860.8418 8615.2568 -7860.8823 8615.1982 -7860.8745 8615.1514 C-7860.8994 8615.5967 -7861.2432 8615.1143 -7861.4268 8615.458 C-7861.7505 8615.3037 -7862.2495 8615.4434 -7862.4023 8615.167 C-7862.6514 8615.3018 -7862.8784 8615.4609 -7863.1621 8615.3662 C-7863.1055 8615.3242 -7863.0283 8615.3115 -7863.0122 8615.2158 C-7863.1904 8615.085 -7863.2344 8615.2021 -7863.3975 8615.2744 C-7863.3608 8615.208 -7863.7539 8615.0137 -7863.9521 8614.8564 C-7864.1992 8614.9893 -7864.1143 8615.2295 -7864.1392 8615.376 C-7864.3652 8614.9365 -7864.8379 8615.6592 -7865.1211 8615.2607 C-7865.0352 8615.2002 -7864.7598 8615.0449 -7864.9658 8614.9346 C-7865.1919 8614.4961 -7865.4219 8615.2578 -7865.7861 8615.0479 C-7865.6968 8615.4121 L-7865.8594 8615.1865 -7866.2334 8615.624 -7866.1963 8615.2529 C-7866.3184 8615.3838 -7866.6265 8615.1318 -7866.5859 8615.4873 C-7867.1846 8615.1865 -7868.0425 8615.6689 -7868.4102 8615.0313 C-7868.4961 8615.0908 -7868.7104 8615.0303 -7868.6665 8615.2129 C-7868.5239 8615.4111 -7868.4673 8615.0713 -7868.4141 8615.2061 C-7868.4912 8615.2168 -7868.5078 8615.3145 -7868.5161 8615.3633 C-7868.7021 8615.2822 -7868.8486 8615.2568 -7868.6729 8614.9609 C-7869.0869 8614.7412 -7869.1001 8615.5654 -7869.6274 8615.4258 C-7869.6035 8615.2793 -7869.6436 8615.2236 -7869.7979 8615.2471 C-7870.0903 8615.499 L-7870.4312 8615.4404 -7870.2842 8615.1641 -7870.2925 8614.915 C-7870.4746 8614.958 -7870.6973 8614.9463 -7870.7803 8615.1318 C-7871.0015 8614.8193 L-7870.8398 8615.0449 -7871.1514 8614.9697 -7871.2368 8615.0303 C-7871.1514 8614.9697 L-7871.1846 8614.8633 -7871.3955 8614.9287 -7871.5024 8614.96 C-7871.4766 8615.1143 -7871.2617 8615.1768 -7871.1445 8615.2217 C-7871.2373 8615.3311 -7871.3823 8615.3057 -7871.5059 8615.4346 C-7871.4648 8615.1904 -7871.8027 8615.2607 -7871.9473 8615.2354 C-7872.1133 8615.1826 -7872.1348 8615.4541 -7872.1831 8615.4463 C-7872.1875 8615.3193 -7872.4541 8615.4248 -7872.3247 8615.2471 C-7872.2681 8615.2061 -7872.1953 8615.3701 -7872.1016 8615.2578 C-7872.2109 8615.1641 -7872.1982 8614.9434 -7872.4258 8615.1045 C-7872.5967 8615.2256 -7872.3818 8615.5869 -7872.7061 8615.4326 C-7872.6211 8615.3721 -7872.6055 8615.2744 -7872.5391 8615.1865 C-7872.8433 8615.0596 L-7872.8564 8615.2822 L-7872.8975 8615.2256 -7872.8691 8615.2061 -7872.8877 8615.1768 C-7872.9785 8615.4111 -7873.3521 8615.249 -7873.4209 8615.5127 C-7873.5742 8615.5361 -7873.7441 8615.3584 -7873.8906 8615.333 C-7873.8623 8615.3135 L-7874.0415 8615.1826 -7874.2793 8615.2686 -7874.4297 8615.4189 C-7874.4219 8615.3701 L-7874.5195 8615.3525 -7874.7505 8615.3877 -7874.8735 8615.5186 C-7875.1201 8615.3506 -7874.9561 8614.6777 -7875.2295 8614.958 C-7875.48 8614.9658 -7875.6221 8615.3662 -7875.5215 8615.5088 C-7875.9717 8615.3584 -7876.4834 8615.7217 -7876.9009 8615.376 C-7876.9658 8615.4658 -7876.9248 8615.5225 -7877.0586 8615.5752 C-7877.7197 8615.4873 -7878.4551 8615.8389 -7878.9814 8615.4014 C-7878.79 8615.3076 -7878.9688 8615.1777 -7878.9727 8615.0518 C-7879.1309 8615.251 -7879.1631 8614.8447 -7879.2197 8615.1865 C-7879.2041 8615.3877 -7879.2197 8615.4854 -7879.0337 8615.5664 C-7879.4282 8615.6748 -7880.0283 8615.6748 -7880.2471 8615.4873 C-7880.1377 8615.5801 -7880.2227 8615.6416 -7880.3086 8615.7021 C-7880.2803 8615.3809 -7880.5713 8615.333 -7880.7915 8615.4463 C-7880.8223 8615.6416 L-7880.9658 8615.4404 L-7881.0503 8615.5029 -7881.0591 8615.8506 -7881.2773 8615.6631 C-7881.2891 8615.5869 -7881.3018 8615.5098 -7881.3418 8615.4541 C-7881.5693 8615.6143 -7881.8906 8615.8857 -7882.1377 8615.7197 C-7882.3398 8615.4346 L-7882.4453 8615.4658 -7882.6235 8615.6377 -7882.4375 8615.7197 C-7882.8594 8615.5479 -7883.1309 8615.5264 -7883.2646 8615.2793 C-7883.9912 8615.8809 -7885.0459 8615.9053 -7885.8906 8615.8623 C-7885.8652 8615.7158 L-7886.0923 8615.5791 -7885.9834 8615.9717 -7886.1416 8615.8701 C-7886.0684 8615.7305 -7886.3145 8615.5664 -7886.1362 8615.3955 C-7886.4609 8615.2412 -7886.5547 8615.6494 -7886.7656 8615.7158 C-7886.7979 8615.9082 -7886.5957 8615.5928 -7886.6367 8615.8369 C-7886.6729 8615.9053 -7887.0859 8615.6865 -7887.1362 8615.9775 C-7887.2178 8615.8633 -7887.1543 8615.6494 -7887.1104 8615.5313 C-7887.3086 8615.6729 L-7887.5513 8615.333 -7886.7559 8615.0654 -7887.0107 8614.6465 C-7887.1934 8614.6914 L-7887.3682 8614.3877 -7886.71 8614.3486 -7887.1689 8614.2441 C-7887.3682 8614.3877 -7887.5381 8614.8096 -7887.3608 8614.9385 C-7887.7754 8615.0186 -7887.5527 8615.6318 -7887.9985 8615.6074 C-7888.1201 8615.4365 -7887.6416 8615.5664 -7887.7275 8615.3271 C-7887.9375 8615.0928 -7888.1484 8615.458 -7888.3354 8615.376 C-7888.1279 8615.4854 -7888.3032 8615.7793 -7888.4375 8615.833 C-7888.6641 8615.6953 -7888.29 8615.5576 -7888.6113 8615.5273 C-7888.6641 8615.6953 -7888.9595 8615.8213 -7888.7041 8615.9385 C-7888.8203 8616.3193 -7889.0381 8615.833 -7889.2129 8616.1279 C-7889.3174 8615.8594 -7888.8823 8615.5088 -7889.2354 8615.375 C-7889.1792 8615.6328 -7889.6704 8615.7256 -7889.4839 8616.1074 C-7889.6221 8616.0342 -7889.6367 8615.8311 -7889.5361 8615.6729 C-7889.7334 8615.5137 -7890.0151 8616.1436 -7890.0801 8615.6318 C-7890.1479 8615.8955 L-7890.21 8615.8096 -7890.2983 8615.7441 -7890.3994 8615.6025 C-7890.5732 8615.5977 -7890.96 8615.96 -7890.9443 8615.5615 C-7891 8615.6025 -7891.3975 8615.585 -7891.2441 8615.8594 C-7890.9971 8616.0273 -7890.96 8615.6592 -7890.8223 8616.0313 C-7890.9971 8615.7275 -7891.1787 8616.0713 -7891.3213 8616.1729 C-7891.3447 8616.0186 L-7891.4297 8616.0791 -7891.6255 8616.0449 -7891.6787 8616.2119 C-7891.6133 8616.124 -7891.6475 8616.0186 -7891.7148 8615.9814 C-7891.8042 8616.2158 L-7892.1494 8616.333 -7891.8857 8615.8037 -7892.2217 8615.8721 C-7891.9663 8615.6904 L-7892.0225 8615.7295 -7892.1367 8615.5098 -7892.2979 8615.583 C-7892.3604 8615.7969 -7892.4775 8616.0537 -7892.5313 8616.2197 C-7892.7207 8616.3135 -7892.6162 8615.9785 -7892.8027 8616.1982 C-7892.5586 8615.9404 L-7892.5215 8615.8701 -7892.7231 8615.5869 -7892.9761 8615.5928 C-7893.1377 8615.667 -7893.3887 8615.9756 -7893.1338 8616.0928 C-7893.2607 8616.0967 -7893.4385 8615.9658 -7893.3379 8615.8096 C-7893.6255 8615.8838 -7893.2998 8616.04 -7893.5479 8616.1729 C-7893.6494 8616.0303 -7893.9658 8615.8271 -7894.1563 8615.6201 C-7893.8975 8615.2617 L-7894.0693 8615.2578 L-7893.8467 8614.9717 -7894.1826 8615.04 -7894.0566 8614.7373 C-7894.1743 8614.6904 -7894.3169 8614.793 -7894.4307 8614.8721 C-7894.0864 8615.3564 -7894.8159 8615.5342 -7894.7158 8615.9756 C-7895.1875 8616.0967 -7895.0107 8614.9014 -7895.5024 8615.5928 C-7895.4219 8615.708 -7895.6533 8616.0439 -7895.3564 8615.916 C-7895.6494 8615.8682 -7895.5557 8616.3594 -7895.9014 8616.1768 C-7895.6455 8615.9951 -7896.1763 8615.7295 -7895.8066 8615.4658 C-7895.8311 8615.6113 -7895.6001 8615.5762 -7895.5435 8615.5361 C-7895.6641 8615.3662 -7895.5186 8615.0908 -7895.8184 8615.0908 C-7896.0015 8615.1328 -7896.2524 8615.1416 -7896.2158 8615.3721 C-7896.2085 8615.625 -7895.9365 8615.3447 -7896.0537 8615.6006 C-7896.4185 8615.6885 -7896.4795 8615.3037 -7896.6304 8615.7529 C-7896.3999 8615.7168 -7896.3423 8615.9775 -7896.3467 8616.1514 C-7896.6143 8616.2568 L-7896.5625 8616.0889 L-7896.9922 8615.9678 -7896.6895 8616.3936 -7897.1055 8616.3486 C-7897.3008 8616.0166 L-7897.2017 8615.7305 -7896.6953 8616.1436 -7896.7695 8615.6777 C-7897.04 8615.6592 -7897.1299 8615.8955 -7897.3848 8615.7754 C-7897.3281 8615.7354 -7897.2505 8615.7236 -7897.1943 8615.6826 C-7897.2915 8615.667 -7897.3877 8615.0498 -7897.7734 8615.4111 C-7897.9727 8615.5518 -7897.8262 8615.5762 -7897.8311 8615.751 C-7898.2656 8615.8037 -7898.3955 8615.9814 -7898.6753 8616.0088 C-7898.6177 8615.6689 -7899.1699 8615.9756 -7898.8608 8615.6279 C-7898.7188 8615.8271 -7898.0903 8615.8076 -7897.9365 8615.4834 C-7898.0947 8615.0801 -7897.5952 8615.54 -7897.5024 8615.1318 C-7897.8506 8615.1221 -7897.8335 8614.7256 -7897.8896 8614.4658 C-7897.9863 8614.4473 -7898.0801 8614.5576 -7898.1377 8614.5977 C-7898.1787 8614.8418 -7898.0522 8614.8389 -7898.0449 8615.0908 C-7898.4336 8615.0244 -7898.8081 8615.1602 -7899.0225 8615.3994 C-7899.1523 8615.2783 -7899.1113 8615.0342 -7898.9575 8615.0098 C-7899.4199 8615.083 -7899.9141 8615.0498 -7900.3535 8614.9756 C-7900.0693 8615.375 -7900.8433 8615.0693 -7900.6494 8615.4014 C-7900.4141 8615.4912 -7900.2119 8615.7754 -7900.3418 8615.9541 C-7900.4888 8615.9287 -7900.3369 8615.7793 -7900.3984 8615.6943 C-7900.5859 8615.9121 -7900.6895 8615.3447 -7900.8735 8615.6885 C-7900.4512 8615.5596 -7900.7915 8615.2021 -7900.7139 8614.8896 C-7901.0186 8615.0654 -7900.7007 8614.667 -7901.0024 8614.667 C-7901.3057 8614.8408 -7901.6787 8614.9775 -7902.0161 8615.0449 C-7902.4399 8614.749 -7903.0898 8615.04 -7903.4683 8615.0518 C-7903.6665 8614.8936 -7903.5322 8614.54 -7903.7471 8614.4785 C-7903.9995 8614.4854 -7903.5601 8614.8594 -7903.9336 8614.6982 C-7903.8975 8614.6279 L-7904.0107 8614.709 -7904.5825 8614.3877 -7904.6929 8614.8955 C-7904.5776 8614.5127 L-7904.6475 8614.4775 -7904.7119 8614.5654 -7904.7695 8614.6064 C-7904.7725 8614.4814 -7904.8535 8614.3682 -7904.7402 8614.2861 C-7904.9707 8614.0225 -7905.2241 8614.3281 -7905.4746 8614.3389 C-7905.3135 8614.5654 L-7905.7422 8614.7432 -7906.0293 8614.5186 -7906.4443 8614.5977 C-7906.4316 8614.376 L-7906.6787 8614.5088 L-7906.6182 8614.293 -7906.8447 8614.1553 -7906.9751 8614.335 C-7906.3335 8613.792 L-7906.1553 8613.9229 -7906.5283 8614.0596 -7906.4165 8614.2783 C-7906.3213 8614.4697 -7905.9375 8614.4082 -7905.8755 8614.1953 C-7906.0225 8614.1709 -7906.0293 8614.2197 -7906.1436 8614.2998 C-7906.1919 8613.9912 -7905.9688 8614.0029 -7905.8584 8613.7969 C-7905.9355 8613.8096 -7906.0449 8613.7158 -7906.0615 8613.8135 C-7905.9102 8613.6631 -7905.7578 8613.6396 -7905.5059 8613.6318 C-7905.6763 8613.7529 -7905.4131 8613.8232 -7905.4775 8613.9111 C-7905.4575 8613.6396 -7905.2168 8613.5557 -7904.9053 8613.6318 C-7904.6831 8613.9463 -7904.3208 8613.4297 -7903.96 8613.5166 C-7904.1064 8613.792 -7904.2935 8614.0127 -7904.5127 8614.124 C-7904.2861 8614.2617 -7904.2607 8614.1162 -7904.0337 8614.2549 C-7903.9238 8614.0498 -7903.8457 8613.7354 -7903.5503 8613.6104 C-7903.5342 8613.8135 L-7903.2666 8613.709 -7903.2666 8613.4082 -7902.9258 8613.4658 C-7902.3418 8613.5654 -7901.7407 8613.5654 -7901.2949 8613.5908 C-7901.2783 8613.793 L-7901.0303 8613.3594 -7900.4521 8613.6328 -7900.1182 8613.4404 C-7899.5503 8613.6357 -7898.8848 8613.2471 -7898.5938 8613.5967 C-7897.5913 8613.4404 -7896.7148 8613.2881 -7895.6768 8613.3623 C-7895.8516 8613.6572 L-7895.6655 8613.4404 -7895.7305 8613.8271 -7895.5479 8613.7832 C-7895.7578 8613.5479 -7895.2949 8613.4775 -7895.1665 8613.2969 C-7894.7041 8613.5264 -7894.1104 8613.2754 -7893.7007 8613.0693 C-7893.6846 8613.2725 L-7893.2705 8612.8916 -7892.7759 8613.2256 -7892.2598 8613.2881 C-7892.2007 8613.3721 -7892.1074 8613.5625 -7891.9536 8613.54 C-7891.6738 8613.2119 -7891.5273 8613.2354 -7891.1167 8613.0303 C-7890.8169 8613.0303 -7890.3301 8613.1113 -7890.0254 8613.2393 C-7888.8975 8612.7783 -7887.7456 8613.0732 -7886.5732 8612.7959 C-7886.4888 8613.0342 L-7885.3521 8612.5244 -7883.9541 8612.9873 -7882.9839 8612.7256 C-7883.0776 8613.1328 L-7882.7734 8613.2578 -7882.3843 8613.0264 -7882.4619 8612.7373 C-7882.1567 8612.8623 -7881.7007 8612.54 -7881.5068 8612.875 C-7881.1953 8612.9502 -7881.1255 8612.6865 -7880.8662 8612.6318 C-7880.2422 8612.7861 -7880.0107 8612.751 -7879.4224 8612.6748 C-7879.5684 8612.6494 L-7879.6328 8612.7393 -7879.6387 8612.9121 -7879.4922 8612.9385 C-7879.2725 8612.8242 -7878.6846 8613.0479 -7878.9033 8612.5615 C-7878.2754 8612.8418 -7877.4385 8612.333 -7876.8271 8612.7119 C-7876.8789 8612.5791 -7876.7246 8612.5537 -7876.6602 8612.4639 C-7876.1089 8612.458 -7875.5293 8612.7295 -7875.0898 8612.5029 C-7875.0024 8612.5693 -7875.2295 8612.7295 -7875.0049 8612.7432 C-7874.8721 8612.6914 -7875.0024 8612.5693 -7874.8384 8612.4951 C-7873.9453 8612.2471 -7873.0303 8612.751 -7872.2188 8612.6865 C-7870.7754 8612.4297 -7869.2695 8612.5596 -7867.8867 8612.5166 C-7867.9023 8612.6143 L-7867.4395 8612.2412 -7866.8159 8612.9961 -7866.4463 8612.4346 C-7866.3369 8612.5273 -7866.0283 8612.4785 -7866.1094 8612.667 C-7865.7407 8612.4033 -7865.0771 8612.915 -7864.5439 8612.5801 C-7864.5928 8612.5713 -7864.6211 8612.5908 -7864.6777 8612.6328 C-7864.1392 8612.8486 -7863.6641 8612.5537 -7863.0957 8612.749 C-7863.1533 8612.791 -7863.2583 8612.8213 -7863.2754 8612.9189 C-7863.0557 8613.1064 -7862.7549 8612.5068 -7862.6348 8612.9775 C-7862.5088 8612.9736 -7862.5449 8612.7412 -7862.6221 8612.7549 C-7861.3779 8612.9385 -7860.0498 8612.6377 -7858.7549 8612.5303 C-7857.8271 8612.8115 -7858.6982 8613.3232 -7857.9663 8612.9717 C-7857.9063 8613.0625 -7857.9229 8612.792 -7857.9131 8612.8896 C-7857.6299 8612.7578 -7857.4717 8613.415 -7857.2754 8613.1689 C-7857.3564 8612.8799 -7857.1445 8613.0068 -7857.1387 8612.8311 C-7856.5713 8613.0186 -7856.4575 8613.2793 -7856.0098 8613.0596 C-7856.0435 8613.2119 L-7855.5186 8612.7822 -7854.9102 8613.0127 -7854.4673 8612.5166 C-7851.5728 8612.4258 -7848.7983 8612.1514 -7845.9761 8612.0938 C-7843.1865 8612.1885 -7840.4551 8611.9658 -7837.6221 8612.2295 C-7836.9585 8612.6289 -7836.9087 8612.6182 -7836.1797 8612.4561 C-7836.2095 8612.5205 -7836.2549 8612.5361 -7836.2061 8612.5967 C-7836.1699 8612.2686 -7835.6929 8612.5654 -7835.6235 8612.2529 C-7834.5762 8612.3135 -7833.6113 8612.2236 -7832.5337 8612.2217 C-7832.7041 8612.2568 -7832.7896 8612.5244 -7832.5869 8612.5029 C-7832.3755 8612.293 L-7832.3408 8612.3857 L-7832.2021 8612.3369 -7832.0513 8612.1748 -7832.1943 8612.0693 C-7829.4873 8611.7861 -7826.8242 8612.4434 -7824.1729 8612.3633 C-7823.5439 8612.5 -7822.6475 8612.375 -7821.9629 8612.3076 C-7819.9355 8612.7441 -7818.1084 8613.0977 -7816.0479 8612.792 C-7816.3174 8613.6396 -7817.1675 8613.835 Vf-7907.2578 8613.6357 m-7907.1855 8613.7998 -7906.9497 8613.8896 -7907.1377 8614.1074 C-7907.1611 8613.9541 -7907.2822 8613.7822 -7907.2578 8613.6357 Cf-7900.9619 8615.3232 m-7900.9536 8615.2744 -7900.8721 8615.3896 -7900.8521 8615.416 C-7900.9297 8615.4287 -7901.0024 8615.5664 -7901.0645 8615.4814 C-7900.9854 8615.4697 -7900.9976 8615.3916 -7900.9619 8615.3232 Cf-7899.3521 8615.4209 m-7899.3765 8615.5664 -7899.7207 8615.6826 -7899.9238 8615.7002 C-7899.3521 8615.4209 Lf-7897.8521 8616.0225 m-7897.7227 8616.1455 -7897.7583 8616.2129 -7897.9326 8616.209 C-7897.9453 8616.1318 -7897.8877 8616.0928 -7897.8521 8616.0225 Cf-7897.7456 8615.6904 m-7897.6211 8615.6865 -7897.5591 8615.7725 -7897.4985 8615.8564 C-7897.5029 8615.7305 -7897.7871 8615.9346 -7897.7456 8615.6904 Cf-7894.4893 8616.1143 m-7894.4111 8616.1025 -7894.2417 8615.9814 -7894.1689 8616.1436 C-7894.2505 8616.0303 -7894.5498 8616.3281 -7894.4893 8616.1143 Cf-7892.9761 8615.8936 m-7892.9272 8615.9033 -7892.9072 8615.9297 -7892.8506 8615.8896 C-7892.7607 8615.9561 -7892.8555 8616.0625 -7892.9312 8616.0762 C-7892.9761 8615.8936 Lf-7865.4287 8615.3076 m-7865.5923 8615.3799 L-7865.5684 8615.2354 L-7865.4287 8615.3076 Lf-7853.3574 8615.2998 m-7853.1943 8615.208 -7853.2441 8615.4365 -7853.2168 8615.458 C-7853.3643 8615.4736 -7853.1621 8615.2783 -7853.3574 8615.2998 Cf-7846.8486 8614.5713 m-7846.8984 8614.5752 L-7846.8818 8614.2754 L-7846.8486 8614.5713 LfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 1)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7686.4434 8616.3926 m-7686.4434 8597.9648 L-7908 8597.9648 L-7908 8616.3926 L-7686.4434 8616.3926 Ln0 O0.74902 0.678431 0.670588 0.901961 0 0 0 Xa-7790.4443 8598.2861 m-7807.9219 8596.0205 -7822.3623 8606.501 -7839.3994 8606.9375 c-7852.0244 8607.2627 -7861.7686 8602.3672 -7875.2373 8603.5781 c-7887.0039 8604.6367 -7897.6475 8605.6807 -7907.9297 8600.8799 C-7908.4121 8604.5986 -7906.2549 8608.6982 -7906.1182 8612.6309 C-7893.6475 8610.2246 -7884.0654 8603.2607 -7868.6416 8606.4941 c-7860.1123 8608.2822 -7854.7451 8612.9414 -7846.7266 8615.1826 c-7837.6865 8617.7109 -7829.1143 8615.9375 -7821.0435 8612.9688 c-7812.04 8609.6553 -7804.3604 8605.0283 -7793.3447 8604.4551 c-7783.6377 8603.9492 -7773.5015 8606.0654 -7764.3232 8607.6992 c-7755.2012 8609.3262 -7746.1865 8611.3154 -7736.7344 8609.4424 c-7730.3301 8608.1729 -7724.7021 8604.584 -7717.7988 8604.2715 c-7710.8633 8603.9561 -7707.6475 8607.1582 -7701.7524 8608.6279 c-7696.7842 8609.8672 -7691.6563 8609.4629 -7686.4434 8609.5107 C-7689.3887 8606.5225 -7688.8516 8602.1904 -7688.8164 8598.8066 C-7702.1768 8601.7393 -7719.1563 8599.1172 -7733.3457 8601.1006 c-7743.2842 8602.4902 -7753.3828 8605.1719 -7763.7754 8604.4717 c-7773.6514 8603.8057 -7781.0015 8599.5107 -7790.4443 8598.2861 cfU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe ArtOnPath Br) -(ush Tool/ Charcoal/ Adobe ArtOnPath Brush Tool/ Art Brush 1/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Art Brush 1)(1 / Unnamed Brush Pat 1/ / / / / 0 1 /  0 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Charcoal)(1 / Unnamed Brush Pat/ / / / / 5 0.137255 0.121569 0.12549 /  ) -(1 1 1.2 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 1 1 1 Xa(White)Pc0.74902 0.678431 0.670588 0.901961 0 0 0 Xa(Black)Pc0 0.992157 1 0 1 0 0 Xa(RGB Red)Pc0.062745 0 0.964706 0 1 1 0 Xa(RGB Yellow)Pc0.627451 0 1 0 0 1 0 Xa(RGB Green)Pc0.517647 0 0.12549 0 0 1 1 Xa(RGB Cyan)Pc0.882353 0.768627 0 0 0 0 1 Xa(RGB Blue)Pc0.270588 0.815686 0 0 1 0 1 Xa(RGB Magenta)Pc0.168627 0.980392 0.92549 0.066667 0.756863 0.152941 0.176471 Xa(R=193 G=39 B=45)Pc0.003922 0.992157 0.972549 0 0.929412 0.109804 0.141176 Xa(R=237 G=28 B=36)Pc0 0.796078 0.968627 0 0.945098 0.352941 0.141176 Xa(R=241 G=90 B=36)Pc0 0.501961 0.984314 0 0.968627 0.576471 0.117647 Xa(R=247 G=147 B=30)Pc0 0.34902 0.870588 0 0.984314 0.690196 0.231373 Xa(R=251 G=176 B=59)Pc0.047059 0 0.933333 0 0.988235 0.933333 0.129412 Xa(R=252 G=238 B=33)Pc0.188235 0 0.980392 0 0.85098 0.878431 0.129412 Xa(R=217 G=224 B=33)Pc0.501961 0 0.992157 0 0.54902 0.776471 0.247059 Xa(R=140 G=198 B=63)Pc0.745098 0 0.996078 0 0.223529 0.709804 0.290196 Xa(R=57 G=181 B=74)Pc0.862745 0.176471 1 0.039216 0 0.572549 0.270588 Xa(R=0 G=146 B=69)Pc0.901961 0.333333 0.988235 0.258824 0 0.407843 0.215686 Xa(R=0 G=104 B=55)Pc0.760784 0 0.74902 0 0.133333 0.709804 0.45098 Xa(R=34 G=181 B=115)Pc0.784314 0.090196 0.458824 0 0 0.662745 0.615686 Xa(R=0 G=169 B=157)Pc0.698039 0.14902 0 0 0.160784 0.670588 0.886275 Xa(R=41 G=171 B=226)Pc0.87451 0.52549 0 0 0 0.443137 0.737255 Xa(R=0 G=113 B=188)Pc0.992157 0.964706 0.035294 0.003922 0.180392 0.192157 0.572549 Xa(R=46 G=49 B=146)Pc1 1 0.262745 0.247059 0.105882 0.078431 0.392157 Xa(R=27 G=20 B=100)Pc0.745098 0.984314 0.007843 0.003922 0.4 0.176471 0.568627 Xa(R=102 G=45 B=145)Pc0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 Xa(R=147 G=39 B=143)Pc0.34902 1 0.372549 0.109804 0.619608 0 0.364706 Xa(R=158 G=0 B=93)Pc0.117647 1 0.494118 0.007843 0.831373 0.078431 0.352941 Xa(R=212 G=20 B=90)Pc0 0.968627 0.203922 0 0.929412 0.117647 0.47451 Xa(R=237 G=30 B=121)Pc0.227451 0.27451 0.4 0 0.780392 0.698039 0.6 Xa(R=199 G=178 B=153)Pc0.4 0.427451 0.52549 0.066667 0.6 0.52549 0.458824 Xa(R=153 G=134 B=117)Pc0.505882 0.529412 0.607843 0.235294 0.45098 0.388235 0.341176 Xa(R=115 G=99 B=87)Pc0.576471 0.603922 0.639216 0.419608 0.32549 0.278431 0.254902 Xa(R=83 G=71 B=65)Pc0.227451 0.384314 0.635294 0.011765 0.776471 0.611765 0.427451 Xa(R=198 G=156 B=109)Pc0.317647 0.490196 0.741176 0.098039 0.65098 0.486275 0.321569 Xa(R=166 G=124 B=82)Pc0.360784 0.572549 0.839216 0.227451 0.54902 0.384314 0.223529 Xa(R=140 G=98 B=57)Pc0.392157 0.639216 0.933333 0.356863 0.458824 0.298039 0.141176 Xa(R=117 G=76 B=36)Pc0.415686 0.698039 0.968627 0.490196 0.376471 0.219608 0.07451 Xa(R=96 G=56 B=19)Pc0.478431 0.733333 0.835294 0.682353 0.258824 0.129412 0.043137 Xa(R=66 G=33 B=11)PcBb2 (Linear Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 1)PcBb0 0 0 0 Bh2 (Radial Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 1)PcBb2 (Linear Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 2)PcBb0 0 0 0 Bh2 (Radial Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 2)Pc(Offset Squares Pattern) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Offset Squares Pattern)Pc0 g(K=100)Pc0.1 g(K=90)Pc0.2 g(K=80)Pc0.3 g(K=70)Pc0.4 g(K=60)Pc0.5 g(K=50)Pc0.6 g(K=40)Pc0.7 g(K=30)Pc0.8 g(K=20)Pc0.9 g(K=10)Pc0.95 g(R=241 G=241  B=242)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 Au1 Ap0 O0 J 0 j 1 w 4 M []0 d0 XR543.8691 88.5664 m30.4834 88.5664 L30.4834 724.6626 L543.8691 724.6626 L543.8691 88.5664 LBb0 0 0 0 Bh1 (Unnamed gradient 13) 442.6689 630.5718 -71.6688 389.9489 0.9113 0 0 0.9444 557.7323 484.3754 Bg111.7642 -349.5797 -337.3274 -115.8236 259.6973 590.2085 Bmf0 BBu0 Ap0.517647 0.439216 0.435294 0.082353 0.498039 0.494118 0.494118 Xa205.7441 230.4434 m189.6274 216.7354 170.1606 207.5889 150.9053 200.8906 c131.8052 194.5674 108.894 191.9727 89.2603 179.3799 C84.6108 175.5547 80.2749 175.1045 75.0996 166.4033 c73.4487 163.2959 75.8354 157.8643 78.2744 157.0889 C80.7676 155.4053 83.1318 155.4229 84.8594 155.46 c88.4243 155.6572 90.9917 156.5898 93.2515 157.002 C96.877 158.1758 98.896 156.4248 100.583 151.4854 c102.1206 146.8662 102.5503 141.3477 104.8447 135.8262 c107.1572 129.8936 113.5854 126.1621 119.6265 126.7852 c125.6177 127.334 130.8643 130.8496 134.041 135.584 c140.5352 144.9736 140.3218 157.3223 148.5283 165.5176 c151.1284 168.375 155.9702 171.167 158.8423 167.5693 c161.439 164.5039 162.5605 160.4854 163.9902 156.7891 c165.4614 153.1162 166.5947 149.0967 169.8574 146.2988 c173.7422 143.1182 178.2134 146.3076 181.4316 147.71 C195.48 155.5264 203.6465 169.6729 210.7964 182.8809 c217.626 196.1348 225.7236 209.7393 235.0801 221.2744 c241.5547 229.2568 258.2437 233.5195 267.4951 228.7373 c272.7163 226.0391 276.0322 218.8809 278.5146 213.9014 c281.5645 207.7852 284.9531 199.9053 290.4521 195.5781 c296.1836 191.0684 306.6816 187.7266 313.6514 190.8633 c321.2949 194.3027 325.2324 201.9775 330.3672 208.1191 c335.0449 213.7139 339.8203 218.8545 345.7578 220.6963 c351.8555 222.9248 356.1016 219.5 358.6299 213.1738 c361.1064 207.1064 362.9521 200.165 364.2861 193.5537 c365.7588 186.249 367.7441 178.8379 370.1328 171.7783 c371.4248 167.9609 374.0313 165.4502 376.6719 162.5469 c378.8525 160.1475 380.3984 157.3877 383.3564 155.8252 c390.8584 151.8584 399.5879 155.0176 406.7207 158.2285 c413.8584 161.4414 417.4521 166.3994 421.499 172.8145 c424.459 177.5078 428.6084 181.1221 434.1113 178.1025 C430.1445 183.6494 421.208 181.0938 416.4531 177.9277 c411.2129 174.4375 410.6738 167.7783 406.042 163.793 c399.707 158.3428 391.0645 160.5781 385.0371 165.2842 c382.1133 167.5674 379.6816 170.3838 377.7842 173.5664 c370.9756 184.9863 372.2217 198.918 366.8701 210.8203 c365.2314 214.4648 363.4941 218.2412 360.5029 221.5195 c357.7471 224.8975 352.6387 227.0635 348.3447 226.1621 c339.7158 224.6025 334.0762 218.1953 329.4023 212.0898 c325.1143 206.7139 320.5918 201.5605 313.8076 199.4404 c301.6709 195.6475 287.9072 207.6152 282.2534 217.2246 c278.6416 223.3633 274.4922 229.8662 267.3457 232.251 c258.7759 235.1123 247.6475 233.1006 239.6133 229.2949 c231.7061 225.5488 227.3252 218.0762 222.0879 211.4912 c216.0347 203.8799 210.9639 195.7451 206.2222 188.0352 c201.0942 179.8584 187.2627 151.4629 173.3804 163.2227 c169.9546 166.125 169.041 171.4531 166.0078 174.9316 c164.0142 177.3564 158.8052 180.1377 154.2212 179.6016 c142.4434 178.5693 137.6089 165.249 136.209 155.2949 c135.3008 148.8359 134.2241 142.0293 129.313 137.3086 c125.1211 133.2783 117.2681 127.3477 111.6489 131.8604 c105.5757 136.7393 106.2617 144.9883 104.2075 151.5684 c102.4883 157.0771 97.3726 159.167 92.3369 160.0273 c89.2061 160.5635 82.9551 160.3809 82.1519 164.3828 c81.4434 167.9111 86.8071 172.4297 89.0039 174.584 c93.8618 179.3486 99.8193 182.5986 106.2207 184.7988 c121.4658 190.0371 138.2168 187.6523 153.4624 193.082 c169.3945 198.7549 184.6733 206.3457 198.5264 216.0693 c218.9712 230.6162 234.7891 252.3477 249.4492 273.4648 c263.8916 294.9727 275.5342 318.0205 284.6924 340.7178 c293.4844 363.5088 301.5313 386.1221 305.3379 411.0527 c306.4873 423.7041 303.7598 436.9277 297.0508 448.2261 c293.3496 453.9365 289.3184 458.2227 286.2305 463.3091 c283.1899 468.2417 280.5439 473.8203 281.4946 478.8667 c282.229 482.4058 284.5322 484.6699 288.0059 487.6147 c291.2744 490.5947 293.8086 494.5059 294.752 498.7432 c296.6201 507.3848 293.166 515.271 289.9463 522.6079 C286.125 529.5879 283.2925 538.4067 281.9946 546.4023 C279.7085 554.5977 278.7578 565.0625 283.959 574.2021 C295.4531 591.605 311.3496 594.5239 323.5234 596.979 c336.2031 599.4229 348.5752 599.1538 363.3652 606.3584 C369.3213 609.8672 374.4531 614.7207 378.3213 620.7075 c382.0977 626.2964 385.0811 635.0703 380.3096 642.3926 c375.625 649.6631 366.8984 650.5181 360.8555 652.2329 c354.3008 653.7627 348.3682 656.4766 348.0469 662.3604 C347.1719 655.792 350.834 652.126 350.7549 649.7295 C351.0908 647.1855 349.4004 645.6606 348.3711 644.0762 C359.6143 639.5396 369.3955 639.7573 370.9658 636.6587 C373.5928 635.314 371.6592 627.3008 365.958 621.0508 C356.2725 607.9941 335.0146 607.1509 314.5215 600.7422 c304.1094 597.4375 293.1572 592.2524 284.9932 583.0708 c276.0176 573.9604 273.6172 558.8267 276.3789 548.062 c277.4663 542.9219 277.6895 539.021 279.1777 532.73 c280.9761 526.3867 282.9316 522.8379 284.5029 518.1914 c287.7676 509.4097 288.9297 501.895 285.207 497.0176 c283.5425 494.8032 282.8774 494.3394 278.9966 491.0205 c275.6313 487.9941 272.9785 483.1167 272.6831 478.3062 c272.2559 468.6069 276.7793 462.0425 280.6631 456.1733 c284.9531 450.0576 289.4824 445.8208 292.1162 440.4043 c295.0029 435.0195 297.167 429.041 298.0049 422.7588 c300.3311 410.2656 296.8965 397.2246 293.9385 383.8828 c290.8428 370.6807 287.0205 357.5527 282.3169 344.6475 c263.7983 296.0879 239.5425 263.1982 205.7441 230.4434 CfUu326.4199 535.0107 m327.248 536.1299 321.9561 534.2871 322.7373 535.3447 c316.2236 526.5317 319.2021 516.084 321.8223 506.1978 c321.9658 505.6592 322.1211 505.126 322.2676 504.5889 C322.3408 504.6846 322.4121 504.7813 322.4863 504.875 C320.7852 514.4893 320.9639 527.6299 326.4199 535.0107 cBb1 (Unnamed gradient 66) 326.1807 512.7549 104.309 37.7845 1 0 0 1 0 0 Bg-9.33847 36.6123 16.5251 4.21496 318.1934 510.7178 Xm-2037.5414 7988.3691 16.5251 4.21496 2355.7344 -7477.6514 Bc-9.33847 36.6123 16.5251 4.21496 318.1934 510.7178 Bm-2037.5414 7988.3691 16.5251 4.21496 308.8545 547.3301 Bcf0 BB357.5117 658.624 m358.3096 654.957 361.8115 652.8936 365.1279 651.7417 c367.4668 650.9282 370.0254 651.5938 372.4229 651.6724 c374.8574 651.7524 377.5156 649.9912 379.5508 648.8271 c383.9756 646.2974 385.5732 641.667 386.8516 637.0415 c387.6621 634.1021 388.3584 631.187 388.8125 628.168 c389.1172 626.1494 389.1621 624.0938 389.2275 622.0601 c389.2314 621.9424 389.3643 618.2666 389.3799 620.5688 c389.3838 620.9043 389.3896 621.2412 389.3975 621.5771 c388.8447 616.9502 383.3125 614.5278 379.9111 611.9556 c375.7031 608.7744 371.25 606.0557 366.4736 603.8115 c362.8291 602.0986 359.1484 601.1128 355.2773 600.1416 c344.4033 597.4131 333.5195 594.7139 322.7266 591.6665 c317.1006 590.0781 311.4961 588.3955 305.9814 586.4536 c302.373 585.1816 298.5049 583.8652 295.3467 581.646 c293.2256 580.1543 293.7676 577.9277 293.8262 575.5654 c293.8428 574.9707 294.6465 573.9746 294.7891 573.7422 c296.043 571.6885 295.96 568.4429 296.4648 566.1006 c297.3242 562.0986 296.7412 560.0898 297.2891 556.0132 c297.1104 557.3418 298.333 557.4199 298.1553 558.7568 c297.6475 562.5508 297.9248 566.3696 297.5088 570.167 c297.3057 571.9937 296.708 573.7236 296.0156 575.4131 c295.4932 576.6958 293.8682 578.2793 293.835 579.6504 c293.832 578.3174 293.8301 576.9839 293.8281 575.6509 c294.1494 578.1094 298.9941 579.6304 300.8271 580.4072 c306.1543 582.6689 311.7363 584.3569 317.2725 586.0122 c329.3271 589.6162 341.5508 592.6416 353.7559 595.689 c357.6709 596.666 361.4277 597.6138 365.167 599.1611 c370.4561 601.3511 375.3506 604.4502 379.9111 607.8833 c383.2256 610.3809 389.3252 613.0601 389.4072 617.7832 c389.5508 626.2148 388.751 634.2295 386.498 642.3872 c384.9922 647.8501 382.4043 651.52 377.3076 654.1104 c372.3848 656.6108 367.3633 654.4819 362.457 656.9512 c360.0996 658.1362 358.0811 660.0771 357.5117 662.6953 c357.793 661.4063 357.2285 659.9253 357.5117 658.624 CBb1 (Unnamed gradient 109) 426.1387 371.5996 110.2997 271.7078 1 0 0 1 0 0 Bg-94.2639 254.8322 110.781 40.9785 370.9268 351.1768 Xm-2816.9006 7615.1802 110.781 40.9785 3187.8271 -7264.0029 Bc-94.2639 254.8322 110.781 40.9785 370.9268 351.1768 Bm-2816.9006 7615.1802 110.781 40.9785 276.6626 606.0088 Bcf0 BB327.9443 562.8003 m314.127 573.8062 292.8711 560.9072 289.7207 545.2813 c288.1592 537.5264 290.6191 530.917 298.7441 529.0215 c313.4561 525.5884 339.7275 534.9063 334.5625 553.8213 c333.5674 557.4629 330.7178 560.4067 327.9443 562.8003 c328.5986 562.2363 327.2559 559.3218 327.9443 558.728 c329.8672 557.0703 331.5996 555.2778 332.9902 553.147 c333.5869 552.2363 334.0381 551.2441 334.4102 550.2261 c334.8926 548.9043 334.6221 546.292 334.9404 549.6777 c334.5928 545.9795 331.9824 542.9116 329.248 540.6323 c322.3604 534.8931 312.2881 532.2827 303.459 532.5239 c299.7783 532.6221 295.9082 533.4053 292.9082 535.6406 c291.6826 536.5532 290.7764 537.7969 290.1621 539.1841 c289.8105 539.9893 289.6484 540.8647 289.5391 541.7314 c289.8672 539.082 289.5488 540.1606 289.7207 541.2095 c289.8564 542.0107 290.0918 542.7925 290.3223 543.5708 c294.6182 558.1318 314.9971 569.0415 327.9443 558.728 c327.3027 559.2393 328.626 562.2583 327.9443 562.8003 CBb1 (Unnamed gradient 66) 321.6934 508.1318 104.309 43.3849 1 0 0 1 0 0 Bg-10.7226 42.039 51.6666 13.1783 295.3086 501.4023 Xm-2030.032 7958.9277 51.6666 13.1783 2325.3408 -7457.5254 Bc-10.7226 42.039 51.6666 13.1783 295.3086 501.4023 Bm-2030.032 7958.9277 51.6666 13.1783 284.5859 543.4414 Bcf0 BB360.6123 422.1484 m355.4531 426.4429 348.1484 427.269 343.75 432.314 c342.0654 434.2334 341.5762 436.8057 339.8115 438.542 C337.7637 440.7827 333.9375 442.0757 331.6094 443.5908 C323.002 448.4468 313.7803 460.0776 314.7598 472.2529 c315.0527 478.0698 316.7256 483.7705 319.5264 488.7876 C318.2197 488.2974 316.8848 487.937 315.5225 487.8486 C313.6445 483.9346 311.8682 479.959 311.833 477.0034 C311.0664 469.5229 313.5127 463.0576 316.4453 457.0947 c319.1836 451.4844 321.9854 446.2695 325.9121 441.3999 c328.9395 437.6826 333.3506 436.8057 337.0957 434.7729 c340.9004 432.8276 343.1816 429.5347 347.0371 427.5151 c348.6709 426.6489 350.3477 425.7085 352.0508 425.0044 c357.3057 422.7549 362.0322 419.5645 367.1191 415.5361 C369.4268 413.8506 371.7139 411.0293 373.9922 409.1045 C369.8135 414.1514 364.9473 418.5352 360.6123 422.1484 cBb0 0 0 0 Bh1 (Unnamed gradient 74) 342.8418 448.9463 0 35.7611 1 0 0 1 0 0 Bg35.7611 0 0 -35.7611 342.8418 448.9463 Bmf0 BB339.1514 358.5664 m333.7256 351.6387 327.1543 346.6719 319.2793 344.8223 c311.5381 342.9971 302.6357 344.5957 296.3184 350.7939 c284.3965 362.7041 281.5166 380.9268 282.8291 397.7969 c283.4209 404.2998 283.6797 410.3252 284.9434 416.126 c285.9756 421.8369 289.4424 427.7153 289.2773 433.0068 C287.8779 444.0215 280.5791 453.417 275.333 464.6099 c272.8882 469.3506 270.7227 474.5557 269.7129 480.0967 c268.8447 484.3262 269.4561 490.2095 273.7056 493.9204 c277.8809 497.7637 282.999 498.0605 286.7598 498.833 C294.04 499.6372 299.9883 504.6646 301.9736 511.1694 c304.2354 517.5405 301.498 522.7705 295.9102 527.2402 C300.6494 523.4497 302.1045 516.2334 300.2178 510.7368 c297.8174 503.7412 291.3184 500.8374 284.5615 499.3643 c279.9785 498.3643 275.209 498.251 270.6504 497.2378 c263.5322 495.6577 261.9253 491.4653 262.1123 484.624 c262.5288 469.4609 276.2314 457.9937 282.6963 445.1143 c284.9893 440.5459 283.3545 436.3745 282.7939 431.6792 c282.6221 430.2422 282.834 428.7876 282.5781 427.3608 c282.1592 425.0454 280.958 422.835 280.2852 420.5791 c278.3828 415.1006 278.0371 409.2666 277.8125 404.9795 c277.042 389 279.4082 370.4688 289.5674 355.9336 c294.5391 348.7979 301.9609 343.1035 310.4229 342.3252 c318.7324 341.2451 326.9912 343.9033 333.3789 348.4395 c343.251 355.4775 349.501 366.5 353.8984 377.7627 c358.3369 389.1377 361.1426 401.1094 364.4961 412.9287 C362.252 411.7412 360.4385 413.0303 358.4619 413.2168 C358.9541 407.7568 356.8955 396.4883 353.2334 385.334 c349.6553 374.1104 343.6465 363.625 339.1514 358.5664 cBb1 (Unnamed gradient 109) 344.2705 335.1318 110.2997 277.0182 1 0 0 1 0 0 Bg-96.1063 259.8127 92.4143 34.1846 296.8379 317.5859 Xm-2859.0781 7729.2026 92.4143 34.1846 3155.916 -7411.6162 Bc-96.1063 259.8127 92.4143 34.1846 296.8379 317.5859 Bm-2859.0781 7729.2026 92.4143 34.1846 200.7314 577.3984 Bcf0 BB358.9033 492.3784 m371.2871 496.6284 381.3291 502.5537 391.958 509.1709 c392.8867 509.748 394.4297 510.3623 394.8955 511.4312 C394.7119 511.0137 394.9678 510.0918 394.9063 509.5908 c394.8145 508.8608 394.6992 508.1348 394.5576 507.4131 c394.2734 505.9575 393.8936 504.5254 393.4785 503.104 c391.8252 497.7798 388.8359 492.9297 385.1348 488.5488 c379.5029 481.9912 375.2422 475.6387 370.1025 469.2017 c364.9238 462.9351 359.8262 458.0728 356.6553 450.2954 c355.2637 447.1274 353.8682 443.7871 353.5469 440.7393 c352.8027 435.3389 354.8301 434.4595 360.001 431.7456 c361.2822 431.0381 362.5693 430.5952 362.376 430.7671 C363.416 430.5981 364.499 431.2783 367.6836 430.2412 C371.5068 428.5122 373.2764 426.4858 375.2979 425.5234 C376.958 424.9063 376.2314 425.0063 378.6025 426.1104 c381.2344 427.1958 383.3965 429.9111 389.7051 428.9658 C382.7461 430.1182 380.8564 427.2432 378.21 426.3247 c375.9492 425.4004 377.1846 425.4185 375.3369 426.2485 C373.3848 427.3511 372.0781 429.3569 367.6719 431.3618 C364.2432 432.3833 363.3086 431.8267 362.4404 432.0552 C362.248 432.3052 363.2275 431.7524 362.4697 432.1245 c360.8281 433.062 l358.3398 434.4663 355.8574 436.1533 355.7637 436.418 C355.0801 436.9854 354.9053 439.6323 355.5635 442.2695 c356.9121 447.5078 359.7588 453.8833 363.4463 458.1348 c366.4736 461.5098 370.168 463.1113 373.6924 466.2314 c378.085 470.145 382.9473 476.4551 386.5264 481.4429 c387.9727 483.4595 389.3027 485.5791 390.5469 487.7241 c392.9199 491.8154 395.0098 496.2275 396.0303 500.8667 c396.5234 503.1133 396.959 505.563 396.7666 507.8667 c396.6855 508.8462 396.3906 509.769 396.1777 510.7231 c395.9131 511.8965 395.8984 513.0713 395.8174 514.2651 C395.6504 513.8091 395.0771 513.3262 394.6807 513.0356 c393.8389 512.4131 392.8994 511.9741 392.0557 511.3584 c391.0762 510.6421 390.041 509.9946 389.0156 509.3428 c385.2891 506.9785 381.3799 504.8823 377.3906 503.0044 c373.5068 501.1768 369.5283 499.5532 365.4756 498.1396 c357.6309 495.458 349.668 493.1201 341.5195 491.5908 c333.4639 490.2153 324.7969 488.9497 316.832 492.1655 C316.7197 489.8218 315.0156 487.3076 314.5156 485.4111 C324.8711 484.4536 348.9375 488.9033 358.9033 492.3784 cBb1 (Unnamed gradient 109) 407.4463 358.5039 110.2997 277.0154 1 0 0 1 0 0 Bg-96.1053 259.8101 84.6565 31.315 365.1182 342.8467 Xm-2860.8669 7734.0386 84.6565 31.315 3225.9854 -7391.1924 Bc-96.1053 259.8101 84.6565 31.315 365.1182 342.8467 Bm-2860.8669 7734.0386 84.6565 31.315 269.0127 602.6567 Bcf0 BB373.1123 451.4009 m378.9453 456.3657 385.7451 460.5728 391.8477 465.98 c398.2168 471.2612 402.7256 478.7954 405.208 486.5454 c407.8115 493.8721 408.502 501.4209 409.5029 508.709 c410.0234 512.3647 410.6885 515.9863 411.6523 519.5532 c411.8691 520.3594 412.0664 521.1865 412.3477 521.9741 c412.5879 522.6475 412.9277 523.2681 412.4619 523.9424 c412.1104 524.4536 411.6162 524.9321 410.9814 524.7241 c410.4346 524.5454 409.9609 524.3242 409.377 524.2051 c407.7139 523.8667 406.0313 523.6084 404.3486 523.3979 c393.1152 522.0039 383.4873 520.2988 372.7129 519.5249 c362.1475 518.7241 352.5391 519.8193 342.335 516.8428 c338.0654 515.5713 333.7422 513.8701 330.2139 511.52 c324.4902 507.7441 319.998 503.4326 316.3174 497.5425 c312.3936 491.8662 308.5654 484.6719 300.2285 480.3032 c296.498 478.3486 290.7842 478.0781 286.3623 480.3984 c282.0762 482.7031 279.4375 485.7798 277.1455 487.7578 C279.3369 485.5703 280.9512 482.8623 283.0918 480.6216 c284.8799 478.748 286.3965 476.9497 288.9941 476.2598 c291.416 475.6157 294.0146 475.7305 296.4717 476.0991 c299.7568 476.5938 302.9336 477.8384 305.4795 480.0093 c306.7139 481.0581 307.3281 482.3794 308.1641 483.7285 c309.2598 485.5039 310.5342 487.1743 311.6826 488.9175 c313.0029 490.9199 314.3926 492.8813 315.8242 494.8027 c320.4902 501.064 325.8301 506.8979 332.5811 510.9458 c339.4199 515.0415 347.8311 517.0654 355.8057 516.9336 c361.8916 516.8394 366.8848 515.2275 373.1934 514.8818 c381.123 514.3877 391.5166 515.6719 399.2441 517.0654 c400.7041 517.3291 402.1611 517.6309 403.6113 517.9458 c404.9316 518.2349 406.4756 518.4155 407.6943 519.0205 C407.2285 518.3589 407.3184 517.1626 407.2217 516.3887 c406.3037 508.9336 406.5781 501.4961 405.3232 494.1851 c403.9971 486.9067 401.2783 479.6416 396.5137 473.6616 c391.5732 467.833 385.1514 463.8145 379.2578 459.9766 c374.7793 457.0674 370.3877 454.0586 366.7559 450.3071 c365.0049 448.3906 363.3857 446.3564 362.1357 444.1011 C361.6104 442.9277 360.8467 441.8545 360.5068 440.603 c359.8809 438.772 l359.6279 438.9312 360.001 437.127 359.2334 438.8945 c360.0137 438.2554 l364.2207 434.854 368.1963 431.4009 372.2969 427.8022 c372.7959 427.3691 373.3496 426.7949 373.709 426.2666 C373.916 425.8735 373.9619 426.0835 374.7783 426.1729 C376.0322 426.4639 377.3096 426.8667 378.6465 427.1709 c381.1729 427.8511 384.5381 428.0371 386.6719 425.8506 C386.5303 428.3174 388.1904 429.6519 388.9951 431.4927 C383.6641 434.021 377.9209 431.3535 374.5117 430.0151 c374.3086 429.9399 374.001 429.8218 373.8877 429.7856 C373.6523 429.2168 373.6016 431.0781 373.9424 427.4951 C374.2764 426.1426 373.3105 425.5264 374.4922 426.7686 C373.877 426.1567 376.6699 428.8037 376.459 428.5435 C376.457 428.5425 376.4902 428.4873 376.4082 428.5874 c376.2852 428.7295 376.208 428.8276 376.0488 429.0034 c374.8848 430.2061 373.7441 431.0811 372.71 431.9468 c370.8428 433.3413 368.7998 435.0918 366.7949 436.7852 c365.8018 437.646 364.7324 438.4868 363.708 439.3472 c362.1602 440.6338 l361.3906 441.2773 l361.1982 441.4365 l359.8623 445.3438 363.0039 436.124 362.6885 437.0903 c362.6963 437.1152 l362.7158 437.1631 l362.752 437.2632 l362.8965 437.6523 l363.5664 439.7666 364.5127 441.7056 365.624 443.4399 c367.8613 446.9019 370.8193 449.4839 373.1123 451.4009 cBb1 (Unnamed gradient 109) 400.3086 355.8623 110.2997 277.0167 1 0 0 1 0 0 Bg-96.1058 259.8113 134.7448 49.8429 333.0107 330.9688 Xm-2859.0386 7729.0957 134.7448 49.8429 3192.0488 -7398.127 Bc-96.1058 259.8113 134.7448 49.8429 333.0107 330.9688 Bm-2859.0386 7729.0957 134.7448 49.8429 236.9048 590.7803 Bcf0 BB378.3379 621.3398 m376 617.0894 369.833 614.4004 363.6924 612.6021 c357.4531 610.7046 350.7266 609.7305 343.7725 607.998 c331.126 604.854 318.3135 604.3184 305.2715 600.9634 c295.3564 598.3369 288.3398 592.001 284.0127 584.2734 c279.6738 576.583 276.6455 568.9551 277.4141 559.5762 c277.6523 555.6489 278.0313 551.5576 278.7021 547.7598 c280.8984 535.7119 282.1777 523.4243 285.9043 511.6255 c287.2334 506.9155 290.0762 500.2363 291.9326 500.3735 c290.1523 500.9438 288.4043 506.5342 287.1885 511.7651 c285.6699 517.4658 283.9336 523.9414 283.291 529.7065 c281.9863 543.3325 276.8213 557.9741 280.2646 570.6416 c282.1221 575.4033 285.1514 578.478 288.0186 581.9023 c291.4102 586.2856 296.7412 591.3804 302.418 594.0654 c322.4814 603.6299 352.792 606.1992 375.0088 614.0586 c383.7734 617.812 385.1719 628.6245 381.5801 636.9233 c379.9307 641.0186 378.3076 646.1191 374.8789 647.9761 c371.0303 649.1011 366.749 643.8203 361.667 645.5112 c362.7129 643.4502 361.8721 641.481 361.8887 639.4946 c363.3379 639.7407 366.0127 640.1011 368.1465 641.3101 c370.1807 642.4473 371.2188 643.3643 372.6133 644.0483 c374.3135 644.5225 373.7822 645.0801 374.0283 644.6191 c374.749 643.9907 375.9307 642.3003 376.7109 640.4526 c380.8877 632.4321 380.7051 624.3081 378.3379 621.3398 CBb1 (Unnamed gradient 66) 332.6035 627.686 -93.9984 68.77 1 0 0 1 0 0 Bg-4.79525 -68.6026 -107.8384 7.53779 386.8457 623.8945 Xm-576.4928 -8247.5234 -107.8384 7.53779 963.3389 8871.418 Bc-4.79525 -68.6026 -107.8384 7.53779 386.8457 623.8945 Bm-576.4928 -8247.5234 -107.8384 7.53779 382.0508 555.292 Bcf0 BB390.3955 225.2305 m387.0557 221.8633 384.752 218.8174 383.1504 217.9971 c382.3994 217.5908 382.3428 217.5527 381.6084 217.6396 c380.8906 217.7363 379.5898 218.3447 379.2275 218.6953 c378.2549 219.0244 377.7285 221.7158 377.6123 225.7832 c377.4502 227.8018 377.3564 229.9053 376.4297 232.5078 c375.4844 235.7178 372.0098 237.6201 370.998 238.0762 c368.3535 239.3994 366.7402 241.7197 364.7588 245.2051 c363.0762 249.1777 356.9404 251.9102 353.1367 249.2471 c345.9219 245.083 343.7393 236.6348 336.0137 233.7627 c333.4141 232.3008 329.5361 233.623 330.5381 236.8584 c330.9961 239.5664 332.8242 241.7461 333.3926 244.5938 c333.9043 246.0771 332.6172 248.0137 331.0801 248.292 c329.6436 248.7783 328.2637 248.7148 326.8418 248.6631 c324.0283 248.5029 321.2754 247.5635 318.874 246.1758 c313.9658 243.5195 309.9814 239.4268 306.126 235.6787 c304.2744 233.8115 301.877 232.6816 301.6279 233.4287 c300.4727 234.3857 300.2168 236.5195 300.9785 239.3896 c302.332 243.9209 305.0039 250.4404 302.624 256.0156 c300.8682 261.6172 296.5166 265.6797 291.9102 268.2705 c287.2168 270.8838 281.9639 272.2373 276.5645 272.0645 c271.1626 272.3213 265.4336 268.7705 261.9414 267.6191 c262.1035 265.1064 266.7603 264.8281 268.3218 263.0469 c276.0371 269.7822 287.8623 269.3643 296.4033 262.6426 c300.5518 259.2568 303.5273 253.2207 302.0459 246.8203 c301.2656 243.7666 299.8818 240.9375 299.2852 237.8994 c298.5361 235.248 299.5996 230.8604 303.1221 231.4922 c309.9873 234.7617 314.3154 240.7158 320.0186 242.7588 c322.7109 244.042 325.5088 244.5469 327.8887 244.1914 c328.96 244.3906 330.7617 243.0684 329.1309 243.9551 c327.9639 246.2637 328.5615 244.9375 327.4521 243.4971 c326.7051 241.8076 324.9658 239.7539 324.918 235.291 c324.8896 232.9795 326.8232 229.1055 329.9072 228.1826 c332.6992 227.1445 334.6152 227.5391 336.2305 227.8262 c342.1953 229.3193 346.0977 233.3545 348.7168 236.4824 c351.3174 239.6836 353.4375 242.3076 355.3809 243.6465 c357.0371 244.6104 357.3711 245.1543 359.5186 242.6279 c361.3115 239.373 364.916 234.6387 368.8438 233.0723 c372.2266 232.2607 372.3525 227.7207 372.8223 223.6738 c371.8438 214.3418 384.2754 208.8945 389.4844 218.502 c392.0449 221.6973 395.7422 226.3848 401.2607 226.7793 c406.915 227.9756 411.9736 222.2549 411.7158 217.3613 c411.9912 207.4004 403.6016 200.2959 406.8643 191.29 c408.1719 187.2432 410.791 183.2168 415.1621 181.4004 c419.5625 179.0371 425.1816 181.7578 427.9443 185.041 c431.0615 188.1836 433.3926 191.917 436.4766 193.8809 c439.7744 195.8398 443.9902 197.7529 447.4814 197.3457 c453.0762 196.624 448.9092 187.9824 451.3916 183.4209 c455.2158 177.1641 459.1426 182.9863 462.0635 188.6221 c463.6563 191.4063 467.0391 194.2861 470.5234 193.5176 c473.8311 193.0645 475.9385 189.8945 475.8135 187.5059 c476.332 182.8896 473.1924 178.4727 477.3506 173.2148 c481.5742 169.9316 486.7852 169.7432 491.8223 170.7734 c497.04 172.0713 500.6484 176.2705 503.6221 180.0645 c498.6846 176.7764 497.3691 179.7109 495.916 181.04 c492.7891 176.7432 488.7959 175.168 482.7852 176.3027 c480.1748 177.1357 480.2549 176.8418 479.627 179.8311 c478.9131 182.4736 480.5889 186.1777 477.5928 191.9844 c475.7646 194.8623 472.3105 196.3818 469.3252 196.1992 c465.9258 196.1416 463.208 193.9668 461.7695 192.2637 c458.6895 188.5596 457.7275 185.5908 455.8418 184.1641 c455.4854 183.5244 455.0107 184.1963 455.3965 183.1904 c455.54 182.1563 455.4609 182.9238 455.8369 183.6563 c455.5176 183.8389 454.6973 184.6338 454.667 185.083 c454.0293 186.4814 455.209 189.6387 455.0957 194.2617 c455.3018 197.8281 451.332 202.1826 447.7197 202.1445 c444.3359 202.4424 441.79 201.5313 439.3721 200.5713 c434.5957 198.9141 430.1104 194.6172 427.7363 190.7578 c425.0361 187.0166 422.1543 183.2588 418.25 183.4629 c414.29 183.5996 410.6787 187.1484 409.0459 191.1191 c405.4375 199.1768 412.4473 205.3379 413.9785 214.4463 c414.7373 218.8691 413.9531 225.7207 407.4258 228.9082 c401.1934 231.7432 394.7393 229.3271 390.3955 225.2305 CBb0 0 0 0 Bh1 (Unnamed gradient 74) 382.7813 221.1494 0 92.7266 1 0 0 1 0 0 Bg92.7266 0 0 -92.7266 382.7813 221.1494 Bmf0 BB360.248 335.1924 m360.293 335.2344 360.3379 335.2793 360.3838 335.3232 c368.3086 343.7373 374.0762 351.6309 378.3623 360.2061 c384.6611 372.8115 393.7734 391.873 384.377 405.3457 C384.5732 390.7842 380.9424 376.167 375.583 362.7305 c372.6895 355.4736 368.7109 349.0498 363.9063 342.4873 c359.8877 336.543 350.7852 327.4951 350.7695 336.0947 C352.248 342.9521 357.7324 349.4043 361.1621 356.3457 c364.8203 363.0107 368.9678 369.3389 372.6729 375.8389 c376.3643 382.335 379.8408 388.9873 381.6475 396.4063 c382.4238 399.335 382.7998 402.4639 382.7061 405.4893 c382.5615 410.1719 381.4619 415.0605 379.5654 419.3545 c378.7051 421.3018 377.6025 423.1611 376.1572 424.7363 c375.4434 425.5132 374.6533 426.2085 373.8057 426.8389 c373.1855 427.3008 371.6006 427.897 371.2178 428.5264 C373.1904 425.29 374.292 422.3271 375.2227 418.5859 c376.1631 414.8096 377.0352 411.1914 377.2041 407.2822 c377.498 400.5225 376.9902 393.877 374.7783 387.4453 c372.4961 380.8242 369.4023 374.2607 365.9785 368.1504 c362.0605 361.1543 358.6045 353.4814 353.8281 345.9805 C351.8535 342.2832 348.8945 337.8291 349.5732 333.8887 C350.2559 331.9141 352.1104 330.3135 354.3145 331.1475 c356.4404 331.8291 358.4199 333.458 360.248 335.1924 cBb1 (Unnamed gradient 109) 363.2891 380.5879 110.2997 174.4769 1 0 0 1 0 0 Bg-60.5315 163.6403 62.5131 23.124 333.1396 369.4355 Xm-2886.3804 7803.0112 62.5131 23.124 3219.5195 -7433.5752 Bc-60.5315 163.6403 62.5131 23.124 333.1396 369.4355 Bm-2886.3804 7803.0112 62.5131 23.124 272.6079 533.0757 Bcf0 BB361.3818 400.5674 m357.8799 394.3584 354.8301 388.3516 349.624 383.1152 c344.7676 378.3643 338.7559 374.8203 332.3066 372.5977 c327.4258 371.0713 323.4111 368.418 318.0908 367.8623 c312.7979 367.373 308.4473 369.7461 303.6797 371.7471 c301.5918 372.6074 299.5889 373.8945 297.6846 375.1807 c291.3838 379.3721 288.6563 387.4326 288.2539 394.9189 c287.9795 398.2988 288.543 402.3252 288.543 405.5078 C287.582 398.5928 286.9316 390.7236 289.3496 383.3818 c292.5811 373.9883 302.2031 370.7471 309.3291 367.3799 c312.2148 365.9736 314.6934 363.9766 318.1768 363.5127 c322.5859 362.874 327.834 364.9951 331.2979 366.6875 c343.998 373.2178 353.8057 384.6416 361.5029 394.9834 c364.7949 399.415 367.4199 404.335 369.4766 409.4502 c371.417 414.2764 373.8633 418.8857 372.042 424.2002 c371.2305 426.5669 370.0762 429.9619 367.625 431.1621 C368.7529 429.1587 369.3398 426.6309 369.4668 424.3584 c369.9307 416.2197 365.9609 407.0986 361.3818 400.5674 CBb1 (Unnamed gradient 109) 354.6787 338.9824 110.2997 277.0124 1 0 0 1 0 0 Bg-96.1043 259.8073 90.1323 33.3405 309.5693 322.2959 Xm-2855.9861 7720.8433 90.1323 33.3405 3165.5557 -7398.5479 Bc-96.1043 259.8073 90.1323 33.3405 309.5693 322.2959 Bm-2855.9861 7720.8433 90.1323 33.3405 213.4648 582.103 Bcf0 BB499.2959 157.8945 m500.3799 158.7822 501.5117 159.6201 502.999 160.125 c505.6748 161.0391 506.3145 160.3398 507.793 158.2061 c508.6592 156.9473 511.0391 155.3428 512.5752 155.0811 c514.4619 154.7578 516.5234 155.3096 517.9082 156.6533 c518.5859 157.3145 519.0967 158.1211 519.459 158.9912 c519.6084 159.3535 519.8379 161.3369 520.0068 161.4609 C517.6338 159.7422 514.1992 158.584 511.334 159.8584 c509.1367 160.833 509.9063 163.3643 508.2461 164.8438 c504.2598 168.3965 498.6709 161.2344 495.7744 159.2627 c493.1279 157.457 490.1465 155.1895 486.8379 155.8516 c477.4502 157.7383 470.6357 161.1572 462.4072 165.916 c459.2852 167.7197 456.2881 169.4746 453.4287 171.707 c448.8105 175.3105 445.2334 180.3564 439.6807 182.626 c430.832 186.2441 422.9961 182.333 418.6445 174.3379 c414.1729 166.1201 411.3652 158.2207 400.5967 158.8516 c393.9395 159.1533 388.2939 161.6553 384.627 165.8848 c380.9951 170.1299 379.3281 175.9014 378.3809 182.043 c376.9854 191.3848 377.1426 200.5352 376.79 209.877 c376.4619 218.5098 375.8252 227.3359 369.5352 233.9053 c350.7305 253.5586 324.8027 231.0264 308.1973 220.1563 c303.4717 217.0625 293.4902 210.085 289.3271 217.4854 c285.9336 223.5186 288.9219 232.7627 290.0918 239.0088 c291.4453 246.2334 292.5391 254.2178 287.7979 260.5078 c281.9482 268.2656 271.1655 268.9385 262.4824 266.5557 c256.7026 264.9668 251.3496 262.2939 246.4141 258.9219 c228.5098 246.6885 216.0864 227.166 210.8467 206.3984 c208.7661 198.1523 206.77 190.0264 202.7715 182.8232 c199.1738 176.5879 187.8887 160.1182 178.6621 164.1836 c172.4155 166.9355 172.6514 177.0391 167.7139 181.377 c157.5947 190.2686 140.8228 179.0977 136.7529 168.7695 c133.4536 160.3984 130.689 148.627 119.2866 148.4551 c114.2378 148.3799 113.4014 150.9004 113.4043 155.3262 c113.4092 159.9082 112.7881 164.166 109.7969 167.8584 c105.5869 173.0469 99.0884 173.7441 92.8521 173.0996 c86.1821 172.4131 79.6299 172.0371 73.2021 169.8887 c69.1313 168.5273 65.188 166.7744 61.5498 164.5752 c60.6484 164.0166 59.7578 163.4395 58.9097 162.8174 c57.6602 161.8564 l57.5063 161.7344 l57.4282 161.6748 l56.7788 162.0469 58.7739 160.7568 55.9526 162.4932 c56.083 162.9004 l56.3496 163.7158 l56.9712 165.8945 58.1055 168.001 59.6738 169.6338 c66.0562 176.3857 75.3086 178.1113 83.6587 179.4131 c100.8184 181.209 117.6401 180.7998 133.6602 185.0518 c158.1284 190.6025 179.1626 205.2705 197.8491 221.6494 c216.6245 238.042 233.4307 256.8271 246.5181 278.0156 c260.0767 298.96 266.2729 323.7236 275.2363 346.7852 C279.8105 371.0352 278.8584 396.543 284.3438 421.0088 C281.1152 414.5332 280.1807 409.1289 278.002 408.2422 C276.957 397.458 275.4819 389.4414 274.377 369.1025 c273.8286 358.6445 273.2705 348.665 268.8369 338.1895 c264.2944 327.7617 260.7759 315.3018 256.5244 304.5664 c238.2964 259.7432 198.707 224.8193 174.895 207.8936 c159.4854 196.8672 142.6406 189.4248 124.8643 186.1807 c107.2764 182.1943 88.8027 184.7852 70.0894 178.6631 c63.542 176.2764 55.769 171.5225 53.8032 164.3555 c52.7915 160.6709 51.856 150.6689 58.3413 155.5918 c68.3247 163.1709 75.1846 170.375 88.4341 170.9355 c96.9937 171.5938 105.7065 167.5283 106.5806 158.6211 C107.54 154.584 106.0195 149.2686 109.8428 144.3701 C113.9312 140.4209 119.3369 139.3301 124.5576 140.6221 C134.2764 144.0967 137.7568 153.7676 141.3462 161.2725 c143.1704 165.1475 145.2363 168.8867 148.3345 171.5361 c151.2803 173.8848 155.7676 176.4512 158.9502 175.3779 C162.0313 173.8164 163.7759 169.0127 166.915 165.8652 c169.9014 162.4756 174.5176 160.124 179.2207 160.4375 c188.667 161.3545 195.5645 168.166 201.0098 174.8271 c212.6553 188.8154 212.8892 207.8252 220.6802 222.9844 c224.5605 230.5488 231.4556 236.3232 238.4922 241.292 c245.6587 246.1035 253.6294 250.2939 262.1606 251.5605 c300.5 258.0527 262.3613 199.1318 298.0469 202.4541 C309.8115 205.7666 319.3906 213.333 329.6689 219.6865 c334.5313 222.8604 340.6172 226.4639 347.0469 226.166 C353.1982 226.5059 360.543 225.376 365.3027 220.001 c373.9619 208.9346 372.4795 195.5645 374.7715 184.2246 C376.1885 172.7188 381.4834 161.1924 392.6934 158.1396 c398.0254 156.6348 403.9258 156.3584 409.4678 157.5371 c415.3184 158.7246 419.9561 160.8896 421.7422 167.1172 C423.1758 170.0127 425.377 172.7158 428.6592 174.2236 c432.1035 175.668 435.707 174.7373 438.6484 173.7383 c444.585 171.5107 450.0371 168.4756 455.6055 165.6172 c465.0029 160.832 474.8486 155.8809 485.0869 154.4561 c488.376 154.0332 492.9766 153.79 496.0078 155.457 c497.2412 156.1396 498.2451 157.0391 499.2959 157.8945 cBb1 (Unnamed gradient 109) 237.0117 293.1289 110.2997 282.9923 1 0 0 1 0 0 Bg-98.1789 265.4158 419.0667 155.0153 25.9116 215.042 Xm-2905.2869 7854.1221 419.0667 155.0153 2931.1982 -7639.0801 Bc-98.1789 265.4158 419.0667 155.0153 25.9116 215.042 Bm-2905.2869 7854.1221 419.0667 155.0153 -72.2671 480.458 Bcf0 BB331.6191 533.9072 m331.8848 533.458 332.5498 533.0205 332.957 532.6987 c333.4336 532.3237 333.9424 531.9956 334.4844 531.7266 c336.5566 530.6973 338.9473 530.5 341.2246 530.5737 c342.4258 530.6143 343.6348 530.7275 344.7998 531.0308 c346.4238 531.4541 347.9814 531.9648 348.9902 533.396 c349.8652 534.6348 350.4805 536.2949 350.3555 537.8262 c350.29 538.6313 350.0264 539.6333 349.5918 540.3257 c348.5713 541.9585 346.6904 542.3608 344.9971 541.4966 c343.8467 540.9077 341.9082 538.8828 343.6807 537.8325 c344.0996 537.583 344.8652 537.3604 345.3604 537.4863 c345.7295 537.5811 345.5166 537.5605 345.2598 537.6523 c344.8945 537.7808 344.3984 537.7959 344.1992 538.1924 c343.9688 538.646 344.3662 539.1812 344.6533 539.5059 c344.9307 539.8213 345.4512 540.3457 345.9189 540.3325 c346.2832 540.3232 346.3691 540.0537 346.5713 539.8013 c346.8359 539.4717 347.1084 539.3237 347.5313 539.269 c347.8809 539.2231 348.5156 539.3965 348.8213 539.2085 c349.4717 538.8071 348.0498 537.3804 347.7803 536.957 c347.4688 536.4609 347.0117 536.1582 346.6387 535.7246 c346.2813 535.3018 346.0127 534.9766 345.5049 534.6973 c343.6982 533.707 341.3809 533.9731 339.4463 534.3818 c337.6797 534.7559 336.5957 535.5459 335.6406 537.0693 c335.1602 537.8389 334.6602 538.6411 334.4072 539.5195 c334.1768 540.3159 334.3389 541.1016 334.3369 541.9136 c334.3369 543.7026 334.6318 545.5425 335.4424 547.1538 c335.7666 547.7974 336.2275 548.5317 336.9238 548.8091 c337.582 549.0728 338.373 549.1357 339.0645 549.2842 c340.7441 549.6455 342.3936 549.4756 343.9951 548.8418 c344.8789 548.4912 345.6855 547.9087 346.3457 547.2251 c348.8066 544.6079 352.1279 541.8604 352.7939 537.0596 C352.9688 534.6841 351.5908 532.0459 349.4111 530.9399 c347.3438 529.8428 345.1465 529.4063 342.8838 529.2119 c340.9502 529.0332 338.9238 529.2275 336.8691 529.6221 C335.2627 530.0596 333.5195 530.7734 332.1543 532.3555 C331.5049 532.9331 330.7266 534.1699 330.4473 535.7476 c330.3086 536.9932 330.3994 538.1504 330.6396 539.0703 c331.1289 540.9717 331.8447 542.5522 332.9648 544.0903 C333.7813 545.479 336.4395 547.8096 339.3652 547.832 c344.0859 547.7227 347.6289 545.9678 350.5566 541.0991 C347.5586 546.5806 344.4375 548.0884 338.9053 548.439 C335.6855 548.3462 333.0557 545.9829 332.0508 544.6392 c330.7686 543.1206 329.8975 541.5527 329.1641 539.5781 c328.7686 538.3789 328.4736 536.8662 328.8525 534.8975 c329.4941 532.3247 330.5186 531.6162 331.4404 530.5483 C333.4746 528.8486 335.7051 527.978 337.7139 527.731 c341.7539 527.1841 345.3486 527.4692 349.6533 528.8174 c352.916 529.791 356.8242 532.6987 357.4355 536.9082 c358.0273 542.3169 355.2119 546.104 352.2168 549.1846 c346.7559 554.937 337.3584 553.5815 333.6992 548.729 c329.9619 544.1216 329.5 537.4814 331.6191 533.9072 cBb1 (Unnamed gradient 66) 348.877 515.0654 104.309 43.3848 1 0 0 1 0 0 Bg-10.7226 42.0389 33.0592 8.43221 332.874 510.9834 Xm-2038.2484 7991.1401 33.0592 8.43221 2371.1221 -7480.1572 Bc-10.7226 42.0389 33.0592 8.43221 332.874 510.9834 Bm-2038.2484 7991.1401 33.0592 8.43221 322.1514 553.0225 Bcf0 BB291.4219 394.4219 m294.7686 388.6738 300.1787 385.7656 305.4941 383.5459 c310.459 381.6025 315.3086 379.8018 320.752 379.7939 c324.9287 379.8311 327.7344 382.6914 330.5654 384.7744 c333.4111 386.7686 336.7627 387.1865 339.4072 389.708 c340.5039 390.7725 341.6523 391.8506 342.5273 393.1162 c345.3477 397.0391 348.9404 399.9844 352.04 403.8506 c353.3936 405.5488 355.2441 407.4854 356.1035 409.5137 c353.3965 405.668 349.7588 402.3604 346.1738 399.6924 c341.9395 396.543 339.9756 390.3301 334.6006 388.998 c332.5752 388.6074 330.4648 389.2959 328.6689 389.0176 c326.4492 388.4492 324.2539 386.5596 322.1729 385.5723 c315.3965 381.7344 301.7881 383.8906 296.293 392.8389 c292.1299 398.9707 290.1104 407.5273 293.8721 414.292 c291.9619 414.5547 290.1348 415.584 288.293 416.2568 c289.1816 413.6279 288.4111 409.5537 288.6953 405.2314 c288.9434 400.9561 290.126 396.6387 291.4219 394.4219 CBb1 (Unnamed gradient 47) 347.8945 336.4736 110.2997 277.0143 1 0 0 1 0 0 Bg-96.1049 259.8091 65.977 24.4053 314.7803 324.2246 Xm-2848.3972 7700.3276 65.977 24.4053 3163.1777 -7376.1025 Bc-96.1049 259.8091 65.977 24.4053 314.7803 324.2246 Bm-2848.3972 7700.3276 65.977 24.4053 218.6753 584.0337 Bcf0 BB284.4316 228.7109 m281.7725 225.2227 279.1426 221.6904 276.5 218.1709 c271.8076 211.9258 267.3003 205.542 262.7998 199.1611 c255.1221 188.2754 248.1406 176.7051 239.8247 166.3086 c237.957 163.9736 235.7314 161.8066 234.5068 159.0557 c233.2866 156.3184 231.6548 153.7793 230.1724 151.1689 c228.2065 147.708 227.4365 144.4307 226.1899 140.6465 c224.3413 135.043 223.4502 127.6992 224.7695 121.7979 c226.0737 115.9629 232.543 123.2041 234.1055 125.0146 c237.3428 128.7656 240.604 133.1133 242.5654 137.6982 c245.7275 145.0889 247.6523 152.9209 251.4785 160.0381 c255.7363 167.9629 264.1294 173.4727 271.3096 178.5176 c278.4678 183.5449 285.9844 188.0283 292.7715 193.5664 c295.5996 195.8701 298.8105 198.166 301.2773 200.8623 c303.3623 203.1426 304.8213 205.4482 307.4531 207.3125 C304.3037 205.5029 297.4941 203.1289 293.9258 204.0596 C291.957 198.2324 286.7139 194.1377 281.7529 190.9014 c277.5566 188.1602 273.9546 184.6992 269.8613 181.8154 c264.0151 177.6943 255.2661 175.3232 251.3208 168.8145 c248.0195 163.3711 246.833 155.9766 244.7036 149.999 c242.1704 142.8936 239.0386 136.4922 233.4893 131.21 c230.5283 128.3926 225.877 127.1211 226.0117 132.5371 c226.1201 136.9766 227.7573 140.9678 229.1792 145.1084 c232.186 153.877 238.542 159.9102 243.6748 167.4414 c248.3154 174.25 253.0103 181.0234 257.7051 187.7979 c262.1187 194.1699 266.5898 200.501 271.1265 206.7842 c275.3823 212.6816 279.4121 219.9004 284.5996 224.9141 C284.2725 226.043 284.4053 227.4629 284.4316 228.7109 CBb1 (Unnamed gradient 109) 221.0498 286.2979 110.2997 271.7849 1 0 0 1 0 0 Bg-94.2907 254.9045 105.0598 38.8622 168.1694 266.7373 Xm-2877.2917 7778.4409 105.0598 38.8622 3045.4609 -7511.7041 Bc-94.2907 254.9045 105.0598 38.8622 168.1694 266.7373 Bm-2877.2917 7778.4409 105.0598 38.8622 73.8789 521.6416 Bcf0 BBu392.3633 306.2354 m394.8828 310.9414 397.7207 316.6934 398.8545 322.418 c400.0674 327.8584 401.0459 332.1191 402.6396 337.1904 c403.5225 340.1865 404.2949 343.209 404.8887 346.2744 c405.8955 351.4727 406.7051 357.3076 405.7227 362.5664 c405.0107 366.376 404.7021 370.8291 401.1367 373.1143 c399.6973 374.0342 398.1406 374.0078 397.3896 372.2539 c396.8994 371.1074 397.208 369.6367 397.1064 368.4141 c397.0068 367.2422 396.874 366.0459 396.7412 364.8662 c396.1934 359.9404 395.3115 355.0137 394.0557 350.1221 c391.5459 340.3564 387.4463 330.6113 380.8193 322.0684 c380.5889 321.7676 380.3467 321.4775 380.1084 321.1836 c378.1113 318.7168 375.9307 316.4297 373.5205 314.3633 c371.2139 312.3828 368.7363 310.5938 366.1104 309.0635 c363.5693 307.582 360.8711 306.3516 358.1182 305.3223 c355.4121 304.3125 352.6094 303.7451 349.7842 303.1748 c348.3662 302.8887 346.9111 302.5566 345.458 302.5566 c344.9297 302.5566 344.3975 302.6133 343.8936 302.7793 c343.7578 302.8271 342.7539 303.1963 342.7598 303.3496 c342.7871 304.1709 343.2051 305.1006 343.6973 305.749 c344.7412 307.124 345.5225 308.7334 346.5215 310.1631 c347.5654 311.6514 348.6934 313.0879 349.8496 314.4912 c354.5449 320.1953 360.5625 325.1016 366.9873 330.8252 c378.3945 340.6602 387.709 352.627 392.0518 366.1611 c396.5664 379.7002 389.4492 401.3496 383.3486 414.4268 C380.8193 414.1963 383.6992 408.9893 384.4004 404.7793 c386.8115 390.3096 392.7158 371.8936 386.8301 358.1641 c383.9258 351.292 379.4873 344.7441 373.6826 338.7432 c367.8857 332.6729 360.6113 327.5635 353.4023 321.0342 c349.4443 317.3613 346.0547 313.835 343.2432 309.9658 c341.9434 308.0264 340.6855 306.1455 339.3848 304.3945 c338.5713 303.2988 337.6699 302.0039 338.4111 300.6035 c338.7246 300.0156 339.8359 299.4189 340.4287 299.1709 c341.248 298.8301 342.1436 298.7773 343.0205 298.7871 c345.1143 298.8066 347.2236 298.8877 349.3164 298.9766 c353.748 299.167 358.3643 300.2461 362.5205 301.7715 c365.0928 302.7158 367.7129 303.8848 370.0605 305.3027 c383.3008 313.2881 392.3691 326.2051 397.4336 340.6328 c398.8193 344.582 399.4297 348.8477 400.8867 352.7432 C400.5156 351.7549 400.6465 350.0801 400.46 348.9795 c400.1738 347.2832 399.9258 345.5879 399.5703 343.8994 c398.8467 340.4766 397.9277 337.0996 397.0195 333.7227 c395.3926 327.9658 395.0771 321.3379 392.1367 314.6094 c389.7432 308.8398 386.4482 303.3691 384.6758 297.8652 C382.0547 291.7383 391.6748 296.3838 394.5264 300.3232 c396.293 302.7666 397.6201 305.6787 398.9043 308.3916 c401.293 313.4336 403.2754 318.6494 405.3525 323.8223 c405.8613 325.0957 406.377 326.3633 406.9092 327.6279 c407.415 328.8369 408.1182 330.0586 408.4961 331.3135 c409.1816 333.5781 409.8867 335.9414 411.6211 337.6797 C410.8066 332.6035 411.21 327.2861 411.5273 322.1826 c411.6221 320.6777 411.7871 319.1592 411.7969 317.6523 c411.8564 306.499 410.0234 294.5439 411.1318 282.4609 c412.6533 266.0918 417.4717 252.123 425.6787 237.2295 C434.8203 223.0947 441.0547 217.0186 453.8623 209.1533 c460.7559 205.3047 468.2051 202.6289 475.8154 200.6006 c478.5684 199.8672 481.5225 198.3652 484.207 197.8262 c485.4531 197.5752 487.3105 197.4844 488.5059 197.9805 c489.0615 198.2129 491.0693 200.3408 491.1895 200.3408 C481.7734 200.3262 473.6465 207.0518 465.0723 210.123 c455.2451 213.6416 445.876 218.5615 438.0684 225.6143 c424.4092 237.7256 419.2793 257.3203 416.7402 274.2969 c415.0303 286.4268 415.5352 298.9531 415.7334 311.9551 c415.7461 313.7393 415.6553 315.5225 415.5049 317.3027 c415.2432 320.3555 413.1221 338.9404 413.3193 340.9824 c413.376 341.5986 413.4541 342.9375 413.9248 343.3965 C412.8271 342.6738 411.9453 341.541 411.1807 340.4873 c409.4072 338.0371 408.1553 335.3984 406.9844 332.626 c404.8535 327.582 402.833 322.4902 400.6748 317.4521 c398.7373 312.9229 396.6826 308.4287 394.2441 304.1436 c393.6533 303.1064 392.9043 302.2256 392.0938 301.3555 c391.0166 300.1982 389.7939 299.4043 388.333 298.7949 C388.7803 299.6572 389.3799 300.4736 389.8438 301.3447 c390.1973 302.001 390.501 302.6846 390.8252 303.3535 c391.3057 304.3447 391.8418 305.2656 392.3633 306.2354 cBb1 (Unnamed gradient 109) 338.1357 306.0244 0 153.0537 1 0 0 1 0 0 Bg153.0537 0 0 -220.9424 338.1357 416.4268 Xm8249.6016 0 0 -220.9424 -7911.4658 416.4268 Bc153.0537 0 0 -220.9424 338.1357 416.4268 Bm8249.6016 0 0 -220.9424 491.1895 416.4268 Bcf0 BBUu334.833 561.1748 m333.9404 561.5791 333.5244 561.0771 333.2881 560.2837 c333.168 559.8809 332.6631 557.8379 333.2031 557.5571 c333.5586 557.3706 336.4395 559.832 336.2236 558.0791 c336.1758 557.6914 336.6475 557.5879 336.3711 557.3579 c335.7559 556.8442 335.0938 556.3467 334.625 555.7002 c333.7109 554.4424 334.1123 553.147 335.6553 552.6201 c337.2705 552.0688 338.876 552.5859 340.4492 552.9644 c341.5742 553.2354 341.8135 552.9097 342.3496 552.0171 c343.7764 549.6401 345.8262 550.2202 348.0137 551.4341 c350.6006 552.8682 348.7168 555.4854 347.4326 557.2661 c347.0146 557.8477 346.3926 558.3062 346.8389 558.9189 c347.3418 559.6074 348.1494 559.7559 348.2607 560.7583 c348.5518 563.3677 344.9814 562.3564 343.4873 562.3159 c341.3867 562.2578 341.3604 564.1758 339.9805 565.1855 c337.8535 566.7417 336.1914 564.4575 335.4092 562.8013 c334.833 561.1748 lBb1 (Unnamed gradient 5) 337.5918 566.7769 -68.1997 15.0516 1 0 0 1 0 0 Bg5.58974 -13.9751 -19.6863 -7.87408 347.7217 570.8286 Xm3063.2524 -7658.5649 -19.6863 -7.87408 -2715.5308 8229.3936 Bc5.58974 -13.9751 -19.6863 -7.87408 347.7217 570.8286 Bm3063.2524 -7658.5649 -19.6863 -7.87408 353.3115 556.8535 Bcf0 BB342.3545 564.7231 m342.002 565.2832 340.8379 566.3755 339.4238 566.4927 c337.9736 566.5557 336.8252 565.8345 336.2363 565.1045 c335.6924 564.4365 335.3311 563.7104 335.1367 563.2773 c335.1729 562.8252 334.668 563.4282 335.4512 562.5874 c335.4258 562.4463 335.4189 563.3555 335.2627 563.0518 c334.4014 562.9697 332.5527 563.0474 331.2803 562.0127 c329.8965 561.1177 329.4463 558.855 330.5889 557.6348 c331.7686 556.3188 332.6279 556.7026 332.4482 555.5708 c332.3457 554.4458 332.4316 553.2749 332.7207 552.1323 c333.0264 551.0703 333.5762 549.6943 335.0459 549.3608 c336.6299 548.9341 337.585 550.6172 338.0811 551.207 c338.2041 551.6304 341.3262 550.0376 342.1611 551.8096 c343.1855 553.0127 343.4678 554.5239 343.6074 555.9561 c344.1768 558.7998 342.498 561.3159 339.3418 560.2178 c338.1191 559.8896 336.9043 559.2793 336.4111 558.4868 c335.8174 557.8687 336.9199 555.5791 337.6572 555.6128 c338.5029 555.2969 339.8164 556.3154 339.6055 557.1094 c340.0664 557.0703 338.7871 556.3643 339.5146 556.8584 c339.0645 556.249 339.874 556.7554 339.3223 557.1035 c339.2832 556.458 338.2148 555.9961 337.9385 556.29 c337.8193 556.4082 337.5566 556.4277 337.209 557.3208 c337.126 557.8335 336.6934 557.5908 337.2959 558.3135 c338.4658 559.3574 341.4023 560.2764 342.0889 559.0781 c342.5469 558.3291 341.8398 557.4233 341.459 556.291 c341.1641 555.627 340.9502 554.665 340.6387 554.1602 c340.1211 553.7383 341.2373 553.436 340.0205 553.5869 c339.8867 553.603 339.4766 553.7271 339.0693 553.8218 c338.3926 554.0718 337.0713 553.75 336.5693 553.1621 c335.7529 552.2471 335.8145 551.9385 335.582 551.6089 c335.335 551.1714 335.6494 551.0234 335.001 551.2544 c333.5977 552.1182 333.7256 554.3477 333.0391 556.8247 c332.0693 557.7153 330.9072 557.8315 330.7451 559.1592 c330.5293 560.3467 331.5664 561.4717 332.708 561.7813 c333.7842 562.1768 335.2959 561.8374 335.7598 562.0771 c336.2207 562.5195 336.6768 563.8638 337.7402 564.5591 c339.9033 566.1802 341.5146 562.9746 341.9844 562.6455 c342.7236 562.2466 344.9033 564.3608 346.6201 562.5029 c347.2412 561.4067 346.3281 560.4277 346.0166 559.9326 c345.6719 559.3867 345.9912 558.8887 346.5146 558.3037 c346.9492 557.8301 347.9883 556.9316 347.335 555.8794 c346.6377 555.0889 345.7529 555.1172 345.002 554.9263 c345.6338 554.166 345.6553 553.1714 345.9434 552.2935 c346.252 552.6099 346.707 552.8481 347.5166 553.3726 c348.209 553.3726 350.2354 556.1411 349.0957 557.7471 c348.3984 558.9976 347.4297 559.5801 347.4014 559.6929 c347.4697 559.96 346.6123 559.1885 346.7607 559.4346 c347.9814 559.0469 347.0186 559.2441 347.5732 559.5654 c348.1006 559.98 349.2354 562.9209 346.8115 564.4253 c344.9678 565.1133 343.876 564.668 343.085 564.4937 c342.7148 564.4106 342.1777 564.189 342.1377 564.2148 C342.082 564.2002 l342.043 564.4365 342.1221 563.7622 342.1514 563.5708 C342.2021 563.459 l342.3096 563.4331 342.0967 562.791 342.2158 563.2031 c343.2236 564.2051 342.7422 564.0913 342.3545 564.7231 CBb1 (Unnamed gradient 109) 343.5156 551.147 116.4313 20.2698 1 0 0 1 0 0 Bg-9.02262 18.151 21.4104 10.6428 333.1758 546.0068 Xm-3674.3347 7391.7441 21.4104 10.6428 4007.5107 -6845.7373 Bc-9.02262 18.151 21.4104 10.6428 333.1758 546.0068 Bm-3674.3347 7391.7441 21.4104 10.6428 324.1533 564.1577 Bcf0 BBUUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF