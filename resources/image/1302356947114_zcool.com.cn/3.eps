%!PS-Adobe-3.0 %%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 13.0.1%%For: (marina) ()%%Title: (11-35.eps)%%CreationDate: 2/6/11 3:57 PM%%BoundingBox: 34 77 522 724%%HiResBoundingBox: 34.4902 77.6143 521.4766 723.8223%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%RGBProcessColor: 0 0 0 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 283.5 424.8936 283.5 424.8936%AI3_TileBox: -22.5356 29.1963 589.4648 821.1968%AI3_DocumentPreview: None%AI5_ArtSize: 566.9291 850.3937%AI5_RulerUnits: 4%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -500 942.3936 1 1829 1029 18 0 0 50 75 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 96 128 8%%BeginData: 14958 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD04F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827FD15F87DFFFD0DF805F8F8F827F8F8%F827F8F8F827F800F827F827F827F827F827F827F827F827F827F800F827%F8F8F827F8F8F827F8F8F827FD20F852FFF8F827F8F8F827F8F8F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F8F8F827FD17%F87DFFFD13F827F8F8F827F800F827F805F827F827F827F827F827F827F8%27F827F827F800F827F8F8F827F8F8F800FD22F852FFF8F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F8270027F8%270027F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827FD13F87DFFFD0BF827F8F8F827F8F8F827F800F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F800F827%F8F8F827F8F8F827FD1EF852FF27F8F8F827F8F8F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F8270027F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F8F8F827FD15F87D%FFFD0DF800F8F8F827F8F8F827F805F827F827F827F827F827F827F827F8%05F805F827F827F827F827F827F827F800F827F8F8F805FD20F852FF27F8%27F827F827F827F827F827F827F827F827F827F827F827F827F8270527F8%272727F8272193696F456F20272727F8270027F827F827F827F827F827F8%27F827F827F827F827F827F827F827FD11F87DFFFD09F827F8F8F827F8F8%F827F827F827F827F827F827F827F827F827F827F8274469686F8D4B2105%F827F827F827F827F827F827F8F8F827F8F8F827FD1CF852FFF8F827F8F8%F827F827F827F827F827F827F827F827F827F827F8270027F8270527F827%2727F8270505F8938D9C4B27F827F827F827F827F827F827F827F827F827%F827F827F827F8F8F827FD13F87DFFFD0BF800F8F8F827F8F8F827F827F8%27F827F827F827F827F827F827F827F827F80520B069B87027F827F827F8%27F827F800F827F8F8F805FD1EF852FF27F827F827F827F827F827F827F8%27F827F827F827F8270027F8272727F82727270027272705272727002745%B08D957127F8270527F827F827F827F827F827F827F827F827F827F827F8%27F821F827FD0FF87DFFFD07F827F8F8F827F8F8F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827218D8D707027F827F827%F827F827F827F8F8F827F8F8F827FD1AF852FF27F8F8F827F827F827F827%F827F827F827F827F827F827F8270027F8272727F8272727002727270027%2727F82704B1694C2727F827F827F827F827F827F827F827F827F827F827%F827F8F8F827FD11F87DFFFD09F800F8F8F827F8F8F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827054BB0454B27F827F827F8%27F827F800F827F8F8F805FD1CF852FF27F827F827F827F827F827F827F8%27F827F827F8270027F827272700FD0F27052E776F05712727F8270527F8%27F827F827F827F827F827F827F827F827F827F827F8F8F827FD0DF87DFF%FD05F805F8F8F827F8F8F827F827F827F827F827F827F827F827F827F827%F8270027F8270027F82704454C360D712127F827F827F827F827F827F827%F8F8F827F8F8F827FD18F852FFF8F827F827F827F827F827F827F827F827%F827F827F8270527F82727270027272705FD0727056FB0300D362F27F827%2727F827F827F827F827F827F827F827F827F827F827F827F8F8F827FD0F%F87DFFFD0BF827F8F8F827F827F827F827F827F827F827F827F827F827F8%27F827F827F8698D4BF84B4C06F827F827F827F827F827F827F800F827F8%F8F800FD1AF852FF27F827F827F827F827F827F827F827F827F8270027F8%27272700FD0B2705274B938D27054C7027262705272727F8270527F827F8%27F827F827F827F827F827F827F827F827F827FD0FF87DFFFD07F827F8F8%F827F800F827F827F827F827F827F827F827F827F8270027F827274B688D%4505F84C7027F827F827F827F827F827F827F827F827F827F8F8F827F8F8%F805FD16F852FF27F805F827F827F827F827F827F827F827F827F8270027%F8272727002727270527274B6993694B052727764C27002700272727F827%0527F827F827F827F827F827F827F827F827F827F8F8F827F8F8F800FD0D%F87DFFFD09F827F8F8F827F805F827F827F827F827F827F827F827204544%6F444B21FD04274C4B514A752605F827F827F827F827F827F827F827F8F8%F827FD1CF852FF27F827F827F827F827F827F827F827F827F827F8272727%00272727054B696F4B4C272E275227524C70759F4B75759F512727270027%2727F8270027F827F827F827F827F827F827F827F827F827F805F827FD0D%F87DFFFD05F827F8F8F827F8F8F827F827F827F827F827F827F827F82744%27272E272D2727274C4C284AC12705F827269F4A27F827F827F827F827F8%27F827F800F827F8F8F827FD18F852FFF8F827F827F827F827F827F827F8%27F827F8270027F8272727F827216F275227274C764C4C272705519E2727%270551759FF8272727F8270027F827F827F827F827F827F827F827F827F8%27F8F8F827FD0FF87DFFFD0BF827F800F827F827F827F827F827F827F827%4427F827F84B70270427002700C14A270027F8519827F827F827F827F827%F827F800F827F8F8F805FD1AF852FF27F827F827F827F827F827F827F827%F827F8270527F82727270527054B6927272705764CFD0427759F51FD0427%519F4B27272700272727F827F827F827F827F827F827F827F827F827F827%F827FD0FF87DFFFD07F827F8F8F827F800F827F827F827F827F827F827F8%27056F20272727009A27270051742700270527F8759E51F827F827F805F8%00F827F827F827F8F8F827F8F8F805FD16F852FF27F805F827F827F827F8%27F827F827F827F827F8270027F827272700272793FD05279A2727274B4B%FD0527509F7527F82700274A512605F827F827F827F827F827F827F827F8%00F827FD11F87DFFFD09F827F8F8F827F805F827F827F827F827F827F827%F827446FF82700274B9A2727264B0027F8272651749FF8054A9FC0C7C0C1%4A00F827F8F8F827FD1CF852FF27F827F827F827F827F827F827F827F827%F827F827272700FD0727694CFD0427759A05276F2705270575269FC75175%C7C7C7C1C7C7C72627F827F827F827F827F827F827F827F827F800F827FD%0DF87DFFFD05F827F8F8F827F8F8F827F827F827F827F827F827F827F827%F827052769270027F8277575F84B6E27F80550274AC7C1C7C09F4A4B2699%C151F827F8F8F827F8F8F827FD18F852FFF8F827F827F827F827F827F827%F827F827F827F827F8270527F82727270027056F4B2E2727052799510051%6F4B4AC127054A9F7551F82700004AC74B05F827F827F827F827F827F827%F827F8F8F827FD0FF87DFFFD0BF827F8F8F827F827F827F827F827F827F8%27F827F82720692727F827F84B7527F8274A6F4A994A75749F7427F80026%C17427F800F827F8F8F800FD1AF852FF27F827F827F827F827F827F827F8%27F827F8270027F827272700FD0727456FFD042705754B27272700274B75%757599C775054BC17527F827F827F827F827F827F827F827F827F827F827%FD0FF87DFFFD07F827F8F8F827F8F8F827F827F827F827F827F827F827F8%27F827F82768272727F8270551F827F827F869F80020C1C127F8C14B00F8%27F800F827F8F8F827FD1AF852FF27F8F8F827F827F827F827F827F827F8%27F827F827F827F8270527F8272727F827054B452E272705272D27F82705%278C27009FC1C275759975F805F827F827F827F827F827F827F827F8F8F8%27FD11F87DFFFD0DF827F8F8F827F827F827F827F827F827F827F827F827%F8692127F827052E5127F827F8B0200575C26F75994B6F994A26F800F8F8%F800FD1CF852FF27F827F827F827F827F827F827F827F827F827F8270027%F8272727F82727270027272745932727F82F0C594A270527689305272105%279AF8059A9A4A752605F827F827F827F827F827F827F827F8F8F827FD0D%F87DFFFD09F827F8F8F827F800F827F827F827F827F827F827F827F827F8%27F805684B2727052F0D2E4A27F86FFC69F805209A9A766F9AF8F820754A%26F827F8F8F800FD18F852FFF8F827F800F827F827F827F827F827F827F8%27F827F827F827F8270027F8272727F827054B8C5227270D2E133551512E%70B09327764BBD704BF827F805F84B4A4BF827F827F827F8F8F827FD13F8%7DFFFD0BF800F8F8F827F8F8F827F827F827F827F827F827F827F827F827%F88D442EF80C052E0C0C05060D4B8CB64BF8704CF827F827F8F8F827264A%FD1CF852FF27F827F827F827F827F827F827F827F827F827F827F827F827%F8270527F8272727F827272745B52727052F0528052E0D2FF8278DBDF805%27712705F827F827F80520752600F827F827F827F8F8F827FD0FF87DFFFD%0BF827F8F8F827F8F8F827F827F827F827F827F827F827F827F827F8278C%6F2727052805280628F827F827B19570954545444B2021F804F8F8F84B4A%FD19F852FF27F8F8F827F805F827F827F827F827F827F827F827F827F827%F827F827F827F8270027F827056FB052272700280527F827F827F88D6928%F805F827204B454B4527F804F84B4AF8F827F8F8F827FD11F87DFFFD0DF8%00F8F8F827F8F8F827F805F827F827F827F827F827F827F80520B06927F8%27F8052027F805F8458D27F8F8F805F8F8F804F821214BF8F8F82626FD17%F852FF27F827F827F827F827F827F827F827F827F827F827F827F827F827%F8270027F8270027F827054B8DB08D27F827454C2027218DB06FF827F827%F827F827F827F80520702027F84BF827F8F8F827FD11F87DFFFD0DF827F8%F8F827F8F8F827F827F827F827F827F827F827F827F82720692094696945%4BF80520B08D45F827F8F8F827F8F8F805F821F8274545F8F82626FD16F8%52FFF8F827F8F8F827F800F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F8278D2727272027F827F869B027F827F827F827F8%27F827204B454B2027F8F8F84BF8F8F827FD13F87DFFFD13F827F8F8F827%F800F827F805F827F827F827F827F88D2027F805F805F8058C69F827F8F8%F827F8F820452021FD07F82620FD17F852FFF8F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F8278D2727%27F827F827F88D6827F827F827F827204BF805F827F827F805204B2605F8%F8F827FD13F87DFFFD0FF827F8F8F827F8F8F827F8F8F827F800F827F827%F827F805208DF82EF827F827F805688DF827F8F8F84520F8F805FD05F826%264B20FD19F852FFFD04F827F8F8F827F8F8F827F827F827F827F827F827%F827F827F827F827F827F827F827F86F68272727F827F827F84B8D27F827%F8452005F800F827264B264B2627F800F8F8F827FD15F87DFFFD15F800F8%F8F827F8F8F827F8F8F827F8F8F8058C450552F8F8F827F8F8F8B020F8F8%4520F8F82726262026FD20F852FFFD04F827F800F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F80520B027522727F827F827%F8058D6FF84B44054A512627F827F827F827F827F827F8F8F827FD15F87D%FFFD11F805F8F8F827F8F8F827F8F8F827F8F8F827F804F8B0692D2727F8%F8F827F8F8F8458D202000264AF800FD24F852FFFD06F827F8F8F827F8F8%F827F827F827F827F827F827F827F827F805F805F82744B08D522752F827%F827F827F827F88D44212051F827F827F805F827F8F8F827FD1BF87DFFFD%1BF800F8F82069688D8CB06927274BF8F8F827F8F8F800F8F84469F84AFD%28F852FFFD06F827F8F8F827F827F827F827F827F827F827F827F827F84B%8CB0B0936F704B522752F827F827F827F827F827F82769274A27F827F827%F827F827F827F827F8F8F827FD17F87DFFFD17F805F8F8F869FC8C445127%2E27752727F800F8452005F8F8F827F8F8F8692075FD28F852FFFD0CF827%F8F8F827F8F8F827F827F827F845FC8D2752515227527527F827F8272127%F827F827F827F82769277427F827F8F8F827F8F8F827FD1DF87DFFFD19F8%20FC8CF82E4B512727F875FD0DF826F88DF8264A26FD26F852FFFD08F800%F8F8F827F827F827F827F827F827F80568B0205227524B27F8004A27F827%F827F827F827F827F87B26456927264B4A75F827F827F8F8F827FD1DF87D%FFFD19F8B0680575750026F800F8264AFD04F805FD05F87598F8684AF820%F8F82626FD24F852FFFD0EF827F8F8F827F8F8F827F845FC4B279F740026%27F827F8512600F805F827F800F875C127208DF8F8F827F8F8F827FD23F8%7DFFFD18F844FC202E517BF8F82626F8F8F84A2626F8F8F82026747475F8%8D20FD2BF852FFFD0EF827F8F8F827F827F827F869FC4B27767451F8274A%27F800F8274A4B264B5075749FF8696805F827F827F800F827F8F8F827FD%1FF87DFFFD18F844FC202E4B4A4AF8F8F8264BF826F826204A2627749FF8%208CFD2DF852FFFD14F827F8F8F845FC4B275226514A00F8F8F84B264B26%27F84B9E9FF8F88C4BF8F8F827F8F8F800FD25F87DFFFD18F820B0442D27%2720504AFD07F8269F9E75F8F84468FD2EF852FFFD14F827F8F8F827FC8D%2752F84BF8759975264B4A759F9F744BF82720B0F805F8F8F827F8F8F827%FD25F87DFFFD19F88DFC272727F84AF827747574994A4A4A4BF850266944%FD2FF852FFFD19F844B06F2E27F8F8512627F826F84B4A27F82774208C21%FD2FF87DFFFD1AF88C8D2727F8F8F8264A4B264A20F8F8F84A50448CFD30%F852FFFD1AF869FC6F2727F8F8F800F8F8F800F8F8F89FF88D44FD30F87D%FFFD1BF8B08C52F8F820FD08F84A50F88C20FD30F852FFFD1BF868B06F27%F820FD08F8744AF8B020FD30F87DFFFD1BF820FCB027F8F844FD07F89FF8%F88C20FD30F852FFFD1CF869FC6F05F844FD06F87574F8F8B020FD30F87D%FFFD1DF8B0FC4BF84420FD05F87426F8F86868FD30F852FFFD1DF844B093%05F869FD04F8209FF8F8F8688CFD30F87DFFFD1EF88CB021F84420F8F8F8%4A74FD04F8B020FD2FF852FFFD1EF845B093F84544F8F8F85051FD04F868%B0FD2FF87DFFFD1FF88DFC4BF88DF8F8F87526FD05F88C8DFD2EF852FFFD%1FF820B08D054469F8F8504BFD05F820FCB020FD2CF87DFFFD20F88CB020%F88C20F85020FD06F8208CB044FD2BF852FFFD20F869B06FF88D68F84A4B%FD08F868B0B069FD29F87DFFFD21F8B08D2720B0F82626FD09F82069B0B1%4520FD26F852FFFD21F88CB027056869F851FD05F826FD05F82069B1B169%FD25F87DFFFD21F868FC4B0544682026FD06F826F826FD05F869B1B120FD%23F852FFFD21F820B0442D2169442626FD07F8204B20FD04F8218EB721FD%22F87DFFFD22F88C8DF82744452050FD09F84A26FD05F869B720FD21F852%FFFD22F88DB021276F20692651FD09F84B4AFD05F88EB7FD21F87DFFFD22%F844B020054B6920212626FD09F8264AFD04F820B16AFD20F852FFFD22F8%45B069F84B8D4B45F85027FD09F8267427F8F8F870B221FD1FF87DFFFD23%F8B068F8056F692020F84A26FD09F82650FD04F8B745FD1FF852FFFD23F8%8DB0F827278EF84BF8F84A26FD09F84A50F8F8F86A94FD1FF87DFFFD23F8%69B020F8274569F845F8F84A26FD09F85026F8F8458EFD1FF852FFFD23F8%44B020F827278EF82021F827504BFD09F87520F820B720FD1EF87DFFFD23%F844B044F827F86920F845F8F8F84A4AFD09F875F8F88E21FD1EF852FFFD%23F820B044F8F8272170F84B21F8F8F82651FD08F82651F8B721FD1EF87D%FFFD23F820FC69F8F8F82169F8F869FD05F85020FD07F84AF88E45FD1EF8%52FFFD23F820B068F8F827F870F8F8456FFD05F8514A26FD05F8274A9445%FD1EF87DFFFD23F820FC69F8F8F8054520F8F869FD06F8264A26FD05F84A%946AFD1EF852FFFD23F820B044F8F827F84520F8F87045FD07F84A51FD05%F89A6AFD1EF87DFFFD23F844B020F8F8F8272021F8F8F894FD08F8204AFD%04F82094FD1EF852FFFD23F868B020F8F827272721F8F8F8694BFD09F851%4AF8F8F84A26FD1DF87DFFFD23F8B08CFD04F827F845F8F8F82145FD0AF8%264A20F8262606FD1CF852FFFD22F820B069FD04F8272121FD04F870FD0B%F8264A26F82D0DFD1CF87DFFFD22F868B0FD05F827F821FD04F820FD0DF8%4AF80C2DFD1CF852FFFD21F820B068FD05F8272121FD04F84BFD0DF82D35%132051FD1BF87DFFFD21F8B0FCFD06F827F821FD04F82020FD0DF82E05F8%2650FD1AF852FFFD20F88DB045FD06F827F820FD04F845FD0EF8206FF8F8%4A7520FD18F87DFFFD1FF88DFC44FD07F805F821FD04F820FD0FF86E26F8%F820744A4AFD16F852FFFD1DF820B0B045FD07F84B45696920F8F8F84BFD%07F82021706921F8F8F84BBB26F8F8F82750754A27FD13F87DFFFD1BF820%68B0FC44FD06F8448DFD04B08D20F8F821FD06F8458EB1B1B7B121F8F8F8%949950FD05F8264A26FD12F852FFFD17F82069688D8C8D44FD05F820698D%B0B093442044B169F8F84BFD05F894B1B6696945B6B1F8F8F820944A7526%FD05F8264BFD11F87DFFFD18F844B0FC8C44442044448D8CB0FC8D4427FD%04F8B045F821FD04F820B1B169FD05F8696920F8F8216AF84A4A4AFD05F8%4AFD10F852FFFD1AF845688D6869686968452027F80404F8F8F86993F821%20F8F8218DB68D21FD07F84B8E70454B69954527269F9F752627264BFD0F%F87DFFFD29F8698D69F8202020448DB08D20FD0BF845704545454BF8F8F8%26749F9E9F9E4AFD0EF852FFFD24F827FD04F844B06969FD048D6921FD19%F826265120FD0EF87DFFFD23F827FD07F8452020FD30F852FFFD22F827FD%3BF87DFFFD5EF852FFFD5EF87DFFFD5EF852FF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI5_End_NonPrinting--6 Bn%AI5_BeginGradient: (Unnamed gradient 109)(Unnamed gradient 109) 0 2 Bd[<0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001><FDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFCFCFBFBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F8F8F8F8F8F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F6F6F6F6F5F5F5F5F5F5F5F5F5F4F4F4F4F4F4F3F3F3F3F3F2F2F2F2F1F1F1F1F0F0F0EFEFEFEFEEEEEEEEEDEDEDEDECECECEBEBEBEBEAEAEAEAEAE9E9E9E8E8E8E7E7E7E7E7E7E7E6E6E5E4E4E4E3E2E2E1E0E0DFDEDEDDDD><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFDFCFBFAF9F8F6F5F3F2F0EFEEECEBEAE9E7E6E5E4E2E1DFDEDCDAD8D6D4D2D0CECCC9C8C6C4C3C1BFBEBCBAB8B7B5B3B1AFADABA9A7A5A2A09E9C9A98969492908D8B89868482807E7B797774716F6D6B69676563615E5C5A585554514F4D4A474543413F3D3B39373432302E2C2A27252321201D1B1A171513110F0E0C0A090705040201000000000000000000000000000000000000000000>01<0000010101020202030303040404050505060606070707070808080909090A0A0A0B0B0B0C0C0C0D0D0D0E0E0E0F0F0F101010111111121212131313141414151515151616161717171818181919191A1A1A1B1B1B1C1C1C1D1D1D1E1E1E1F1F1F202020212121222222232323232424242525252626262727272828282929292A2A2A2B2B2B2C2C2C2D2D2D2E2E2E2F2F2F303030313131313232323333333434343535353636363737373838><000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABAC>4 %_Br[0.003922 0.866667 0 0 1 0.219608 0.67451 2 50 100 %_BS%_0.003922 0.866667 0 0 1 0.219608 0.67451 2 50 100 Bs0 0.992157 1 0 1 0 0 2 50 0 %_BS%_0 0.992157 1 0 1 0 0 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 13)(Unnamed gradient 13) 1 2 Bd[<B5B5B6B6B7B7B6B7B7B7B8B8B9B9B9BABAB9B9BABABBBBBBBCBCBCBDBBBCBCBDBDBDBCBCBDBDBDBEBCBCBCBDBDBDBDBDBDBEBEBDBDBDBDBDBEBEBEBEBEBFBEBEBFBFBFBF><A1A1A2A2A3A3A4A5A5A3A4A4A5A5A6A6A7A8A8A9A9A9AAAAABABA9A9AAABABABACACABABABACACACADADABABACACACACACACACADADADADADADADADACACACADADADADADAD><8F8F909090919192929495959596969797979898989999999A9A9D9D9D9D9E9E9E9FA1A1A2A2A2A2A3A3A5A5A5A5A6A6A6A6A7A7A7A7A7A8A8A8A8A9AAAAAAAAAAABABAB><7376787A7C7E80828486888B8D8F919396989A9C9EA1A3A5A7A9ABADAFB1B3B5B7B9BCBEC0C2C4C5C6C8C9CACBCCCDCFD0D2D3D4D6D7D8D9DADBDCDDDEDFE0E2E3E4E5E6><3D3C3B3A39383837363534333231302F2E2E2D2C2B2A29282726252424232221201F1E1D1C1B1A19191817161514131211100F0F0E0D0C0B0A0908070605050403020100><3F3E3D3C3B3A39383737363534333231302F2E2D2C2B2A29282727262524232221201F1E1D1C1B1A19181817161514131211100F0E0D0C0B0A0908080706050403020100><44434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A2928272625242321201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>4 %_Br[0.709804 0.631373 0.560784 0.45098 0.239216 0.247059 0.266667 2 50 0 %_BS%_0.709804 0.631373 0.560784 0.45098 0.239216 0.247059 0.266667 2 50 0 Bs0.74902 0.678431 0.670588 0.901961 0 0 0 2 50 100 %_BS%_0.74902 0.678431 0.670588 0.901961 0 0 0 2 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 47)(Unnamed gradient 47) 0 2 Bd[0<C4C3C2C1C0BEBDBCBBBAB9B7B6B5B3B2B1B0AEAEADACABAAA9A8A6A5A4A2A2A19F9E9D9B9998989695939290908F8E8C8B8A8A8887868684838180807E7D7B7B7A797977767575737272706F6F6D6C6C6B6A6A6867676565646262616160605E5D5D5C5C5A5A5959575756565555535353525251514F4F4F4E4E4E4D4D4D4B4B4B4A4A4A4A48484848484747474747>101<606162636465666768696A6B6C6D6E6F70717272737475767778797A7B7C7C7D7E7F8081828383848586878888898A8B8C8D8D8E8F90909192939494959697979899999A9B9C9C9D9E9E9FA0A0A1A2A2A3A4A4A5A6A6A7A7A8A9A9AAAAABABACADADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B4B5B5B6B6B7B7B7B8B8B8B9B9B9BABABABBBBBBBBBCBCBCBCBCBDBDBDBDBD>04 %_Br[0 0.278431 1 0 1 0.741176 0 2 50.0844 100 %_BS%_0 0.278431 1 0 1 0.741176 0 2 50.0844 100 Bs0 0.768627 1 0 1 0.376471 0 2 36.2637 0 %_BS%_0 0.768627 1 0 1 0.376471 0 2 36.2637 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 6)(Unnamed gradient 6) 0 2 Bd[<9D9D9D9D9D9D9D9D9D9D9D9D9D9E9E9E9E9E9E9E9E9E9E9F9F9F9F9F9F9FA0A0A0A0A0A0A1A1A1A2A2A2A2A2A3A3A3A3A3A4A4A4A5A5A5A5A6A6A6A7A7A8A8A8A8A9A9AAAAABABABABACACACACADADADAEAEAFAFAFAFB0B1B1B1B1B2B2B3B4B4B4B5B5B5B5B6B6B6B7B7B7B8B8B8B9B9B9B9BABABABABABBBBBBBCBCBDBDBDBEBEBEBEBFBFBFBFC0C0C0C1C1C1C2C2C2C2C2C3C3C3C3C3C4C4C5C6C6C6C7C7C7C8C8C8C8C9C9C9C9CACACBCBCCCCCDCDCDCDCECECECFD0D0D0D0D1D1D1D2D2D3D3D4D4D4D5D5D5D5D6D6D7D7D7D8D8D9D9D9DADADADADBDBDB><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020203040405070709090B0C0C0E1010121313151717191B1B1D1E1E20222224262828292B2B2D2F313133353737383A3C3C3D3F4143434547494B4B4D4F51545456585A5C5E5E6062646668686A6C6E707274767677797B7C7E808183838586888A8B8D8E90919394969898999B9C9D9E9FA1A2A3A4A6A7A8A9AAABACAD><3C3C3C3C3C3C3C3C3C3C3C3C3C3B3B3B3B3B3B3B3B3B3B3A3A3A3939393939393938383837373736363635353434343333333333323231313030302F2F2F2F2E2E2D2D2C2C2B2B2A2A292928282727262525232322222120201F1F1F1F1E1D1D1C1C1C1B1B1A19191817171514141312121110100F0E0E0D0B0B0A09080806050505040303020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>00<DFDFDFDFDFDFDFDEDEDEDEDEDEDDDDDDDDDDDCDCDCDCDCDBDBDBDADADADAD9D9D9D8D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D2D2D2D1D1D0D0CFCFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0BFBFBEBEBDBDBCBBBBBAB9B9B8B8B7B6B6B5B4B4B3B2B2B1B0B0AFAEAEADACACABAAAAA9A8A7A7A6A5A5A4A3A2A2A1A09F9F9E9D9C9C9B9A999898979695949493929190908F8E8D8C8B8B8A89888786868584838281807F7F7E7D7C7B7A79787777767574737271706F6E6D6C6B6A6A696867666564636261605F5E5D5C5B5A5958><DBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADAD9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9>4 %_Br[0.858823 0.678431 0 0 0 0.345098 0.85098 2 50 100 %_BS%_0.858823 0.678431 0 0 0 0.345098 0.85098 2 50 100 Bs0.615686 0 0.235294 0 0 0.87451 0.858824 2 64.8352 0 %_BS%_0.615686 0 0.235294 0 0 0.87451 0.858824 2 64.8352 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 66)(Unnamed gradient 66) 0 2 Bd[<1B1A191817161514131211100F0E0D0D0B0B0A090807060504030202010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><B4B5B4B4B4B4B4B4B5B4B5B4B5B4B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B6B5B6B6B6B6B6B6B5B6B6B5B5B4B4B4B2B2B1B1B1B0B0AFAFAFAEAEADACACABABABA9A9A8A8A8A6A6A5A5A5A4A4A4A3A3A2A2A2A0A0A09F9F9D9D9D9C9C9C9A9A9A989897979695959593939392929290908F8F8F8E8E8E8C8C8C8B8B8B8989898888888686868585858383838282828180807F7F7F7F7D7D7D7B7B7B7A7A7A78787878777777757575747474747272727170706F6F6F6F6D6D6D6D6C6C6C6A6A6A6A6969696968686866666666656565656363636362626262616160605F5F5F5F5E5D5D5D5C5C5C5C5C5B5B5B5B5959595959585858585856565656565555555555545454545452525252525151515151515050505050504E4E4E4E4E4E4D4D4D4D4D4D4D4C4C4C4C4C4C4B4B4A4A4A4A4A4A4A4A4A4848484848484848484848474747474747474747474747><000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101030507090A0C0E11131417191A1C1E212325282A2D2D2F313336383A3C3E3E414346484A4D4D4F515356585A5B5C5E61626465676A6C6E7070727476787B7B7D7F8183838487898B8C8E8F929494969799999B9D9FA0A0A2A4A5A6A7A9ABABACAFB0B0B2B4B4B5B7B8B8B9BABBBBBCBEBEBFC1C2C3C4C6C6C7C8C8C9CBCBCCCDCDCED0D0D1D2D2D4D5D5D6D7D7D8D9D9DADBDBDCDCDEDFE0E1E2E3E4E4E5E6E6E7E7E8E9E9EAEAEBEBECEDEDEEEEEFEFF0F0F0F1F1F2F2F3F3F4F4F4F4F5F5F6F6F6F6F7F7F8F8F9F9F9F9FAFAFBFBFBFBFCFCFCFCFCFDFDFDFDFEFEFEFEFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>01<60606161626263636364646565666666676768686969696A6A6B6B6B6C6C6D6D6E6E6E6F6F70707071717272727373747474757576767677777878787979797A7A7B7B7B7C7C7D7D7D7E7E7E7F7F808080818181828283838384848485858586868787878888888989898A8A8A8B8B8C8C8C8D8D8D8E8E8E8F8F8F909090919191929292939393949494959595969696979797979898989999999A9A9A9B9B9B9B9C9C9C9D9D9D9E9E9E9E9F9F9FA0A0A0A1A1A1A1A2A2A2A2A3A3A3A4A4A4A4A5A5A5A5A6A6A6A7A7A7A7A8A8A8A8A9A9A9A9AAAAAAAAABABABABACACACACADADADADAEAEAEAEAEAFAFAFAFB0B0B0B0B0B1B1B1B1B1B2B2B2B2B2B3B3B3B3B3B4B4B4B4B4B5B5B5B5B5B6B6B6B6B6B6B7B7B7B7B7B7B8B8B8B8B8B8B9B9B9B9B9B9B9BABABABABABABABABBBBBBBBBBBBBBBBBBBCBCBCBCBCBCBCBCBCBCBCBDBDBDBDBDBDBDBDBDBDBDBD><D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADADACABAAA9A8A7A6A5A4A3A2A1A1A09F9E9D9C9B9A9999989796959493929191908F8E8D8C8B8B8A8988878685858483828180807F7E7D7C7B7B7A7978777676757473727271706F6E6E6D6C6B6A6A696867676665646363626160605F5E5D5D5C5B5A5A59585857565555545352525150504F4E4D4D4C4B4B4A4949484747464545444343424141403F3F3E3D3D3C3B3B3A39393838373636353434333332313130302F2E2E2D2D2C2C2B2A2A292928282727262525242423232222212120201F1F1E1E1D1D1C1C1B1B1A1A19191818171716161615151414131312121211111010100F0F0E0E0E0D0D0D0C0C0B0B0B0A0A0A0909090808080707070706060605050505040404040303030302020202020101010101010100000000000000>4 %_Br[0 0.278431 1 0 1 0.741176 0 2 50.0844 100 %_BS%_0 0.278431 1 0 1 0.741176 0 2 50.0844 100 Bs0.105882 0.705882 0 0 1 0.376471 0.843137 2 36.2637 0 %_BS%_0.105882 0.705882 0 0 1 0.376471 0.843137 2 36.2637 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 74)(Unnamed gradient 74) 1 2 Bd[<9D9D9D9D9D9D9D9D9D9D9D9D9D9E9E9E9E9E9E9E9E9E9E9F9F9F9F9F9F9FA0A0A0A0A0A0A1A1A1A2A2A2A2A2A3A3A3A3A3A4A4A4A5A5A5A5A6A6A6A7A7A8A8A8A8A9A9AAAAABABABABACACACACADADADAEAEAFAFAFAFB0B1B1B1B1B2B2B3B4B4B4B5B5B5B5B6B6B6B7B7B7B8B8B8B9B9B9B9BABABABABABBBBBBBCBCBDBDBDBEBEBEBEBFBFBFBFC0C0C0C1C1C1C2C2C2C2C2C3C3C3C3C3C4C4C5C6C6C6C7C7C7C8C8C8C8C9C9C9C9CACACBCBCCCCCDCDCDCDCECECECFD0D0D0D0D1D1D1D2D2D3D3D4D4D4D5D5D5D5D6D6D7D7D7D8D8D9D9D9DADADADADBDBDB><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020203040405070709090B0C0C0E1010121313151717191B1B1D1E1E20222224262828292B2B2D2F313133353737383A3C3C3D3F4143434547494B4B4D4F51545456585A5C5E5E6062646668686A6C6E707274767677797B7C7E808183838586888A8B8D8E90919394969898999B9C9D9E9FA1A2A3A4A6A7A8A9AAABACAD><3C3C3C3C3C3C3C3C3C3C3C3C3C3B3B3B3B3B3B3B3B3B3B3A3A3A3939393939393938383837373736363635353434343333333333323231313030302F2F2F2F2E2E2D2D2C2C2B2B2A2A292928282727262525232322222120201F1F1F1F1E1D1D1C1C1C1B1B1A19191817171514141312121110100F0E0E0D0B0B0A09080806050505040303020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>00<DFDFDFDFDFDFDFDEDEDEDEDEDEDDDDDDDDDDDCDCDCDCDCDBDBDBDADADADAD9D9D9D8D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D2D2D2D1D1D0D0CFCFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0BFBFBEBEBDBDBCBBBBBAB9B9B8B8B7B6B6B5B4B4B3B2B2B1B0B0AFAEAEADACACABAAAAA9A8A7A7A6A5A5A4A3A2A2A1A09F9F9E9D9C9C9B9A999898979695949493929190908F8E8D8C8B8B8A89888786868584838281807F7F7E7D7C7B7A79787777767574737271706F6E6D6C6B6A6A696867666564636261605F5E5D5C5B5A5958><DBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADAD9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9>4 %_Br[0.615686 0 0.235294 0 0 0.87451 0.858824 2 64.8352 0 %_BS%_0.615686 0 0.235294 0 0 0.87451 0.858824 2 64.8352 0 Bs0.858823 0.678431 0 0 0 0.345098 0.85098 2 50 100 %_BS%_0.858823 0.678431 0 0 0 0.345098 0.85098 2 50 100 BsBD%AI5_EndGradient%AI5_Begin_NonPrintingNp4 Bn%AI5_BeginGradient: (Linear Gradient 1)(Linear Gradient 1) 0 2 Bd[<00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F2021222324252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F5152535455565658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F90909192939494959696979898999A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAABABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2><00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C1D1D1E1F202122222324262728292A2B2C2D2E2E2F30313233343536373838393A3B3C3D3E3F4041434445464648494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F60616263646465666768696A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC><00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F8081818283838485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423222120>4 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Linear Gradient 2)(Linear Gradient 2) 0 6 Bd[<C5C5C5C5C6C6C7C7C8C8C8C8C9C9C9CACBCBCCCCCCCCCCCCCDCDCECECFCFD0D0D1D1D1D1D1D2D2D2D3D3D3D4D4D4D4D4D4D5D5D5D5D5D6D6D6D6D7D6D7D7D7D7D7D8D8D8D9D9D9DAD9DADADADADADADADADADBDBDADBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDCDBDBDBDBDBDBDADBDBDADBDADADADADADADADADADADAD9D9D9D9D8D8D8D8D8D7D7D7D7D7D7D6D6D6D6D6D6><3032343436383A3B3D3F3F4143444648494B4D4F4F51535557595B5C5E6062646567686A6C6E70727476787A7D7F81838587898B8D8D8E9092949597999A9C9E9FA1A2A3A5A6A8A9ABACAEAFB0B1B2B3B4B5B6B7B7B8B9BABBBCBDBEBFC0C0C1C2C2C3C4C4C5C6C7C7C8C9C9C9CACACBCCCCCDCDCECECFCFCFD0D0D0D1D1D1D2D2D2D3D3D4D3D4D4D4D5D5D5D6D6D6D6D6D6D6D6D6D7D7><232120201F1E1C1B18171716141312100F0E0D0C0C09080706050402010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>0<0000010101020203030304040505060606070708080809090A0A0B0B0B0C0C0D0D0E0E0E0F0F10101111111212131314141415151616171718181819191A1A1B1B1C1C1C1D1D1E1E1F1F20202021212222232324242425252626272728282829292A2A2B2B2C2C2D2D2D2E2E2F2F303031313232323333343435353636373737383839393A3A3B3B3C3C3C3D3D3E3E3F3F404041414242><A09F9E9E9D9C9B9A99989897969594939291908F8F8E8D8C8B8A89888786858483828281807F7E7D7C7B7A79787776757473727170706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110><C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCDCDCDCDCDCDCDCDCDCDCDCDCECECECECECECECECECECECECFCFCFCFCFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D2D2D2D2D2D2>4 %_Br<8282828383838384848485858586868686878787878788888989898A8A8A8B8B8C8C8C8D8D8D8D8E8E8E8F8F8F8F90909091919292939394949595959696969697979898989899999A9A9A9A9B9B9C9C9C9C9D9D9E9E9E9E9F9E9F9FA0A0A0A1A1A1A2A2A2A2A3A3A3A4A4A5A5A5A6A6A6A7A7A8A8A8A9A9AAAAAAAAABABABABACACACADADADADADAEAEAFAFB0B0B0B1B1B2B2B3B3B4B4B4B5B5B6B6B7B7B7B9B8B9B9BABABBBBBBBCBCBDBDBDBDBEBEBFBFBFBFBFC0C0C0C0C1C1C1C1C1C1C1C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C3C4C3C4C4C4C4C4C4C5C5C5C5C5C5C5C5><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010203030405060608080A0A0B0C0C0E0E101012121313161618181A1B1B1C1C1E1E2020232325252828292A2B2C2E2E3030><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFCFBFAF9F9F7F5F4F1F1F0EEEDECEBEBEBEAE8E7E6E6E4E2E1DFDDDCDBDAD9D8D7D6D5D5D3D2D1D0CECDCBCBCAC8C7C6C5C4C3C2C2C0BFBEBCBBBAB8B7B5B5B4B2B1B0AEADACAAA9A7A6A6A4A3A1A09E9C9A9997959492908E8E8C8A88868582817E7D7A79767572706F6C6A6866646462605D5C59575553514E4D4A484644413F3C3A373633312E2C29282523>0<737373727272727171717070706F6F6F6E6E6E6D6D6D6C6C6B6B6B6A6A6A69696868686767666665656564646363626262616160605F5F5E5E5D5D5C5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A494948484747464545444443434242414140403F3E3E3D3D3C3C3B3B3A3A39383837373636353534333332323131302F2F2E2E2D2D2C2B2B2A2A29292827272626252424232322222120201F1F1E1D1D1C1C1B1A1A191918171716161514141313121111100F0F0E0E0D0C0C0B0B0A09090807070606050404030302010100><F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F3F2F2F2F1F1F1F0F0F0F0EFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAEAE9E9E9E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDCDBDBDADADAD9D9D8D8D8D7D7D6D6D6D5D5D4D4D4D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCCCCCCCBCBCACAC9C9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C3C2C2C1C1C0C0BFBFBFBEBEBDBDBCBCBBBBBBBABAB9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADACACABABAAAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A0><0F0F10101011111212131314141515161617171819191A1A1B1C1C1D1D1E1F1F2021212223232425252627272829292A2B2C2C2D2E2E2F303131323334343536373738393A3A3B3C3D3D3E3F404141424344454546474849494A4B4C4D4D4E4F5051525253545556575758595A5B5C5D5D5E5F60616263636465666768696A6A6B6C6D6E6F70717272737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919293949495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6>4 %_Br<0001030405050608090A0B0D0E0F111213151618191A1C1D1E1F202123242627282A2B2C2D2F303132343536373838393B3C3D3E3F4141434445464748494A4B4C4D4F4F51525353535455565758595A5B5C5C5D5E5F60616162626364656667676869696A6A6B6B6C6D6D6E6F7070707172737374757575757576767778787879797A7B7B7B7C7C7D7D7D7D7E7E7F80808081818182828282><444341413F3E3E3C3C3A3939373634343232312F2E2C2C2B292927262624232120201E1D1B1B1A18181515141212100F0F0C0C0B0909060606040402020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>10<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBABAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E9E9D9C9B9A99989796959594939291908F8E8D8D8C8B8A8988878786858483828281807F7E7D7D7C7B7A79797877767675747473><BFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C6C6C6C7C7C8C8C8C9C9CACACACBCBCCCCCCCDCDCECECECFCFD0D0D0D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDCDDDDDEDEDEDFDFE0E0E0E1E1E1E2E2E3E3E3E4E4E4E5E5E6E6E6E7E7E7E8E8E9E9E9EAEAEAEBEBEBECECECEDEDEEEEEEEFEFEFF0F0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7F7F8F8><00000000000101010101010101010102020202020202020203030303030303030304040404040404040404050505050505050505050606060606060606060707070707070707070708080808080808080808090909090909090909090A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F>4 %_Br0<9E9D9B999896959392908F8E8C8B8A88878684838181807E7D7B7A79777675737272706F6D6C6B6A6A68676564626261605E5D5D5C5A595757565555535251514F4E4E4D4B4B4A4A4848474745454444>101<7F808182838485868788898A8B8C8D8E8F90919293939495969798999A9B9C9D9E9E9FA0A1A2A3A4A4A5A6A7A8A9A9AAABACADADAEAFB0B1B1B2B3B3B4B5B6B6B7B8B8B9BABABBBBBCBCBDBDBEBEBFBF>04 %_Br0<FDFDFDFDFDFCFCFCFCFCFBFBFBFBFBFAFAFAFAFAF9F9F9F8F8F8F7F7F6F6F5F5F5F5F4F4F3F3F2F2F1F1F0F0EFEFEFEEEEEDEDECECECEBEBEAE9E9E9E8E7E7E7E6E6E5E5E4E3E3E3E2E1E0E0E0DFDEDEDDDDDCDCDBDADAD9D8D8D7D7D6D6D5D4D4D3D2D2D1D1D0CFCFCECDCDCCCCCBCACAC9C9C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0C0BEBEBDBDBCBCBBBBBABAB9B9B7B7B6B6B5B5B3B3B3B2B2B1B1B1B0B0AEAEAEADADACACACABABABAAAAAAA9A9A9A8A8A8A6A6A6A6A5A5A5A5A4A4A4A4A2A2A2A2A2A1A1A1A1A19F9F9F9F9F9F9F9F9E9E9E9E9E9E9E9E9E>101<000102030405060708090A0B0C0D0E0F10111112131415161718191A1B1C1D1D1E1F20212223242425262728292A2A2B2C2D2E2F2F3031323334343536373838393A3B3B3C3D3E3E3F40414142434444454647474849494A4B4B4C4D4E4E4F505051525253535455555657575858595A5A5B5B5C5D5D5E5E5F5F606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6E6F6F70707071717272727373747474757575767676777777787878797979797A7A7A7A7B7B7B7B7C7C7C7C7C7D7D7D7D7D7E7E7E7E7E7E7E7E7F7F7F7F7F7F7F7F7F>04 %_Br[0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 %_BS%_0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 Bs0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 %_BS%_0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 Bs0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 %_BS%_0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 Bs0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 %_BS%_0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 Bs0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 %_BS%_0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 Bs0 0.992157 1 0 1 0 0 2 33.3333 0 %_BS%_0 0.992157 1 0 1 0 0 2 33.3333 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 1)(Radial Gradient 1) 1 2 Bd[<00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F2021222324252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F5152535455565658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F90909192939494959696979898999A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAABABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2><00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C1D1D1E1F202122222324262728292A2B2C2D2E2E2F30313233343536373838393A3B3C3D3E3F4041434445464648494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F60616263646465666768696A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC><00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F8081818283838485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423222120>4 %_Br[1 0 50 0 %_BS%_1 0 50 0 Bs0 0 50 100 %_BS%_0 0 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 2)(Radial Gradient 2) 1 6 Bd[0<FDFDFDFDFDFCFCFCFCFCFBFBFBFBFBFAFAFAFAFAF9F9F9F8F8F8F7F7F6F6F5F5F5F5F4F4F3F3F2F2F1F1F0F0EFEFEFEEEEEDEDECECECEBEBEAE9E9E9E8E7E7E7E6E6E5E5E4E3E3E3E2E1E0E0E0DFDEDEDDDDDCDCDBDADAD9D8D8D7D7D6D6D5D4D4D3D2D2D1D1D0CFCFCECDCDCCCCCBCACAC9C9C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0C0BEBEBDBDBCBCBBBBBABAB9B9B7B7B6B6B5B5B3B3B3B2B2B1B1B1B0B0AEAEAEADADACACACABABABAAAAAAA9A9A9A8A8A8A6A6A6A6A5A5A5A5A4A4A4A4A2A2A2A2A2A1A1A1A1A19F9F9F9F9F9F9F9F9E9E9E9E9E9E9E9E9E>101<000102030405060708090A0B0C0D0E0F10111112131415161718191A1B1C1D1D1E1F20212223242425262728292A2A2B2C2D2E2F2F3031323334343536373838393A3B3B3C3D3E3E3F40414142434444454647474849494A4B4B4C4D4E4E4F505051525253535455555657575858595A5A5B5B5C5D5D5E5E5F5F606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6E6F6F70707071717272727373747474757575767676777777787878797979797A7A7A7A7B7B7B7B7C7C7C7C7C7D7D7D7D7D7E7E7E7E7E7E7E7E7F7F7F7F7F7F7F7F7F>04 %_Br0<9E9D9B999896959392908F8E8C8B8A88878684838181807E7D7B7A79777675737272706F6D6C6B6A6A68676564626261605E5D5D5C5A595757565555535251514F4E4E4D4B4B4A4A4848474745454444>101<7F808182838485868788898A8B8C8D8E8F90919293939495969798999A9B9C9D9E9E9FA0A1A2A3A4A4A5A6A7A8A9A9AAABACADADAEAFB0B1B1B2B3B3B4B5B6B6B7B8B8B9BABABBBBBCBCBDBDBEBEBFBF>04 %_Br<0001030405050608090A0B0D0E0F111213151618191A1C1D1E1F202123242627282A2B2C2D2F303132343536373838393B3C3D3E3F4141434445464748494A4B4C4D4F4F51525353535455565758595A5B5C5C5D5E5F60616162626364656667676869696A6A6B6B6C6D6D6E6F7070707172737374757575757576767778787879797A7B7B7B7C7C7D7D7D7D7E7E7F80808081818182828282><444341413F3E3E3C3C3A3939373634343232312F2E2C2C2B292927262624232120201E1D1B1B1A18181515141212100F0F0C0C0B0909060606040402020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>10<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBABAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E9E9D9C9B9A99989796959594939291908F8E8D8D8C8B8A8988878786858483828281807F7E7D7D7C7B7A79797877767675747473><BFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C6C6C6C7C7C8C8C8C9C9CACACACBCBCCCCCCCDCDCECECECFCFD0D0D0D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDCDDDDDEDEDEDFDFE0E0E0E1E1E1E2E2E3E3E3E4E4E4E5E5E6E6E6E7E7E7E8E8E9E9E9EAEAEAEBEBEBECECECEDEDEEEEEEEFEFEFF0F0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7F7F8F8><00000000000101010101010101010102020202020202020203030303030303030304040404040404040404050505050505050505050606060606060606060707070707070707070708080808080808080808090909090909090909090A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F>4 %_Br<8282828383838384848485858586868686878787878788888989898A8A8A8B8B8C8C8C8D8D8D8D8E8E8E8F8F8F8F90909091919292939394949595959696969697979898989899999A9A9A9A9B9B9C9C9C9C9D9D9E9E9E9E9F9E9F9FA0A0A0A1A1A1A2A2A2A2A3A3A3A4A4A5A5A5A6A6A6A7A7A8A8A8A9A9AAAAAAAAABABABABACACACADADADADADAEAEAFAFB0B0B0B1B1B2B2B3B3B4B4B4B5B5B6B6B7B7B7B9B8B9B9BABABBBBBBBCBCBDBDBDBDBEBEBFBFBFBFBFC0C0C0C0C1C1C1C1C1C1C1C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C3C4C3C4C4C4C4C4C4C5C5C5C5C5C5C5C5><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010203030405060608080A0A0B0C0C0E0E101012121313161618181A1B1B1C1C1E1E2020232325252828292A2B2C2E2E3030><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFCFBFAF9F9F7F5F4F1F1F0EEEDECEBEBEBEAE8E7E6E6E4E2E1DFDDDCDBDAD9D8D7D6D5D5D3D2D1D0CECDCBCBCAC8C7C6C5C4C3C2C2C0BFBEBCBBBAB8B7B5B5B4B2B1B0AEADACAAA9A7A6A6A4A3A1A09E9C9A9997959492908E8E8C8A88868582817E7D7A79767572706F6C6A6866646462605D5C59575553514E4D4A484644413F3C3A373633312E2C29282523>0<737373727272727171717070706F6F6F6E6E6E6D6D6D6C6C6B6B6B6A6A6A69696868686767666665656564646363626262616160605F5F5E5E5D5D5C5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A494948484747464545444443434242414140403F3E3E3D3D3C3C3B3B3A3A39383837373636353534333332323131302F2F2E2E2D2D2C2B2B2A2A29292827272626252424232322222120201F1F1E1D1D1C1C1B1A1A191918171716161514141313121111100F0F0E0E0D0C0C0B0B0A09090807070606050404030302010100><F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F3F2F2F2F1F1F1F0F0F0F0EFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAEAE9E9E9E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDCDBDBDADADAD9D9D8D8D8D7D7D6D6D6D5D5D4D4D4D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCCCCCCCBCBCACAC9C9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C3C2C2C1C1C0C0BFBFBFBEBEBDBDBCBCBBBBBBBABAB9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADACACABABAAAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A0><0F0F10101011111212131314141515161617171819191A1A1B1C1C1D1D1E1F1F2021212223232425252627272829292A2B2C2C2D2E2E2F303131323334343536373738393A3A3B3C3D3D3E3F404141424344454546474849494A4B4C4D4D4E4F5051525253545556575758595A5B5C5D5D5E5F60616263636465666768696A6A6B6C6D6E6F70717272737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919293949495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6>4 %_Br<C5C5C5C5C6C6C7C7C8C8C8C8C9C9C9CACBCBCCCCCCCCCCCCCDCDCECECFCFD0D0D1D1D1D1D1D2D2D2D3D3D3D4D4D4D4D4D4D5D5D5D5D5D6D6D6D6D7D6D7D7D7D7D7D8D8D8D9D9D9DAD9DADADADADADADADADADBDBDADBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDCDBDBDBDBDBDBDADBDBDADBDADADADADADADADADADADAD9D9D9D9D8D8D8D8D8D7D7D7D7D7D7D6D6D6D6D6D6><3032343436383A3B3D3F3F4143444648494B4D4F4F51535557595B5C5E6062646567686A6C6E70727476787A7D7F81838587898B8D8D8E9092949597999A9C9E9FA1A2A3A5A6A8A9ABACAEAFB0B1B2B3B4B5B6B7B7B8B9BABBBCBDBEBFC0C0C1C2C2C3C4C4C5C6C7C7C8C9C9C9CACACBCCCCCDCDCECECFCFCFD0D0D0D1D1D1D2D2D2D3D3D4D3D4D4D4D5D5D5D6D6D6D6D6D6D6D6D6D7D7><232120201F1E1C1B18171716141312100F0E0D0C0C09080706050402010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>0<0000010101020203030304040505060606070708080809090A0A0B0B0B0C0C0D0D0E0E0E0F0F10101111111212131314141415151616171718181819191A1A1B1B1C1C1C1D1D1E1E1F1F20202021212222232324242425252626272728282829292A2A2B2B2C2C2D2D2D2E2E2F2F303031313232323333343435353636373737383839393A3A3B3B3C3C3C3D3D3E3E3F3F404041414242><A09F9E9E9D9C9B9A99989897969594939291908F8F8E8D8C8B8A89888786858483828281807F7E7D7C7B7A79787776757473727170706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110><C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCDCDCDCDCDCDCDCDCDCDCDCDCECECECECECECECECECECECECFCFCFCFCFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D2D2D2D2D2D2>4 %_Br[0 0.992157 1 0 1 0 0 2 33.3333 0 %_BS%_0 0.992157 1 0 1 0 0 2 33.3333 0 Bs0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 %_BS%_0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 Bs0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 %_BS%_0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 Bs0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 %_BS%_0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 Bs0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 %_BS%_0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 Bs0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 %_BS%_0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Offset Squares Pattern)(Offset Squares Pattern) 0 0 55.0781 55.0801 [%AI3_Tile(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0 0 m0 55.0801 L55.0781 55.0801 L55.0781 0 L0 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.043137 0 0.713725 0 1 1 0.4 Xa 0.043137 0 0.713725 0 1 1 0.4 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR26.1436 52.3262 m26.1436 29.4307 L3.03125 29.4307 L3.03125 52.3262 L26.1436 52.3262 Lf25.0264 50.123 m5.89063 50.123 L5.89063 32.4961 L25.0264 32.4961 L25.0264 50.123 Lf*U*u5.89063 50.123 m25.0264 50.123 L25.0264 32.4961 L5.89063 32.4961 L5.89063 50.123 Ln10.0313 34.2578 m24.1338 34.2578 L24.1338 48.3613 L10.0313 48.3613 L10.0313 34.2578 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.501961 0.984314 0 0.968627 0.576471 0.117647 Xa 0 0.501961 0.984314 0 0.968627 0.576471 0.117647 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR22.4082 48.793 m8.30566 48.793 L8.30566 34.6895 L22.4082 34.6895 L22.4082 48.793 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.003922 0.984314 0.976471 0 0.929412 0.12549 0.141176 Xa 0.003922 0.984314 0.976471 0 0.929412 0.12549 0.141176 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR52.6943 24.7852 m52.6943 1.67578 L28.9355 1.67578 L28.9355 24.7852 L52.6943 24.7852 Lf47.6777 22.582 m30.0527 22.582 L30.0527 4.95703 L47.6777 4.95703 L47.6777 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR30.0527 22.582 m50.6982 22.582 L50.6982 4.95703 L30.0527 4.95703 L30.0527 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.501961 0 0.992157 0 0.54902 0.776471 0.247059 Xa 0.501961 0 0.992157 0 0.54902 0.776471 0.247059 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR47.4199 21.252 m32.2393 21.252 L32.2393 6.50293 L47.4199 6.50293 L47.4199 21.252 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.698039 0.14902 0 0 0.160784 0.670588 0.886275 Xa 0.698039 0.14902 0 0 0.160784 0.670588 0.886275 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR27.5391 27.5391 m27.5391 0 L0 0 L0 27.5391 L27.5391 27.5391 Lf25.4316 26.1445 m2.75293 26.1445 L2.75293 2.16992 L25.4316 2.16992 L25.4316 26.1445 Lf*U*u4.95605 7.40039 m22.582 7.40039 L22.582 25.0273 L4.95605 25.0273 L4.95605 7.40039 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.188235 0 0.980392 0 0.85098 0.878431 0.129412 Xa 0.188235 0 0.980392 0 0.85098 0.878431 0.129412 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR22.582 5.67383 m4.95605 5.67383 L4.95605 25.0273 L22.582 25.0273 L22.582 5.67383 Lf20.3887 21.3281 m7.58105 21.3281 L7.58105 10.0313 L20.3887 10.0313 L20.3887 21.3281 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 Xa 0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR6.93555 8.73633 m21.0371 8.73633 L21.0371 22.8379 L6.93555 22.8379 L6.93555 8.73633 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.623529 0 0.003922 0 0.2 0.776471 0.956863 Xa 0.623529 0 0.003922 0 0.2 0.776471 0.956863 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR55.0781 55.0801 m55.0781 27.5391 L27.5391 27.5391 L27.5391 55.0801 L55.0781 55.0801 Lf52.3252 50.9688 m30.292 50.9688 L30.292 28.9355 L52.3252 28.9355 L52.3252 50.9688 Lf*U*u30.292 50.9688 m52.3252 50.9688 L52.3252 28.9355 L30.292 28.9355 L30.292 50.9688 Ln32.4951 30.0527 m50.1221 30.0527 L50.1221 47.6777 L32.4951 47.6777 L32.4951 30.0527 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.043137 0 0.713725 0 1 1 0.4 Xa 0.043137 0 0.713725 0 1 1 0.4 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR50.1221 30.0527 m32.4951 30.0527 L32.4951 48.9727 L50.1221 48.9727 L50.1221 30.0527 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.901961 0 0 1 0.2 0.6 Xa 0 0.901961 0 0 1 0.2 0.6 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.9063 33.749 m49.0078 33.749 L49.0078 47.8506 L34.9063 47.8506 L34.9063 33.749 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7907.8833 8616.3486 m-7816.0479 8616.3486 L-7816.0479 8612.0693 L-7907.8833 8612.0693 L-7907.8833 8616.3486 Ln0 O0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa-7907.6631 8613.6689 m-7908 8613.7354 -7907.4814 8613.9248 -7907.8833 8613.7822 C-7907.8379 8613.6641 -7907.7725 8613.5752 -7907.6631 8613.6689 Cf-7817.1675 8613.835 m-7818.2529 8614.5977 -7819.6816 8613.8271 -7820.8701 8614.3135 C-7821.0098 8614.3457 -7820.8354 8613.8955 -7821.1484 8613.9961 C-7822.3008 8614.5889 -7824.1162 8614.2354 -7825.5195 8613.7783 C-7825.4346 8613.6602 L-7825.7021 8613.5752 -7826.0283 8613.9658 -7826.3115 8613.9111 C-7826.3135 8613.833 -7826.2207 8613.7998 -7826.2861 8613.6914 C-7826.3574 8613.9287 -7826.7979 8613.8018 -7826.9189 8613.9775 C-7827.0303 8613.8857 -7827.0195 8613.6982 -7827.1641 8613.5938 C-7827.3262 8613.8633 L-7827.7769 8614.5029 -7828.4209 8613.8193 -7829.0361 8614.1494 C-7829.0063 8614.0869 -7828.9453 8614.0381 -7828.9941 8613.9775 C-7829.9814 8614.3662 -7831.2168 8614.293 -7832.3208 8614.4365 C-7832.2769 8614.3418 -7832.2363 8614.1689 -7832.3008 8614.0615 C-7832.3555 8614.3447 -7832.6963 8614.416 -7832.9922 8614.4717 C-7833.1255 8614.1807 -7833.4995 8614.7373 -7833.8467 8614.5762 C-7833.8169 8614.5127 L-7834.0732 8614.8174 -7834.1973 8614.3369 -7834.4053 8614.7021 C-7834.5684 8614.4736 L-7834.6807 8614.8838 -7834.9395 8614.2607 -7835.1514 8614.4697 C-7835.1445 8614.5537 L-7835.3442 8614.6533 -7835.4482 8614.4473 -7835.6338 8614.5166 C-7835.6514 8614.4697 L-7836.0854 8614.5762 -7836.3379 8614.3486 -7836.3271 8614.6689 C-7836.4795 8614.4121 -7835.9063 8614.5518 -7836.1455 8614.1777 C-7837.5732 8614.5088 -7839.0459 8614.4434 -7840.4834 8614.4502 C-7840.6465 8614.3213 -7840.7505 8614.2822 -7840.7871 8614.1602 C-7840.9307 8614.2256 -7841.3281 8614.2197 -7841.4585 8614.3838 C-7841.4102 8614.377 -7841.5513 8614.2197 -7841.6274 8614.2041 C-7841.8887 8614.083 -7841.9131 8614.5557 -7842.2002 8614.4121 C-7842.0859 8614.3271 -7842.0469 8614.2236 -7842.0854 8614.1045 C-7842.3301 8614.3545 -7842.6577 8614.3145 -7842.9473 8614.3955 C-7842.9023 8614.3418 -7842.8325 8614.3096 -7842.8433 8614.209 C-7843.1602 8614.4922 -7843.4209 8614.1494 -7843.6982 8614.3281 C-7843.5947 8614.1436 L-7844.0415 8613.9189 -7843.7266 8614.5303 -7844.1128 8614.3975 C-7844.02 8614.3389 -7844.0527 8614.2666 -7844.0361 8614.1914 C-7844.3965 8614.5273 -7844.9795 8614.416 -7845.3389 8614.5303 C-7845.3174 8614.5049 -7845.3232 8614.4541 Y-7845.7148 8614.4961 -7846.1245 8614.3916 -7846.5552 8614.5381 C-7846.7119 8614.4561 -7846.5039 8614.0869 -7846.9185 8614.1553 C-7846.9033 8614.5264 -7847.6221 8614.3076 -7847.3779 8614.7275 C-7847.7319 8614.667 -7848.2925 8614.5273 -7848.5283 8614.6533 C-7848.3691 8614.5127 -7848.7007 8614.2002 -7848.4063 8614.1689 C-7848.6289 8613.9434 L-7848.5957 8613.792 -7848.3999 8613.9951 -7848.4707 8613.8037 C-7848.6182 8613.8193 -7849.0479 8613.9658 -7849.1797 8613.9053 C-7849.4531 8614.1328 -7849.7041 8614.5576 -7850.1465 8614.6045 C-7849.9385 8614.46 -7850.2646 8614.1953 -7850.1235 8614.1318 C-7850.7407 8614.8418 L-7850.8877 8614.8594 -7850.7725 8614.5498 -7850.9854 8614.6465 C-7850.9746 8614.7441 -7851.0674 8614.8057 -7851.1318 8614.8857 C-7851.1875 8614.8418 -7851.7441 8614.9775 -7851.8081 8614.6113 C-7851.8735 8614.4697 -7851.5684 8614.5361 -7851.7314 8614.4053 C-7852.0029 8614.4082 -7852.0151 8614.5342 -7852.2871 8614.54 C-7852.2925 8614.4912 L-7852.4717 8614.4365 -7852.8213 8614.6465 -7852.6265 8614.8486 C-7852.5015 8614.8594 -7852.6738 8614.6289 -7852.4888 8614.7354 C-7852.6152 8614.9473 -7852.9312 8615.0068 -7853.2031 8615.0098 C-7853.1104 8614.9521 -7853.1216 8614.8545 -7853.0845 8614.751 C-7853.4497 8615.0381 -7853.8369 8615.1289 -7854.2451 8615.249 C-7854.2515 8615.4229 -7854.0928 8614.9326 -7854.0327 8615.0244 C-7854.5557 8614.7832 -7855.1128 8615.3662 -7855.5479 8615.0137 C-7855.4766 8614.9834 -7855.5098 8615.2607 -7855.5146 8615.2119 C-7855.7666 8615.1904 -7855.7549 8614.9385 -7855.9189 8615.0313 C-7855.9355 8614.8838 -7856.1255 8615.0791 -7856.2944 8615.124 C-7856.3818 8615.2305 -7856.3384 8615.0518 -7856.1914 8615.0361 C-7856.4268 8615.1602 -7857.3691 8615.3877 -7857.9131 8615.1729 C-7857.9023 8615.2705 -7858.2471 8615.5313 -7858.3721 8615.5205 C-7858.3232 8615.292 L-7858.4375 8615.1553 -7858.7422 8615.3115 -7858.7632 8615.1162 C-7859.0303 8615.3936 -7857.7344 8614.8799 -7858.0957 8615.0938 C-7858.1895 8614.9033 -7858.5991 8615.458 -7858.5215 8615.1465 C-7858.7725 8615.1553 -7859.0161 8615.4121 -7859.2559 8615.1982 C-7859.1865 8615.2354 -7859.0522 8614.8809 -7859.2549 8614.8975 C-7859.6123 8614.9385 -7859.3564 8615.0068 -7859.6465 8615.083 C-7859.8281 8615.1768 L-7859.8398 8615.3994 -7860.1475 8615.1465 -7860.0146 8615.3955 C-7860.0586 8615.2119 -7860.5337 8615.5088 -7860.4971 8615.1396 C-7860.4473 8614.8486 L-7860.6016 8614.8701 -7860.7002 8615.1553 -7860.8213 8615.2832 C-7860.8418 8615.2568 -7860.8823 8615.1982 -7860.8745 8615.1514 C-7860.8994 8615.5967 -7861.2432 8615.1143 -7861.4268 8615.458 C-7861.7505 8615.3037 -7862.2495 8615.4434 -7862.4023 8615.167 C-7862.6514 8615.3018 -7862.8784 8615.4609 -7863.1621 8615.3662 C-7863.1055 8615.3242 -7863.0283 8615.3115 -7863.0122 8615.2158 C-7863.1904 8615.085 -7863.2344 8615.2021 -7863.3975 8615.2744 C-7863.3608 8615.208 -7863.7539 8615.0137 -7863.9521 8614.8564 C-7864.1992 8614.9893 -7864.1143 8615.2295 -7864.1392 8615.376 C-7864.3652 8614.9365 -7864.8379 8615.6592 -7865.1211 8615.2607 C-7865.0352 8615.2002 -7864.7598 8615.0449 -7864.9658 8614.9346 C-7865.1919 8614.4961 -7865.4219 8615.2578 -7865.7861 8615.0479 C-7865.6968 8615.4121 L-7865.8594 8615.1865 -7866.2334 8615.624 -7866.1963 8615.2529 C-7866.3184 8615.3838 -7866.6265 8615.1318 -7866.5859 8615.4873 C-7867.1846 8615.1865 -7868.0425 8615.6689 -7868.4102 8615.0313 C-7868.4961 8615.0908 -7868.7104 8615.0303 -7868.6665 8615.2129 C-7868.5239 8615.4111 -7868.4673 8615.0713 -7868.4141 8615.2061 C-7868.4912 8615.2168 -7868.5078 8615.3145 -7868.5161 8615.3633 C-7868.7021 8615.2822 -7868.8486 8615.2568 -7868.6729 8614.9609 C-7869.0869 8614.7412 -7869.1001 8615.5654 -7869.6274 8615.4258 C-7869.6035 8615.2793 -7869.6436 8615.2236 -7869.7979 8615.2471 C-7870.0903 8615.499 L-7870.4312 8615.4404 -7870.2842 8615.1641 -7870.2925 8614.915 C-7870.4746 8614.958 -7870.6973 8614.9463 -7870.7803 8615.1318 C-7871.0015 8614.8193 L-7870.8398 8615.0449 -7871.1514 8614.9697 -7871.2368 8615.0303 C-7871.1514 8614.9697 L-7871.1846 8614.8633 -7871.3955 8614.9287 -7871.5024 8614.96 C-7871.4766 8615.1143 -7871.2617 8615.1768 -7871.1445 8615.2217 C-7871.2373 8615.3311 -7871.3823 8615.3057 -7871.5059 8615.4346 C-7871.4648 8615.1904 -7871.8027 8615.2607 -7871.9473 8615.2354 C-7872.1133 8615.1826 -7872.1348 8615.4541 -7872.1831 8615.4463 C-7872.1875 8615.3193 -7872.4541 8615.4248 -7872.3247 8615.2471 C-7872.2681 8615.2061 -7872.1953 8615.3701 -7872.1016 8615.2578 C-7872.2109 8615.1641 -7872.1982 8614.9434 -7872.4258 8615.1045 C-7872.5967 8615.2256 -7872.3818 8615.5869 -7872.7061 8615.4326 C-7872.6211 8615.3721 -7872.6055 8615.2744 -7872.5391 8615.1865 C-7872.8433 8615.0596 L-7872.8564 8615.2822 L-7872.8975 8615.2256 -7872.8691 8615.2061 -7872.8877 8615.1768 C-7872.9785 8615.4111 -7873.3521 8615.249 -7873.4209 8615.5127 C-7873.5742 8615.5361 -7873.7441 8615.3584 -7873.8906 8615.333 C-7873.8623 8615.3135 L-7874.0415 8615.1826 -7874.2793 8615.2686 -7874.4297 8615.4189 C-7874.4219 8615.3701 L-7874.5195 8615.3525 -7874.7505 8615.3877 -7874.8735 8615.5186 C-7875.1201 8615.3506 -7874.9561 8614.6777 -7875.2295 8614.958 C-7875.48 8614.9658 -7875.6221 8615.3662 -7875.5215 8615.5088 C-7875.9717 8615.3584 -7876.4834 8615.7217 -7876.9009 8615.376 C-7876.9658 8615.4658 -7876.9248 8615.5225 -7877.0586 8615.5752 C-7877.7197 8615.4873 -7878.4551 8615.8389 -7878.9814 8615.4014 C-7878.79 8615.3076 -7878.9688 8615.1777 -7878.9727 8615.0518 C-7879.1309 8615.251 -7879.1631 8614.8447 -7879.2197 8615.1865 C-7879.2041 8615.3877 -7879.2197 8615.4854 -7879.0337 8615.5664 C-7879.4282 8615.6748 -7880.0283 8615.6748 -7880.2471 8615.4873 C-7880.1377 8615.5801 -7880.2227 8615.6416 -7880.3086 8615.7021 C-7880.2803 8615.3809 -7880.5713 8615.333 -7880.7915 8615.4463 C-7880.8223 8615.6416 L-7880.9658 8615.4404 L-7881.0503 8615.5029 -7881.0591 8615.8506 -7881.2773 8615.6631 C-7881.2891 8615.5869 -7881.3018 8615.5098 -7881.3418 8615.4541 C-7881.5693 8615.6143 -7881.8906 8615.8857 -7882.1377 8615.7197 C-7882.3398 8615.4346 L-7882.4453 8615.4658 -7882.6235 8615.6377 -7882.4375 8615.7197 C-7882.8594 8615.5479 -7883.1309 8615.5264 -7883.2646 8615.2793 C-7883.9912 8615.8809 -7885.0459 8615.9053 -7885.8906 8615.8623 C-7885.8652 8615.7158 L-7886.0923 8615.5791 -7885.9834 8615.9717 -7886.1416 8615.8701 C-7886.0684 8615.7305 -7886.3145 8615.5664 -7886.1362 8615.3955 C-7886.4609 8615.2412 -7886.5547 8615.6494 -7886.7656 8615.7158 C-7886.7979 8615.9082 -7886.5957 8615.5928 -7886.6367 8615.8369 C-7886.6729 8615.9053 -7887.0859 8615.6865 -7887.1362 8615.9775 C-7887.2178 8615.8633 -7887.1543 8615.6494 -7887.1104 8615.5313 C-7887.3086 8615.6729 L-7887.5513 8615.333 -7886.7559 8615.0654 -7887.0107 8614.6465 C-7887.1934 8614.6914 L-7887.3682 8614.3877 -7886.71 8614.3486 -7887.1689 8614.2441 C-7887.3682 8614.3877 -7887.5381 8614.8096 -7887.3608 8614.9385 C-7887.7754 8615.0186 -7887.5527 8615.6318 -7887.9985 8615.6074 C-7888.1201 8615.4365 -7887.6416 8615.5664 -7887.7275 8615.3271 C-7887.9375 8615.0928 -7888.1484 8615.458 -7888.3354 8615.376 C-7888.1279 8615.4854 -7888.3032 8615.7793 -7888.4375 8615.833 C-7888.6641 8615.6953 -7888.29 8615.5576 -7888.6113 8615.5273 C-7888.6641 8615.6953 -7888.9595 8615.8213 -7888.7041 8615.9385 C-7888.8203 8616.3193 -7889.0381 8615.833 -7889.2129 8616.1279 C-7889.3174 8615.8594 -7888.8823 8615.5088 -7889.2354 8615.375 C-7889.1792 8615.6328 -7889.6704 8615.7256 -7889.4839 8616.1074 C-7889.6221 8616.0342 -7889.6367 8615.8311 -7889.5361 8615.6729 C-7889.7334 8615.5137 -7890.0151 8616.1436 -7890.0801 8615.6318 C-7890.1479 8615.8955 L-7890.21 8615.8096 -7890.2983 8615.7441 -7890.3994 8615.6025 C-7890.5732 8615.5977 -7890.96 8615.96 -7890.9443 8615.5615 C-7891 8615.6025 -7891.3975 8615.585 -7891.2441 8615.8594 C-7890.9971 8616.0273 -7890.96 8615.6592 -7890.8223 8616.0313 C-7890.9971 8615.7275 -7891.1787 8616.0713 -7891.3213 8616.1729 C-7891.3447 8616.0186 L-7891.4297 8616.0791 -7891.6255 8616.0449 -7891.6787 8616.2119 C-7891.6133 8616.124 -7891.6475 8616.0186 -7891.7148 8615.9814 C-7891.8042 8616.2158 L-7892.1494 8616.333 -7891.8857 8615.8037 -7892.2217 8615.8721 C-7891.9663 8615.6904 L-7892.0225 8615.7295 -7892.1367 8615.5098 -7892.2979 8615.583 C-7892.3604 8615.7969 -7892.4775 8616.0537 -7892.5313 8616.2197 C-7892.7207 8616.3135 -7892.6162 8615.9785 -7892.8027 8616.1982 C-7892.5586 8615.9404 L-7892.5215 8615.8701 -7892.7231 8615.5869 -7892.9761 8615.5928 C-7893.1377 8615.667 -7893.3887 8615.9756 -7893.1338 8616.0928 C-7893.2607 8616.0967 -7893.4385 8615.9658 -7893.3379 8615.8096 C-7893.6255 8615.8838 -7893.2998 8616.04 -7893.5479 8616.1729 C-7893.6494 8616.0303 -7893.9658 8615.8271 -7894.1563 8615.6201 C-7893.8975 8615.2617 L-7894.0693 8615.2578 L-7893.8467 8614.9717 -7894.1826 8615.04 -7894.0566 8614.7373 C-7894.1743 8614.6904 -7894.3169 8614.793 -7894.4307 8614.8721 C-7894.0864 8615.3564 -7894.8159 8615.5342 -7894.7158 8615.9756 C-7895.1875 8616.0967 -7895.0107 8614.9014 -7895.5024 8615.5928 C-7895.4219 8615.708 -7895.6533 8616.0439 -7895.3564 8615.916 C-7895.6494 8615.8682 -7895.5557 8616.3594 -7895.9014 8616.1768 C-7895.6455 8615.9951 -7896.1763 8615.7295 -7895.8066 8615.4658 C-7895.8311 8615.6113 -7895.6001 8615.5762 -7895.5435 8615.5361 C-7895.6641 8615.3662 -7895.5186 8615.0908 -7895.8184 8615.0908 C-7896.0015 8615.1328 -7896.2524 8615.1416 -7896.2158 8615.3721 C-7896.2085 8615.625 -7895.9365 8615.3447 -7896.0537 8615.6006 C-7896.4185 8615.6885 -7896.4795 8615.3037 -7896.6304 8615.7529 C-7896.3999 8615.7168 -7896.3423 8615.9775 -7896.3467 8616.1514 C-7896.6143 8616.2568 L-7896.5625 8616.0889 L-7896.9922 8615.9678 -7896.6895 8616.3936 -7897.1055 8616.3486 C-7897.3008 8616.0166 L-7897.2017 8615.7305 -7896.6953 8616.1436 -7896.7695 8615.6777 C-7897.04 8615.6592 -7897.1299 8615.8955 -7897.3848 8615.7754 C-7897.3281 8615.7354 -7897.2505 8615.7236 -7897.1943 8615.6826 C-7897.2915 8615.667 -7897.3877 8615.0498 -7897.7734 8615.4111 C-7897.9727 8615.5518 -7897.8262 8615.5762 -7897.8311 8615.751 C-7898.2656 8615.8037 -7898.3955 8615.9814 -7898.6753 8616.0088 C-7898.6177 8615.6689 -7899.1699 8615.9756 -7898.8608 8615.6279 C-7898.7188 8615.8271 -7898.0903 8615.8076 -7897.9365 8615.4834 C-7898.0947 8615.0801 -7897.5952 8615.54 -7897.5024 8615.1318 C-7897.8506 8615.1221 -7897.8335 8614.7256 -7897.8896 8614.4658 C-7897.9863 8614.4473 -7898.0801 8614.5576 -7898.1377 8614.5977 C-7898.1787 8614.8418 -7898.0522 8614.8389 -7898.0449 8615.0908 C-7898.4336 8615.0244 -7898.8081 8615.1602 -7899.0225 8615.3994 C-7899.1523 8615.2783 -7899.1113 8615.0342 -7898.9575 8615.0098 C-7899.4199 8615.083 -7899.9141 8615.0498 -7900.3535 8614.9756 C-7900.0693 8615.375 -7900.8433 8615.0693 -7900.6494 8615.4014 C-7900.4141 8615.4912 -7900.2119 8615.7754 -7900.3418 8615.9541 C-7900.4888 8615.9287 -7900.3369 8615.7793 -7900.3984 8615.6943 C-7900.5859 8615.9121 -7900.6895 8615.3447 -7900.8735 8615.6885 C-7900.4512 8615.5596 -7900.7915 8615.2021 -7900.7139 8614.8896 C-7901.0186 8615.0654 -7900.7007 8614.667 -7901.0024 8614.667 C-7901.3057 8614.8408 -7901.6787 8614.9775 -7902.0161 8615.0449 C-7902.4399 8614.749 -7903.0898 8615.04 -7903.4683 8615.0518 C-7903.6665 8614.8936 -7903.5322 8614.54 -7903.7471 8614.4785 C-7903.9995 8614.4854 -7903.5601 8614.8594 -7903.9336 8614.6982 C-7903.8975 8614.6279 L-7904.0107 8614.709 -7904.5825 8614.3877 -7904.6929 8614.8955 C-7904.5776 8614.5127 L-7904.6475 8614.4775 -7904.7119 8614.5654 -7904.7695 8614.6064 C-7904.7725 8614.4814 -7904.8535 8614.3682 -7904.7402 8614.2861 C-7904.9707 8614.0225 -7905.2241 8614.3281 -7905.4746 8614.3389 C-7905.3135 8614.5654 L-7905.7422 8614.7432 -7906.0293 8614.5186 -7906.4443 8614.5977 C-7906.4316 8614.376 L-7906.6787 8614.5088 L-7906.6182 8614.293 -7906.8447 8614.1553 -7906.9751 8614.335 C-7906.3335 8613.792 L-7906.1553 8613.9229 -7906.5283 8614.0596 -7906.4165 8614.2783 C-7906.3213 8614.4697 -7905.9375 8614.4082 -7905.8755 8614.1953 C-7906.0225 8614.1709 -7906.0293 8614.2197 -7906.1436 8614.2998 C-7906.1919 8613.9912 -7905.9688 8614.0029 -7905.8584 8613.7969 C-7905.9355 8613.8096 -7906.0449 8613.7158 -7906.0615 8613.8135 C-7905.9102 8613.6631 -7905.7578 8613.6396 -7905.5059 8613.6318 C-7905.6763 8613.7529 -7905.4131 8613.8232 -7905.4775 8613.9111 C-7905.4575 8613.6396 -7905.2168 8613.5557 -7904.9053 8613.6318 C-7904.6831 8613.9463 -7904.3208 8613.4297 -7903.96 8613.5166 C-7904.1064 8613.792 -7904.2935 8614.0127 -7904.5127 8614.124 C-7904.2861 8614.2617 -7904.2607 8614.1162 -7904.0337 8614.2549 C-7903.9238 8614.0498 -7903.8457 8613.7354 -7903.5503 8613.6104 C-7903.5342 8613.8135 L-7903.2666 8613.709 -7903.2666 8613.4082 -7902.9258 8613.4658 C-7902.3418 8613.5654 -7901.7407 8613.5654 -7901.2949 8613.5908 C-7901.2783 8613.793 L-7901.0303 8613.3594 -7900.4521 8613.6328 -7900.1182 8613.4404 C-7899.5503 8613.6357 -7898.8848 8613.2471 -7898.5938 8613.5967 C-7897.5913 8613.4404 -7896.7148 8613.2881 -7895.6768 8613.3623 C-7895.8516 8613.6572 L-7895.6655 8613.4404 -7895.7305 8613.8271 -7895.5479 8613.7832 C-7895.7578 8613.5479 -7895.2949 8613.4775 -7895.1665 8613.2969 C-7894.7041 8613.5264 -7894.1104 8613.2754 -7893.7007 8613.0693 C-7893.6846 8613.2725 L-7893.2705 8612.8916 -7892.7759 8613.2256 -7892.2598 8613.2881 C-7892.2007 8613.3721 -7892.1074 8613.5625 -7891.9536 8613.54 C-7891.6738 8613.2119 -7891.5273 8613.2354 -7891.1167 8613.0303 C-7890.8169 8613.0303 -7890.3301 8613.1113 -7890.0254 8613.2393 C-7888.8975 8612.7783 -7887.7456 8613.0732 -7886.5732 8612.7959 C-7886.4888 8613.0342 L-7885.3521 8612.5244 -7883.9541 8612.9873 -7882.9839 8612.7256 C-7883.0776 8613.1328 L-7882.7734 8613.2578 -7882.3843 8613.0264 -7882.4619 8612.7373 C-7882.1567 8612.8623 -7881.7007 8612.54 -7881.5068 8612.875 C-7881.1953 8612.9502 -7881.1255 8612.6865 -7880.8662 8612.6318 C-7880.2422 8612.7861 -7880.0107 8612.751 -7879.4224 8612.6748 C-7879.5684 8612.6494 L-7879.6328 8612.7393 -7879.6387 8612.9121 -7879.4922 8612.9385 C-7879.2725 8612.8242 -7878.6846 8613.0479 -7878.9033 8612.5615 C-7878.2754 8612.8418 -7877.4385 8612.333 -7876.8271 8612.7119 C-7876.8789 8612.5791 -7876.7246 8612.5537 -7876.6602 8612.4639 C-7876.1089 8612.458 -7875.5293 8612.7295 -7875.0898 8612.5029 C-7875.0024 8612.5693 -7875.2295 8612.7295 -7875.0049 8612.7432 C-7874.8721 8612.6914 -7875.0024 8612.5693 -7874.8384 8612.4951 C-7873.9453 8612.2471 -7873.0303 8612.751 -7872.2188 8612.6865 C-7870.7754 8612.4297 -7869.2695 8612.5596 -7867.8867 8612.5166 C-7867.9023 8612.6143 L-7867.4395 8612.2412 -7866.8159 8612.9961 -7866.4463 8612.4346 C-7866.3369 8612.5273 -7866.0283 8612.4785 -7866.1094 8612.667 C-7865.7407 8612.4033 -7865.0771 8612.915 -7864.5439 8612.5801 C-7864.5928 8612.5713 -7864.6211 8612.5908 -7864.6777 8612.6328 C-7864.1392 8612.8486 -7863.6641 8612.5537 -7863.0957 8612.749 C-7863.1533 8612.791 -7863.2583 8612.8213 -7863.2754 8612.9189 C-7863.0557 8613.1064 -7862.7549 8612.5068 -7862.6348 8612.9775 C-7862.5088 8612.9736 -7862.5449 8612.7412 -7862.6221 8612.7549 C-7861.3779 8612.9385 -7860.0498 8612.6377 -7858.7549 8612.5303 C-7857.8271 8612.8115 -7858.6982 8613.3232 -7857.9663 8612.9717 C-7857.9063 8613.0625 -7857.9229 8612.792 -7857.9131 8612.8896 C-7857.6299 8612.7578 -7857.4717 8613.415 -7857.2754 8613.1689 C-7857.3564 8612.8799 -7857.1445 8613.0068 -7857.1387 8612.8311 C-7856.5713 8613.0186 -7856.4575 8613.2793 -7856.0098 8613.0596 C-7856.0435 8613.2119 L-7855.5186 8612.7822 -7854.9102 8613.0127 -7854.4673 8612.5166 C-7851.5728 8612.4258 -7848.7983 8612.1514 -7845.9761 8612.0938 C-7843.1865 8612.1885 -7840.4551 8611.9658 -7837.6221 8612.2295 C-7836.9585 8612.6289 -7836.9087 8612.6182 -7836.1797 8612.4561 C-7836.2095 8612.5205 -7836.2549 8612.5361 -7836.2061 8612.5967 C-7836.1699 8612.2686 -7835.6929 8612.5654 -7835.6235 8612.2529 C-7834.5762 8612.3135 -7833.6113 8612.2236 -7832.5337 8612.2217 C-7832.7041 8612.2568 -7832.7896 8612.5244 -7832.5869 8612.5029 C-7832.3755 8612.293 L-7832.3408 8612.3857 L-7832.2021 8612.3369 -7832.0513 8612.1748 -7832.1943 8612.0693 C-7829.4873 8611.7861 -7826.8242 8612.4434 -7824.1729 8612.3633 C-7823.5439 8612.5 -7822.6475 8612.375 -7821.9629 8612.3076 C-7819.9355 8612.7441 -7818.1084 8613.0977 -7816.0479 8612.792 C-7816.3174 8613.6396 -7817.1675 8613.835 Vf-7907.2578 8613.6357 m-7907.1855 8613.7998 -7906.9497 8613.8896 -7907.1377 8614.1074 C-7907.1611 8613.9541 -7907.2822 8613.7822 -7907.2578 8613.6357 Cf-7900.9619 8615.3232 m-7900.9536 8615.2744 -7900.8721 8615.3896 -7900.8521 8615.416 C-7900.9297 8615.4287 -7901.0024 8615.5664 -7901.0645 8615.4814 C-7900.9854 8615.4697 -7900.9976 8615.3916 -7900.9619 8615.3232 Cf-7899.3521 8615.4209 m-7899.3765 8615.5664 -7899.7207 8615.6826 -7899.9238 8615.7002 C-7899.3521 8615.4209 Lf-7897.8521 8616.0225 m-7897.7227 8616.1455 -7897.7583 8616.2129 -7897.9326 8616.209 C-7897.9453 8616.1318 -7897.8877 8616.0928 -7897.8521 8616.0225 Cf-7897.7456 8615.6904 m-7897.6211 8615.6865 -7897.5591 8615.7725 -7897.4985 8615.8564 C-7897.5029 8615.7305 -7897.7871 8615.9346 -7897.7456 8615.6904 Cf-7894.4893 8616.1143 m-7894.4111 8616.1025 -7894.2417 8615.9814 -7894.1689 8616.1436 C-7894.2505 8616.0303 -7894.5498 8616.3281 -7894.4893 8616.1143 Cf-7892.9761 8615.8936 m-7892.9272 8615.9033 -7892.9072 8615.9297 -7892.8506 8615.8896 C-7892.7607 8615.9561 -7892.8555 8616.0625 -7892.9312 8616.0762 C-7892.9761 8615.8936 Lf-7865.4287 8615.3076 m-7865.5923 8615.3799 L-7865.5684 8615.2354 L-7865.4287 8615.3076 Lf-7853.3574 8615.2998 m-7853.1943 8615.208 -7853.2441 8615.4365 -7853.2168 8615.458 C-7853.3643 8615.4736 -7853.1621 8615.2783 -7853.3574 8615.2998 Cf-7846.8486 8614.5713 m-7846.8984 8614.5752 L-7846.8818 8614.2754 L-7846.8486 8614.5713 LfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 2)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7559.2031 8616.3926 m-7559.2031 8586.5557 L-7908 8586.5557 L-7908 8616.3926 L-7559.2031 8616.3926 Ln0 O0.74902 0.678431 0.670588 0.901961 0 0 0 Xa-7721.6924 8588.3203 m-7727.9551 8590.3545 -7733.6455 8593.6973 -7740.3755 8595.8867 c-7749.04 8598.7061 -7760.0127 8601.1855 -7769.1592 8601.4199 c-7787.6572 8601.8936 -7802.6895 8596.4883 -7820.8486 8593.8652 c-7859.9404 8588.2188 -7887.2383 8599.3672 -7908 8611.6719 C-7878.3955 8597.8311 -7843.3955 8592.1357 -7810.3418 8601.6758 c-7795.6709 8605.9102 -7775.8994 8615.0459 -7760.5762 8616.2295 c-7746.3735 8617.3262 -7731.6104 8612.709 -7718.6709 8607.332 c-7710.7705 8604.0498 -7701.8672 8599.5811 -7693.0615 8600.2334 c-7683.5889 8600.9355 -7676.6816 8605.9443 -7666.4951 8603.9248 c-7657.4092 8602.125 -7649.7979 8598.9746 -7640.2197 8599.2559 c-7630.8652 8599.5313 -7622.4995 8604.0352 -7612.9155 8604.6553 c-7594.5449 8605.8438 -7577.1211 8599.1895 -7559.2031 8596.6797 C-7568.0469 8597.8271 -7578.5449 8594.9424 -7587.7852 8595.1553 c-7594.9961 8595.3232 -7602.25 8597.1436 -7609.2935 8597.0752 c-7627.2607 8596.9014 -7645.3438 8593.0996 -7663.1055 8595.584 c-7680.6191 8598.0332 -7692.4707 8587.5068 -7709.5479 8586.5996 c-7714.0264 8586.3613 -7717.9609 8587.1084 -7721.6924 8588.3203 cfU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe ArtOnPath Br) -(ush Tool/ Charcoal/ Adobe ArtOnPath Brush Tool/ Art Brush 2/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Art Brush 2)(1 / Unnamed Brush Pat 2/ / / / / 0 1 /  0 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Charcoal)(1 / Unnamed Brush Pat/ / / / / 5 0.137255 0.121569 0.12549 /  ) -(1 1 1.2 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 1 1 1 Xa(White)Pc0.74902 0.678431 0.670588 0.901961 0 0 0 Xa(Black)Pc0 0.992157 1 0 1 0 0 Xa(RGB Red)Pc0.062745 0 0.964706 0 1 1 0 Xa(RGB Yellow)Pc0.627451 0 1 0 0 1 0 Xa(RGB Green)Pc0.517647 0 0.12549 0 0 1 1 Xa(RGB Cyan)Pc0.882353 0.768627 0 0 0 0 1 Xa(RGB Blue)Pc0.270588 0.815686 0 0 1 0 1 Xa(RGB Magenta)Pc0.168627 0.980392 0.92549 0.066667 0.756863 0.152941 0.176471 Xa(R=193 G=39 B=45)Pc0.003922 0.992157 0.972549 0 0.929412 0.109804 0.141176 Xa(R=237 G=28 B=36)Pc0 0.796078 0.968627 0 0.945098 0.352941 0.141176 Xa(R=241 G=90 B=36)Pc0 0.501961 0.984314 0 0.968627 0.576471 0.117647 Xa(R=247 G=147 B=30)Pc0 0.34902 0.870588 0 0.984314 0.690196 0.231373 Xa(R=251 G=176 B=59)Pc0.047059 0 0.933333 0 0.988235 0.933333 0.129412 Xa(R=252 G=238 B=33)Pc0.188235 0 0.980392 0 0.85098 0.878431 0.129412 Xa(R=217 G=224 B=33)Pc0.501961 0 0.992157 0 0.54902 0.776471 0.247059 Xa(R=140 G=198 B=63)Pc0.745098 0 0.996078 0 0.223529 0.709804 0.290196 Xa(R=57 G=181 B=74)Pc0.862745 0.176471 1 0.039216 0 0.572549 0.270588 Xa(R=0 G=146 B=69)Pc0.901961 0.333333 0.988235 0.258824 0 0.407843 0.215686 Xa(R=0 G=104 B=55)Pc0.760784 0 0.74902 0 0.133333 0.709804 0.45098 Xa(R=34 G=181 B=115)Pc0.784314 0.090196 0.458824 0 0 0.662745 0.615686 Xa(R=0 G=169 B=157)Pc0.698039 0.14902 0 0 0.160784 0.670588 0.886275 Xa(R=41 G=171 B=226)Pc0.87451 0.52549 0 0 0 0.443137 0.737255 Xa(R=0 G=113 B=188)Pc0.992157 0.964706 0.035294 0.003922 0.180392 0.192157 0.572549 Xa(R=46 G=49 B=146)Pc1 1 0.262745 0.247059 0.105882 0.078431 0.392157 Xa(R=27 G=20 B=100)Pc0.745098 0.984314 0.007843 0.003922 0.4 0.176471 0.568627 Xa(R=102 G=45 B=145)Pc0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 Xa(R=147 G=39 B=143)Pc0.34902 1 0.372549 0.109804 0.619608 0 0.364706 Xa(R=158 G=0 B=93)Pc0.117647 1 0.494118 0.007843 0.831373 0.078431 0.352941 Xa(R=212 G=20 B=90)Pc0 0.968627 0.203922 0 0.929412 0.117647 0.47451 Xa(R=237 G=30 B=121)Pc0.227451 0.27451 0.4 0 0.780392 0.698039 0.6 Xa(R=199 G=178 B=153)Pc0.4 0.427451 0.52549 0.066667 0.6 0.52549 0.458824 Xa(R=153 G=134 B=117)Pc0.505882 0.529412 0.607843 0.235294 0.45098 0.388235 0.341176 Xa(R=115 G=99 B=87)Pc0.576471 0.603922 0.639216 0.419608 0.32549 0.278431 0.254902 Xa(R=83 G=71 B=65)Pc0.227451 0.384314 0.635294 0.011765 0.776471 0.611765 0.427451 Xa(R=198 G=156 B=109)Pc0.317647 0.490196 0.741176 0.098039 0.65098 0.486275 0.321569 Xa(R=166 G=124 B=82)Pc0.360784 0.572549 0.839216 0.227451 0.54902 0.384314 0.223529 Xa(R=140 G=98 B=57)Pc0.392157 0.639216 0.933333 0.356863 0.458824 0.298039 0.141176 Xa(R=117 G=76 B=36)Pc0.415686 0.698039 0.968627 0.490196 0.376471 0.219608 0.07451 Xa(R=96 G=56 B=19)Pc0.478431 0.733333 0.835294 0.682353 0.258824 0.129412 0.043137 Xa(R=66 G=33 B=11)PcBb2 (Linear Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 1)PcBb0 0 0 0 Bh2 (Radial Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 1)PcBb2 (Linear Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 2)PcBb0 0 0 0 Bh2 (Radial Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 2)Pc(Offset Squares Pattern) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Offset Squares Pattern)Pc0 g(K=100)Pc0.1 g(K=90)Pc0.2 g(K=80)Pc0.3 g(K=70)Pc0.4 g(K=60)Pc0.5 g(K=50)Pc0.6 g(K=40)Pc0.7 g(K=30)Pc0.8 g(K=20)Pc0.9 g(K=10)Pc0.95 g(R=241 G=241  B=242)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 Au1 Ap0 O0 J 0 j 1 w 4 M []0 d0 XR521.4766 77.6143 m34.4902 77.6143 L34.4902 723.8223 L521.4766 723.8223 L521.4766 77.6143 LBb0 0 0 0 Bh1 (Unnamed gradient 13) 423.6191 627.0122 -71.4049 269.4406 0.850914 0 0 0.9444 1047.9576 484.3754 Bg73.1096 -241.1757 -217.3016 -81.1418 229.4448 586.8467 Bmf0 BBu0 Ap0.623529 0.545098 0.533333 0.270588 0.356863 0.356863 0.356863 Xa213.0693 422.1738 m202.0317 417.5693 188.3491 412.5547 179.4087 399.6865 c167.7617 382.5645 172.9258 358.835 178.4893 341.9785 c190.3237 306.9463 208.8691 281.5215 224.8643 249.7646 c240.252 215.5791 247.0039 183.0303 247.4434 155.6006 c247.3555 141.8418 245.0205 128.7715 238.1943 118.0732 c231.5029 107.2686 220.4756 100.0166 209.5391 95.876 c225.5176 100.7148 239.9189 113.041 245.1973 128.6279 c250.9668 143.9619 250.6846 160.5322 248.9482 176.6748 c244.7168 209.0859 235.1338 241.4844 218.666 270.3975 c204.7827 296.4512 187.0791 332.9756 185.0815 360.1904 c183.6304 372.7236 184.4224 384.5723 190.6162 392.5781 c196.6401 400.8955 210.3877 405.1113 222.6035 410.7764 c230.1494 414.3115 237.8145 419.5176 243.2676 426.4927 c248.8545 433.437 251.4404 441.9873 252.3721 450.5264 c253.7402 468.9326 251.6211 484.1719 241.7695 502.0879 c232.8848 517.9521 225.124 531.4004 213.9336 546.4453 c208.1973 553.4468 201.7207 559.771 196.0815 566.7095 c193.2505 570.1563 190.4902 573.7407 188.4277 577.5781 c186.2744 581.4648 185.5508 585.584 188.4619 587.9111 c194.459 592.7622 204.2437 593.4883 212.8613 595.4097 c221.6895 597.2012 230.4805 599.2549 238.9395 602.1836 c255.8418 607.4805 272.0576 618.0015 276.8447 634.2002 c274.3008 626.4258 268.126 619.3169 260.0977 614.9917 c252.1279 610.5537 242.8623 608.2192 234.1064 606.0645 c220.3535 602.2725 206.5098 600.7158 191.8711 596.1333 c187.7539 594.6152 181.1797 591.1611 181.21 583.8677 c181.645 577.5264 185.0249 573.5762 187.8574 569.8364 c193.8794 562.4995 200.7012 556.4731 206.7383 550.1274 c218.2109 537.874 225.2861 521.3574 233.5088 505.7451 c241.9043 490.2676 246.2969 476.3247 246.3447 462.6846 c246.4111 448.9214 242.001 438.0161 231.5479 431.248 c225.8838 427.4224 219.9141 424.897 213.0693 422.1738 CfUu244.3193 242.0713 m249.7793 232.626 255.4248 224.7383 260.7617 215.6699 c265.7295 207.209 269.8564 198.6123 273.582 189.4414 c276.3477 182.4883 279.5381 177.0166 281.875 170.3027 c284.1621 163.6406 284.6191 157.3262 285.3066 150.3174 c285.543 147.333 285.7783 144.1885 285.6387 141.2305 c285.6738 131.7305 282.0342 122.1914 275.7422 114.2432 c273.0674 110.6387 268.875 107.0615 265.7822 104.1914 c273.3027 109.9902 280.167 117.9785 283.874 126.7461 c288.3271 137.6064 286.3086 148.8496 285.4443 159.4404 c285.0889 163.5469 285.2939 167.0859 284.3369 171.2754 c283.1436 176.5459 280.209 182.6533 277.9736 187.1113 c270.1572 203.2236 258.3369 220.7969 249.3174 237.0459 c242.5996 249.3711 216.915 294.9355 212.0244 308.0674 c211.3926 306.8018 221.874 283.0596 220.8994 282.5146 c224.8193 277.5273 239.9512 249.3975 244.3193 242.0713 CBb1 (Unnamed gradient 109) 211.9971 206.1299 0 74.6592 1 0 0 1 0 0 Bg74.6592 0 0 -207.876 211.9971 310.0674 Xm8123.6016 0 0 -207.876 -7911.6045 310.0674 Bc74.6592 0 0 -207.876 211.9971 310.0674 Bm8123.6016 0 0 -207.876 286.6563 310.0674 Bcf0 BB257.2383 178.1025 m256.2842 187.8652 254.7021 201.2158 251.8486 211.1162 c249.2637 220.3096 245.0244 229.3242 240.9844 237.04 c238.5146 241.7539 235.5137 246.959 233.5215 252.4766 c231.375 258.4141 230.6689 263.0918 227.7295 269.2314 c225.1064 274.709 222.5615 279.1465 220.2021 285.0762 c217.8955 290.8721 216.6787 296.3994 214.415 302.3691 c210.1563 313.8486 204.4219 324.0244 200.7319 335.5508 c202.4434 329.8408 204.2153 323.0264 206.4238 317.2471 c208.1396 312.7363 210.2832 308.376 212.0088 304.0068 c216.4248 292.8623 220.3018 281.4268 225.2246 270.6563 c230.0732 260.0273 230.9004 251.8652 234.71 241.1914 c235.7021 238.3867 236.7461 235.9902 237.8496 233.7539 c239.6611 229.9893 241.627 226.6748 243.5049 222.585 c245.9316 217.3271 248.7266 210.54 250.4746 204.6973 c254.041 192.8906 255.3867 182.8545 256.8262 170.9414 c258.6816 154.7021 259.4043 141.4648 257.7383 130.5381 C257.9365 130.5732 258.1396 130.6064 258.3418 130.6348 C261.1523 145.7588 258.6045 162.4287 257.2383 178.1025 cBb1 (Unnamed gradient 109) 200.7319 233.0439 0 58.877 1 0 0 1 0 0 Bg58.877 0 0 -209.0127 200.7319 337.5508 Xm8111.7324 0 0 -209.0127 -7911.0005 337.5508 Bc58.877 0 0 -209.0127 200.7319 337.5508 Bm8111.7324 0 0 -209.0127 259.6089 337.5508 Bcf0 BB274.3564 628.3071 m262.4111 614.6152 249.8564 603.5674 233.5771 596.2012 c232.2939 595.6196 230.9922 595.0776 229.6777 594.5762 c227.3525 593.6885 224.9844 592.9297 222.5811 592.2939 c221.3789 591.9771 220.1592 591.6431 218.9336 591.4351 c217.8311 591.2476 216.6787 591.228 215.5889 590.9531 c214.75 590.7402 213.9414 590.6426 213.0742 590.5781 c211.7412 590.4775 210.3965 590.3882 209.0664 590.2656 c208.0391 590.1704 207.1309 589.9595 206.1123 590.1943 C206.083 589.7876 206.5889 589.3936 206.8223 589.085 c207.6025 588.0537 208.6133 587.2583 209.3389 586.1841 c212.6963 580.9189 l214.8428 577.3828 217.0967 573.6675 219.9414 570.4883 C223.9287 565.3955 228.1572 561.2749 231.7637 556.7466 c235.2871 552.0674 238.8115 547.8057 242.6396 542.9585 C249.1611 532.6899 251.1572 521.5498 261.4277 514.6221 C265.252 511.5059 270.1299 508.8457 274.6201 508.8525 c276.8389 508.8584 278.9424 509.8516 280.5469 511.3496 c281.0029 511.7744 284.04 515.5835 282.9307 516.2607 c282.5537 516.4888 282.3291 515.7676 282.2266 515.5581 c281.1982 513.4609 280.1631 511.6387 277.9668 510.5684 c276.082 509.6494 273.7734 509.5249 271.7715 510.1045 c263.8965 512.3823 256.5439 518.8794 252.3525 526.3369 c249.166 532.04 248.6016 538.1826 244.3496 544.8027 C238.9971 552.0503 232.4492 561.4873 226.3047 567.4902 c223.8047 570.2578 221.1299 573.2051 218.708 575.9658 C217.917 577.0571 217.1455 578.1621 216.3799 579.2705 c215.0703 581.1611 213.7588 583.0488 212.5244 584.9824 c212.0654 585.7031 211.4512 586.3628 210.9512 587.0654 c210.5723 587.5952 209.8447 588.7705 209.1211 588.8613 C210.2734 588.7173 211.54 588.9395 212.6934 589.0679 c217.3369 589.5903 221.9746 590.8008 226.3701 592.3696 c242.332 597.8975 256.3691 607.9155 267.7852 618.7876 c272.084 622.9429 276.1094 627.375 279.79 632.0728 c283.5566 636.6807 286.7891 641.8745 286.9512 647.8281 C287.9287 658.1611 276.3447 664.1997 269.1348 668.8096 c266.8965 670.2417 263.6641 672.6279 263.7969 675.6631 C262.6592 675.6602 261.3564 675.7441 260.3965 676.3701 C261.1533 671.8652 263.4238 667.9121 266.9102 664.9053 c269.4668 662.7007 272.9561 661.6401 275.9893 660.2373 c279.2832 658.7158 282.585 657.0391 284.1689 653.5293 c288.6768 643.5537 278.5195 633.4307 274.3564 628.3071 cBb1 (Unnamed gradient 66) 248.8916 603.7026 -81.87 86.8175 1 0 0 1 0 0 Bg12.2777 -85.9449 -93.7407 -13.3913 296.752 610.5396 Xm1163.9098 -8147.4873 -93.7407 -13.3913 -867.1577 8758.0273 Bc12.2777 -85.9449 -93.7407 -13.3913 296.752 610.5396 Bm1163.9098 -8147.4873 -93.7407 -13.3913 309.0293 524.5947 Bcf0 BB251.2842 497.9766 m257.374 489.459 268.2881 490.2231 275.5869 493.311 c279.2266 494.7305 283.001 496.4438 285.373 499.7886 c287.8076 503.1504 287.7168 507.5562 286.8125 511.3931 c286.1641 513.5254 l283.8223 512.9536 285.2969 512.1924 284.6973 511.541 C284.4512 510.2041 284.1846 508.8779 283.75 507.6162 c282.9531 505.083 281.6221 502.5386 279.1875 500.7388 c274.0566 497.1406 268.1074 498.8301 263.0674 500.9556 c260.8232 501.9082 258.6436 503.2231 256.6543 504.5591 c254.0439 506.353 251.751 508.5791 249.8311 511.0952 c248.0723 513.3979 247.0469 516.0684 245.3369 518.3164 C245.8467 516.2583 246.7549 514.231 247.8721 512.4341 c252.8213 504.478 261.1211 499.874 269.9746 497.7964 c273.3838 497.064 277.0146 496.6646 280.7822 498.8525 c285.6895 501.7656 287.4648 508.2378 287.8057 512.2495 c287.9043 512.9512 287.9092 512.9829 V278.8584 512.3599 285.4014 512.8057 283.3828 512.6646 c283.3965 512.6279 l283.4258 512.5581 l283.4844 512.4185 l283.5986 512.1362 l284.0684 510.9932 l284.3369 510.2246 284.6191 509.4341 284.8115 508.6377 c285.2461 507.0337 285.376 505.3862 285.1514 503.7539 c284.7686 500.4453 282.0498 497.5503 278.6895 495.752 c272.1494 492.2437 263.0498 490.3838 256.6016 495.1426 c247.4102 502.7915 246.5566 515.1851 245.0361 525.7681 C244.168 524.8652 243.0342 525.0635 242.0322 524.7759 C244.5186 520.6162 245.9287 504.0308 251.2842 497.9766 CBb0 0 0 0 Bh1 (Unnamed gradient 74) 263.1519 521.6221 -78.9968 36.0419 1 0 0 1 0 0 Bg6.8791 -35.3793 -35.3793 -6.8791 263.1519 521.6221 Bmf0 BB247.7666 534.583 m250.9092 526.416 252.1113 516.876 259.4121 511.2212 c265.0801 506.8296 273.8574 503.2666 280.1182 508.6504 c281.999 510.2695 283.1211 512.4087 283.2939 514.8735 C283.8809 505.3765 272.7559 502.709 265.3115 504.7881 c260.3369 506.1782 255.7695 509.1895 253.1318 513.7026 c251.127 517.1299 250.4795 520.9531 249.9346 524.8203 c249.4473 528.2759 248.293 531.4688 247.0674 534.7217 c247.7666 534.583 lBb0 0 0 0 Bh1 (Unnamed gradient 74) 263.1509 521.6221 -78.9968 36.0419 1 0 0 1 0 0 Bg6.87911 -35.3794 -35.3794 -6.87911 263.1509 521.6221 Bmf0 BB361.6426 192.2607 m360.2891 208.4775 359.8604 226.2324 351.21 241.7979 c347.0342 249.4814 341.1436 256.3428 334.0166 261.5088 c326.8945 266.8447 318.7607 270.043 311.0967 273.6553 c300.626 278.4795 290.499 283.3398 282.249 290.6387 c273.8867 297.7715 268.5586 308.2002 267.3018 319.4072 c265.5586 330.5811 268.2246 342.46 273.6836 352.916 c279.0352 363.4912 286.4609 373.0127 292.75 383.5459 c299.0342 394.2041 303.4443 403.96 301.9941 413.2783 c300.917 422.6445 297.1094 430.9194 294.2178 439.1602 c291.3262 447.3579 288.6699 455.958 289.8516 464.9297 C290.4902 475.229 306.1172 473.5288 308.5439 486.4448 c310.9561 496.6631 302.2637 505.4717 294.5986 509.5684 c283.3315 516.4106 277.8115 531.5547 281.5356 544.3618 C280.1064 539.4468 277.6563 535.3047 277.395 529.9556 c276.896 519.7495 282.0835 508.4395 291.9053 504.457 c298.29 501.8672 302.1992 497.584 303.9668 490.9023 c305.2246 486.1431 301.5986 483.0508 297.626 481.3213 c293.2012 479.3931 289.4521 477.3652 286.5889 473.1768 c283.4814 468.4121 283.5713 463.2031 283.8516 459.5615 c284.0967 455.5601 284.9189 451.7285 285.9912 448.1167 c288.1543 440.8872 291.2041 434.3926 293.7461 428.1333 C308.4893 403.0371 286.6436 382.373 271.9736 358.1104 c264.3838 345.9209 259.9014 329.9678 262.668 315.3525 C264.2402 300.4346 274.6035 287.1055 285.8838 279.8057 c301.4395 268.6582 320.1816 264.416 333.0605 253.8369 c346.4375 243.1582 352.8691 225.835 354.7178 208.043 c355.5967 200.5459 356.3545 192.9463 357.2695 185.3145 C359.4082 181.9375 361.2666 178.5605 363.3184 175.1836 C362.6465 180.8496 362.1289 186.5547 361.6426 192.2607 cBb1 (Unnamed gradient 109) 261.8447 359.7725 0 101.4736 1 0 0 1 0 0 Bg101.4736 0 0 -373.1782 261.8447 546.3618 Xm8174.7886 0 0 -373.1782 -7912.9438 546.3618 Bc101.4736 0 0 -373.1782 261.8447 546.3618 Bm8174.7886 0 0 -373.1782 363.3184 546.3618 Bcf0 BB396.334 113.3125 m393.3232 114.1523 389.3779 115.1611 386.7529 116.8828 c384.6094 118.2881 382.624 120.667 380.9414 122.6064 c377.3984 126.6904 374.6846 131.4014 372.5166 136.375 C368.292 140.4619 366.7598 146.2363 363.4854 150.9785 C365.835 142.5313 368.9297 134.1309 373.874 126.541 c375.9619 123.333 378.4141 120.3721 381.4561 118.0225 c382.708 117.0576 383.873 115.9541 385.2969 115.3154 c386.8789 114.6094 388.7568 114.4658 390.1582 113.3564 C385.9512 113.1504 381.7549 113.7002 377.5508 113.7598 c373.8086 113.8135 370.1279 114.1172 366.5078 115.1611 c362.5381 116.3066 358.7676 119.3447 355.8018 122.125 c353.1084 124.6533 351.5752 127.8447 349.418 130.7744 c346.3174 134.9775 341.7393 136.1006 336.6807 135.6045 c320.4492 134.0088 310.4346 120.8848 296.5986 114.1816 c288.1328 110.0811 278.7139 107.6621 269.4502 106.2109 c266.6094 105.7646 263.7217 105.1016 260.8281 105.2979 c259.373 105.3955 258.1406 105.7959 256.8037 106.3389 c256.2061 106.582 253.9795 108.2188 253.6357 108.1836 C258.4326 108.6553 263.2686 113.084 266.0439 116.6953 c269.2256 120.8359 269.8262 126.5781 266.4717 130.8232 c263.9209 134.0479 259.2012 134.8906 255.3213 135.2246 c255.2764 135.2285 255.2344 135.2334 255.1895 135.2354 c246.6035 135.9375 239.1396 132.7822 231.6689 128.9482 c222.0283 124.002 211.875 121.2813 201.1245 120.0127 c196.543 119.4717 191.8535 119.0439 187.2344 119.2822 c184.0317 119.4492 180.7554 120.4219 177.6045 121.0762 c175.1367 121.5869 172.0977 122.0713 169.9263 123.4824 C174.3755 123.8047 178.6299 123.9209 182.999 125.0371 c185.6401 125.7119 188.3589 126.3955 190.7524 127.7412 c193.1265 129.0752 195.2363 130.9922 197.3726 132.6748 c208.9893 141.8213 219.7695 155.0869 223.8818 169.8428 c232.6182 199.7471 224.8145 229.2041 217.25 257.0488 c213.416 271.0322 209.3848 285.6133 201.7349 298.584 c194.6455 311.7607 186.459 324.5186 179.6768 338.3789 c169.5059 358.2393 163.8555 382.1299 175.0923 400.4971 c180.3418 409.5654 189.7017 414.9854 199.522 417.2393 c204.4473 418.5693 209.4434 418.7119 214.7744 420.1367 c220.0039 421.5264 224.8662 424.5254 228.6416 428.5283 C242.7822 445.687 243.084 470.3066 235.582 491.1035 c228.3096 512.3457 214.8535 531.293 203.3574 552.3579 c198.0576 562.4951 191.8398 570.6899 186.1152 578.8389 c183.2534 582.8306 180.8711 587.3535 180.4995 591.541 c179.9502 595.7061 183.0801 598.5078 187.5737 600.165 C206.374 604.6514 225.252 607.6558 242.9863 616.7769 c252.0039 621.7651 259.5498 627.7969 267.1279 634.1548 c270.8262 637.4507 274.4717 640.7007 277.5322 645.2319 C278.9688 647.0752 280.7607 651.8203 278.1914 655.0981 c276.0439 658.0283 273.5137 659.1406 271.292 660.3296 C266.4033 662.4854 263.6318 663.9902 260.9189 667.5952 c258.416 670.9165 253.791 677.4629 256.4717 681.752 C247.7871 677.1987 238.2969 680.7446 229.2666 681.6406 C228.5566 678.3682 235.1318 676.9233 237.0674 676.6577 c239.5322 676.3169 242.0469 676.0947 244.5264 675.8755 c246.8535 675.6699 248.9717 676.4497 251.1396 676.4468 c252.3213 676.4468 251.9795 676.8296 252.5488 675.4072 c253.2236 673.7266 253.1357 671.7773 253.8125 670.0547 c255.7646 665.0771 259.1426 661.4653 263.3467 658.3018 c265.917 656.3682 269.0391 655.1821 271.5615 653.1572 c275.5986 649.916 271.1436 645.7896 268.7236 642.9253 c261.9258 635.4136 253.8564 628.6816 245.5615 622.5854 c237.1426 616.8174 227.2139 612.9595 217.1514 609.6147 c212.0703 608.0049 206.9902 606.2695 201.6763 605.0332 c196.3809 603.8174 192.9072 604.041 187.7808 602.1436 c182.6343 600.5732 177.8042 596.4541 178.9541 590.8857 C179.6416 585.5508 182.8721 580.5557 186.3037 575.9531 c189.832 571.3145 191.9053 565.9111 195.7002 560.9927 c199.6851 556.1221 202.354 550.2017 205.3999 544.7412 c211.5244 533.5898 218.5566 522.2246 224.6807 509.6113 c231.5264 495.752 236.0234 482.0967 236.6738 468.9961 c236.876 456.1313 233.8975 443.292 226.9639 434.3286 c223.4355 429.9316 218.7773 426.958 213.5107 425.667 c208.6406 424.5493 201.4194 424.4292 194.8423 422.499 C181.1299 419.7217 167.21 407.3682 163.2363 391.0205 c158.1978 372.5264 163.7183 354.1338 170.3901 339.2119 c177.2217 323.9785 185.7324 310.5518 192.9575 297.2461 c200.7749 284.002 204.7222 271.1719 208.7705 256.1758 c212.8721 241.8213 216.5576 227.709 218.457 213.6279 c220.5801 197.9932 220.3994 182.4795 215.2617 168.2783 c210.6875 155.6387 202.0718 145.8701 191.9473 137.2881 c189.8403 135.5039 187.1714 133.7236 184.8047 132.2988 c181.4146 130.2617 177.7524 128.7549 173.9995 127.5439 c168.1128 125.6426 161.4492 124.2588 155.2329 125.3994 C158.6982 122.5352 163.1328 120.2637 167.125 118.2773 c172.9961 115.3555 179.5342 114.7529 185.999 115.1211 c192.9614 115.5137 199.9312 115.3418 206.8965 115.917 c216.2041 116.7852 225.2607 117.9443 234.3721 121.8936 c238.4717 123.4355 242.6494 125.041 247.0703 126.2734 c249.9092 127.0645 252.7393 127.2627 255.6172 127.7461 c257.667 128.0918 259.4111 128.0674 260.9619 126.3438 c263.0049 124.0762 262.3975 120.7676 261.1523 118.2754 c259.5908 115.1455 257.2617 112.6836 253.9873 111.4082 c251.0469 110.2588 247.2979 108.9785 244.0869 109.2646 C244.8457 109.1982 247.1484 106.4785 247.9912 105.9385 c249.4258 105.0176 250.9648 104.3379 252.5322 103.6826 c256.2188 102.1445 259.9463 101.957 263.9033 102.0283 c272.3018 102.1748 280.7949 103.4004 288.9072 105.5625 c295.8418 107.4121 302.333 110.21 308.4893 113.8828 c312.8994 116.5156 317.2041 119.2842 321.8838 121.4277 c328.6777 124.541 336.1328 127.1689 343.5977 125.0723 c349.8428 123.3174 353.8633 119.4297 358.7852 115.585 c366.6143 109.4746 378.0244 110.4023 387.3115 110.7471 c391.2578 110.8955 395.1611 112.4629 399.0234 112.5068 C398.1797 112.9355 397.2393 113.0586 396.334 113.3125 cBb1 (Unnamed gradient 109) 155.2329 391.8838 0 243.7905 1 0 0 1 0 0 Bg243.7905 0 0 -583.7949 155.2329 683.752 Xm8066.2324 0 0 -583.7949 -7910.9995 683.752 Bc243.7905 0 0 -583.7949 155.2329 683.752 Bm8066.2324 0 0 -583.7949 399.0234 683.752 Bcf0 BB219.333 414.7988 m218.5039 414.0947 217.7061 413.5713 217.1338 413.8643 C214.8887 404.7568 217.4385 395.0391 223.2266 387.958 c229.0762 380.7383 238.6309 377.3721 248.0391 377.2705 c252.3398 377.2256 256.6973 378.1758 260.7373 379.5898 c264.7822 381.0029 268.6025 383.0479 272.165 385.415 c274.124 386.7158 275.9844 388.167 277.7656 389.7061 c278.1025 389.9951 278.8037 390.3604 278.7813 390.8662 C278.1318 390.7041 277.3809 389.8115 276.8545 389.4053 c276.0088 388.7559 275.1514 388.1221 274.2793 387.5078 c272.6035 386.3242 270.874 385.2295 269.1104 384.1826 c258.3145 377.7803 245.3799 376.0098 233.7891 381.3262 c228.2959 383.6514 222.9316 389.0107 220.3564 395.585 c217.6416 402.1182 217.6865 409.3877 219.333 414.7988 CBb1 (Unnamed gradient 47) 283.0039 221.415 101.3803 182.5834 1 0 0 1 0 0 Bg-36.0275 178.9937 62.6393 12.6079 251.0464 214.9824 Xm-1585.6382 7877.8491 62.6393 12.6079 1836.6846 -7662.8662 Bc-36.0275 178.9937 62.6393 12.6079 251.0464 214.9824 Bm-1585.6382 7877.8491 62.6393 12.6079 215.019 393.9756 Bcf0 BB261.4277 356.2148 m257.4678 351.3662 255.5225 345.2178 252.917 339.4756 c250.5107 334.1729 248.2666 328.7939 246.2266 323.3408 c245.0654 320.2334 243.9736 317.1016 242.957 313.9443 c240.2773 305.6182 237.8887 296.9805 238.2344 288.1533 c238.3916 284.1055 239.1045 279.9443 239.7109 275.9424 c243.2197 249.8652 262.5615 229.9326 282.1641 214.2041 c302.209 198.167 324.6592 185.2832 345.8604 170.0977 c351.2539 166.4268 356.1973 162.0293 359.4785 156.2998 c362.8838 150.7119 365.2607 144.4785 369.0654 139.0127 c376.5098 127.4209 390.2627 123.1563 402.1523 117.4727 c413.1377 111.9336 424.9619 107.7686 437.2852 106.8242 c438.9785 106.6943 441.7979 105.7979 443.2275 107.082 c445.9629 109.5439 440.2734 113.1533 438.9053 114.4365 c435.9307 117.2227 433.1279 120.1855 430.1807 122.9971 c421.5977 132.0566 409.7383 136.6523 398.3066 140.7773 c386.3867 144.3945 377.1846 153.2607 370.665 163.5928 c357.1523 183.9766 346.7217 206.4717 331.2637 225.5684 c316.082 244.5498 294.7842 260.4287 270.5537 266.3125 C297.5996 259.8604 319.4502 238.9561 335.7402 216.335 c344.0811 204.9648 351.5059 193.0156 358.8311 181.2393 c361.7881 176.7109 364.5459 172.0566 367.4541 167.4941 c368.8809 165.2549 370.3408 163.0332 371.8838 160.8682 c373.2559 158.9443 374.1074 156.8037 375.4199 154.8223 c376.96 152.5 378.8281 150.3877 380.8496 148.4775 c390.1133 139.7324 402.1973 137.0176 413.7803 132.665 c419.6797 130.4473 424.6885 127.1836 429.249 122.8779 c431.5264 120.7295 433.6211 118.3682 435.9336 116.2598 c436.9414 115.3447 439.6094 110.7627 440.8574 110.7402 C437.0488 110.8086 433.459 111.623 429.751 112.498 c416.9463 115.5166 403.2451 118.0928 391.5723 124.3857 c385.9453 127.4209 380.0898 130.502 375.3691 134.8711 c372.3496 137.668 369.2549 140.5537 366.9883 144.0176 c364.7334 147.4648 363.2568 151.7363 361.2422 155.3994 c357.084 163.7637 349.1348 169.2813 341.7529 174.3789 c327.4102 184.4121 311.0928 194.4443 294.9951 206.1104 c279.0313 217.7842 262.7979 231.166 251.7725 248.4219 c240.5117 265.5313 237.9199 287.3037 244.1709 305.6182 c245.5195 309.6045 246.876 313.5889 248.2383 317.5723 c251.792 327.9717 255.3252 338.4727 259.7139 348.5498 c261.1963 351.9541 263.0938 355.6055 264.1895 359.0615 C263.167 358.1787 262.2549 357.2266 261.4277 356.2148 cBb1 (Unnamed gradient 66) 201.4697 598.7471 -71.024 257.0028 1 0 0 1 0 0 Bg83.5703 -243.0359 -141.9396 -48.8073 271.5718 622.8525 Xm2557.6165 -7437.9663 -141.9396 -48.8073 -2286.0449 8060.8188 Bc83.5703 -243.0359 -141.9396 -48.8073 271.5718 622.8525 Bm2557.6165 -7437.9663 -141.9396 -48.8073 355.1416 379.8164 Bcf0 BB327.3281 394.4355 m327.3604 394.3643 327.3916 394.3076 327.4209 394.2891 C327.4092 394.3096 327.375 394.3652 327.3281 394.4355 CBb1 (Unnamed gradient 47) 327.3135 394.54 -71.024 0.297421 1 0 0 1 0 0 Bg0.096713 -0.281257 -3.82048 -1.31371 329.2246 395.1973 Xm2678.8391 -7790.5015 -3.82048 -1.31371 -2349.6143 8185.6987 Bc0.096713 -0.281257 -3.82048 -1.31371 329.2246 395.1973 Bm2678.8391 -7790.5015 -3.82048 -1.31371 329.3213 394.916 Bcf0 BB397.3906 481.9526 m393.5127 490.8242 384.209 495.5957 376.1123 501.5059 C367.585 507.085 358.418 512.3809 349.0986 517.2725 c339.7627 522.124 330.2852 526.6147 320.9453 530.1523 c320.5654 530.2964 320.1846 530.4297 319.8047 530.5693 C319.6045 530.0269 319.4316 529.4707 319.2666 528.9111 C324.4609 526.9404 329.5449 524.6826 334.4951 522.5654 c346.2422 517.2363 357.7178 511.2129 368.875 504.4961 c374.4434 501.1191 379.9473 497.5811 385.209 493.6602 c390.3701 489.7339 395.9102 485.4878 397.3438 478.7627 C399.6162 472.4795 397.5547 465.0752 392.1465 460.9043 C386.96 456.6133 380.5029 454.0732 374.0137 452.0195 c362.0352 448.2607 349.6191 446.3281 337.4561 443.4106 c331.4678 441.8247 323.9912 440.2725 318.9688 436.3154 C314.3613 432.0161 310.4824 423.2598 308.5313 417.2988 C306.3994 411.6553 308.7822 406.8604 315.25 404.1357 C318.0342 402.6279 321.1318 401.8662 323.6523 400.1436 C324.6826 399.4893 325.5518 398.6064 326.2197 397.5879 c326.5371 397.1055 326.7881 396.4883 326.9248 395.9326 c326.9785 395.7168 327.1641 394.7979 327.3281 394.4355 C327.375 394.3652 327.4092 394.3096 327.4209 394.2891 C327.3916 394.3076 327.3604 394.3643 327.3281 394.4355 C326.8096 395.2109 323.9277 398.7383 314.1162 398.9365 c307.8486 399.0635 300.1689 396.1836 294.5088 393.2119 c300.7949 396.4697 307.7266 397.9561 314.8848 397.8379 c318.4463 397.6855 322.1748 397.1758 325.3066 395.2168 c325.9736 394.7998 326.4561 394.3037 327.0254 393.792 c327.6182 393.2568 328.2734 392.7588 328.5361 391.9707 C328.5752 392.8779 328.2627 393.8975 327.8809 394.7109 c327.6406 395.2217 327.4277 395.7266 327.2129 396.2471 c326.5771 397.79 325.4883 399.0742 324.2051 400.1123 c321.9785 401.9131 319.2891 402.9502 316.8008 404.3223 c314.3193 405.6875 312.083 407.6318 311.249 410.4365 c309.209 417.2832 311.6279 423.916 315.0166 429.4883 C319.4443 437.9644 328.7012 440.7212 337.335 442.6353 c346.0537 444.6895 354.8662 446.2222 363.6035 448.2886 c372.2939 450.4141 381.165 452.6802 389.1172 457.4883 c392.9844 459.9141 396.792 463.2183 398.3896 467.8877 c400.1514 472.5088 399.1895 477.6143 397.3906 481.9526 cBb1 (Unnamed gradient 47) 287.7344 606.9697 -71.024 235.7362 1 0 0 1 0 0 Bg76.6549 -222.925 -123.3488 -42.4147 349.5195 628.2148 Xm2639.1189 -7674.9888 -123.3488 -42.4147 -2289.5996 8303.2031 Bc76.6549 -222.925 -123.3488 -42.4147 349.5195 628.2148 Bm2639.1189 -7674.9888 -123.3488 -42.4147 426.1748 405.29 Bcf0 BB299.2363 423.9014 m299.0352 423.46 298.8447 423.0225 298.667 422.5908 c298.8506 423.0371 299.0469 423.4629 299.2363 423.9014 cBb1 (Unnamed gradient 109) 298.667 423.2461 0 0.569336 1 0 0 1 0 0 Bg0.569336 0 0 -5.31055 298.667 425.9014 Xm8209.667 0 0 -5.31055 -7911 425.9014 Bc0.569336 0 0 -5.31055 298.667 425.9014 Bm8209.667 0 0 -5.31055 299.2363 425.9014 Bcf0 BB382.4385 474.7065 m382.4141 474.7373 L382.3701 474.7959 L381.6455 475.7432 L381.1445 476.3564 380.7266 477.0483 380.1387 477.5889 C375.8086 482.3218 369.9395 485.25 363.9492 487.314 c352.9639 491.1753 339.3594 492.6758 326.4209 496.0522 C325.6904 495.7119 324.9795 495.334 324.2773 494.938 C329.835 493.1753 333.3457 492.7188 339.4922 491.5605 c348.1621 489.9492 356.9844 488.541 365.4209 485.4404 c369.6084 483.8726 373.6953 481.8159 377.1563 478.873 c378.7178 477.6211 380.7822 475.2139 381.2998 474.2749 C374.4863 472.9961 L357.8916 469.6919 341.0889 465.6777 326.5742 456.7153 c316.5938 450.7563 306.2412 440.1602 299.2363 423.9014 c305.1572 436.9272 320.873 454.0957 332.8037 459.4556 C343.8291 465.0264 355.6055 467.9902 367.3896 470.5332 c370.3545 471.1157 373.3193 471.7178 376.3096 472.2529 C380.8008 473.0566 L381.3623 473.1558 L381.6436 473.207 L381.7842 473.2324 L381.8008 473.2354 L382.082 473.8906 381.1963 471.771 382.4385 474.7065 CBb1 (Unnamed gradient 109) 299.2363 459.9766 0 83.2021 1 0 0 1 0 0 Bg83.2021 0 0 -76.1509 299.2363 498.0522 Xm8210.2363 0 0 -76.1509 -7911 498.0522 Bc83.2021 0 0 -76.1509 299.2363 498.0522 Bm8210.2363 0 0 -76.1509 382.4385 498.0522 Bcf0 BB222.7793 518.1235 m223.4639 516.4385 229.9736 504.7852 230.6543 503.1001 c231.7646 500.3506 232.3809 497.3955 233.4346 494.6147 c233.9473 493.2593 234.2549 491.8413 234.7568 490.4731 c236.2979 486.2813 237.2109 482.8218 240.3311 479.4209 c243.0645 476.4404 246.4922 474.3726 250.3789 473.2617 c252.4873 472.6597 254.5879 472.5381 256.7656 472.5127 c265.3428 472.418 274.7148 476.5186 278.7559 484.9082 C277.7666 482.7632 276.0928 480.9927 274.1943 479.6304 c267.5391 474.8633 258.0557 472.71 250.7422 477.085 c248.209 478.5996 246.166 481.0933 244.082 483.1655 c240.5469 486.6782 224.9551 516.7432 222.7793 518.1235 CBb1 (Unnamed gradient 109) 222.7793 495.3174 0 55.9766 1 0 0 1 0 0 Bg55.9766 0 0 -49.7056 222.7793 520.1235 Xm8133.7793 0 0 -49.7056 -7911 520.1235 Bc55.9766 0 0 -49.7056 222.7793 520.1235 Bm8133.7793 0 0 -49.7056 278.7559 520.1235 Bcf0 BB252.3643 413.6699 m252.084 414.2012 251.792 414.7471 251.5566 415.333 c250.3418 414.1904 249.4824 413.1377 248.7344 411.8604 c248.1338 410.6865 247.3389 409.5674 247.1016 408.2236 c247.2686 408.9541 247.9971 409.5889 248.4316 410.1436 c249.1563 410.8291 249.5771 411.5166 250.207 412.0742 c250.6631 412.8252 251.9248 412.8359 252.3643 413.6699 CBb1 (Unnamed gradient 109) 186.7061 594.2393 -71.024 258.5775 1 0 0 1 0 0 Bg84.0823 -244.525 -10.1635 -3.49481 191.7876 595.9868 Xm2571.28 -7477.7026 -10.1635 -3.49481 -2379.4922 8073.6895 Bc84.0823 -244.525 -10.1635 -3.49481 191.7876 595.9868 Bm2571.28 -7477.7026 -10.1635 -3.49481 275.8701 351.4619 Bcf0 BB226.6416 351.9678 m234.6572 353.0654 241.4395 355.7676 248.9502 359.4404 c258.6846 364.1006 269.8076 372.1455 277.1592 380.6494 c280.8564 384.9541 283.8682 389.4893 286.0752 394.2969 c286.9346 396.3721 287.8994 398.4131 288.3916 400.627 c288.5986 401.5498 288.9844 402.9531 288.8037 403.876 C287.9111 402.668 287.2471 401.249 286.2871 400.0625 c284.9189 398.373 283.4561 396.7383 282.0498 395.0752 c280.6787 393.458 279.249 391.8994 277.7539 390.3955 c274.6982 387.3213 271.3711 384.5176 267.8545 381.9844 c265.8242 380.5205 263.7158 379.1963 261.5889 377.8779 c241.6738 365.5303 218.3223 366.373 206.5068 379.2686 c194.4624 391.7744 193.7456 409.1162 197.5977 421.6094 C191.1045 403.833 197.5391 379.5752 216.5586 371.3037 c235.4072 363.1172 257.417 371.6611 272.7871 384.1787 c274.9141 385.9111 277.001 387.6689 278.9736 389.5771 c280.7217 391.2666 282.6162 392.8008 283.915 394.8721 C283.0488 393.4893 282.3193 392.0303 281.4248 390.6592 c280.4941 389.2305 279.4873 387.8516 278.4219 386.5205 c276.3447 383.9287 274.043 381.5166 271.6045 379.2627 c270.2959 378.0557 268.9473 376.8936 267.5684 375.7705 c254.5635 365.4004 238.1865 357.3252 222.7021 355.8213 c213.4053 354.665 201.7979 358.7744 195.6528 368.1211 c192.2573 372.8994 190.3643 377.626 188.5923 382.415 c187.7246 384.8232 186.8823 387.2676 186.02 389.8525 c185.6958 390.8262 185.3594 391.7979 185.0322 392.7666 c184.894 393.1777 184.6938 393.6084 184.6436 394.042 c184.5864 394.5244 184.7637 395.0059 184.7026 395.4873 C184.7222 395.3193 183.7451 395.2178 183.6421 395.2012 c183.2339 395.126 182.9668 395.0381 182.8062 394.6279 c182.5449 393.9482 182.4932 393.0762 182.3286 392.3564 C180.5972 381.082 183.9243 371.6211 189.73 361.7178 c195.6177 352.3447 203.5249 343.8623 215.7422 342.2432 c227.4189 340.8242 238.1738 346.2041 246.8809 352.4854 c255.7549 358.9053 263.3096 366.6719 271.2344 374.2939 C263.4043 366.7764 253.5801 358.4287 244.1357 352.4697 c236.8594 347.833 228.7285 343.8438 220.2344 343.6621 c209.3379 343.2441 199.3442 349.6074 193.1123 358.2881 c186.7661 366.8916 182.9756 377.5244 183.4644 388.0332 C183.5903 389.0059 183.8418 389.9404 183.8892 390.9199 C183.8643 390.415 184.187 389.7354 184.2793 389.2363 c184.4077 388.5439 184.7124 387.8564 184.9346 387.1904 c186.4575 382.6875 187.9971 378.3994 189.8892 374.2041 c193.667 366.1104 199.4395 357.1611 210.6914 353.2334 c216.4658 351.3545 221.8887 351.1836 226.6416 351.9678 cBb1 (Unnamed gradient 66) 270.4458 218.875 101.3803 182.5944 1 0 0 1 0 0 Bg-36.0297 179.0044 112.3244 22.6084 213.5122 207.416 Xm-1589.1035 7895.0654 112.3244 22.6084 1802.6152 -7687.6494 Bc-36.0297 179.0044 112.3244 22.6084 213.5122 207.416 Bm-1589.1035 7895.0654 112.3244 22.6084 177.4824 386.4209 Bcf0 BBu276.0581 551.3237 m274.2153 548.9834 274.9219 550.418 272.2041 549.0303 c265.291 545.2593 257.3853 549.146 253.2583 554.4028 c251.0684 557.1929 249.2178 560.2627 247.9688 563.5894 c246.9082 566.4194 245.8159 569.4639 245.4648 572.4595 c245.2158 574.6021 245.0879 576.7529 245.04 578.9082 C244.3633 578.666 243.7231 578.4111 243.1069 578.1484 C243.4565 573.1455 244.3208 568.25 246.1763 563.5845 c247.1484 561.1377 248.5415 558.7485 249.8281 556.4746 c251.3379 553.8032 253.8135 551.5264 256.2329 549.6909 C261.1704 545.3994 267.7856 542.417 272.8896 546.6621 C274.8896 548.1621 274.6484 548.7666 276.2168 551.0532 C276.1631 551.1416 276.106 551.2329 276.0581 551.3237 CBb1 (Unnamed gradient 47) 233.1362 627.6367 -71.024 344.3229 0.943583 0.331135 -0.331135 0.943583 3131.6758 -2260.7529 Bg-2.17341 -344.316 -37.2786 0.235312 278.7979 643.1548 Xm-51 -8079.5166 -37.2786 0.235312 329.7979 8722.6719 Bc-2.17341 -344.316 -37.2786 0.235312 278.7979 643.1548 Bm-51 -8079.5166 -37.2786 0.235312 276.6245 298.8389 Bcf0 BBu324.6211 568.6997 m319.7461 568.6704 315.1641 567.4824 310.2178 565.8096 c307.0703 564.7642 303.8652 563.0371 301.1514 561.0972 c298.6074 559.4131 295.6113 556.3931 293.085 558.8506 C286.123 568.9629 290.1182 579.6333 284.5801 591.9248 c283.0146 595.2109 280.7305 598.5464 276.9912 600.7764 c273.5283 602.6997 270.7471 603.5869 267.5005 604.1411 c261.2954 605.2363 254.792 604.0918 250.229 600.6304 c246.5786 597.7134 243.312 595.3975 244.7334 590.5332 c245.5742 587.647 248.2744 583.5391 245.8604 580.729 c243.7983 578.3281 239.98 578.3677 237.895 575.5913 c236.1191 573.2261 236.4385 569.4316 238.5781 567.2544 C233.9282 578.9976 248.2813 574.6494 252.1304 581.2471 c254.7432 585.7246 249.0015 588.2505 249.4546 592.4248 c250.8286 605.0786 267.1709 602.9121 275.2095 598.2593 c280.9131 594.583 282.6689 588.5874 283.3496 583.2661 c283.9873 578.332 283.1563 572.7993 283.2471 566.5498 c283.3594 563.4121 283.3398 560.4355 284.7363 556.5591 C285.6367 554.75 286.3945 551.8232 291.4297 549.4443 C296.9111 547.4473 300.4121 549.2969 301.8682 549.6641 C307.3105 551.8535 308.0381 552.7607 311.4258 554.0664 c314.3008 555.2671 318.8174 555.9419 322.8154 556.4248 c325.2021 556.6304 327.9893 556.918 330.2646 555.4175 c332.8184 553.9185 332.7822 549.7305 331.0996 547.3936 c328.4922 543.772 324.4912 542.1338 321.3203 539.1938 c318.418 536.5034 317.0645 531.7314 319.3398 528.2031 c320.8916 525.7954 323.7178 524.8813 326.2969 524.063 c330.2324 522.8149 333.9268 519.7021 329.4912 516.0654 c326.3613 513.5 321.6777 515.1528 318.001 514.9463 c316.4717 514.8604 314.6699 514.6904 313.1123 513.5449 c311.5195 512.355 311.1738 510.4492 311.2539 509.0068 c311.6895 504.6724 316.7617 501.7666 320.707 503.9585 c322.2744 504.8286 322.2422 505.7285 322.543 507.2949 C321.832 505.0044 318.3857 504.2876 316.6855 505.9087 c315.2646 507.2642 316.1025 509.1343 317.7656 509.7324 c321.9746 511.2456 326.7871 510.5669 330.8574 512.5317 c334.6533 514.3643 337.2285 522.0806 332.5059 524.5425 c329.6914 526.0098 325.2314 526.4673 323.4941 529.4209 c322.9346 530.3716 322.6309 531.6182 322.9678 532.6924 c323.4697 534.2959 325.5498 535.4912 326.8389 536.4863 c328.7588 537.9692 330.8105 539.2715 332.7695 540.7002 c334.9629 542.396 337.4385 544.2197 339.4063 548.272 c340.3193 550.373 340.9746 553.4023 340.2061 556.7705 c339.4473 560.2324 337.3457 562.8765 335.3457 564.6475 c331.0449 568.1509 327.6514 568.501 324.6211 568.6997 CBb1 (Unnamed gradient 66) 321.207 498.4731 118.8251 75.5568 0.943583 0.331135 -0.331135 0.943583 3131.6758 -2260.7529 Bg-12.4541 74.5233 103.9216 17.3671 247.8701 483.4385 Xm-1355.8207 8112.9746 103.9216 17.3671 1603.6904 -7629.5361 Bc-12.4541 74.5233 103.9216 17.3671 247.8701 483.4385 Bm-1355.8207 8112.9746 103.9216 17.3671 235.416 557.9619 Bcf0 BB300.542 525.6074 m301.3721 527.582 304.6836 530.3174 307.9775 533.5757 c309.0244 534.6323 310.3525 536.127 310.7637 538.1768 c311.2158 540.312 310.248 542.0859 309.1055 543.314 C306.3867 545.8022 303.0557 545.3765 300.3633 545.4116 c294.7881 545.4775 289.6543 543.3301 284.8701 543.5669 c280.3569 543.9458 276.3862 547.5435 276.4097 551.3838 c276.4302 560.7505 281.3018 571.3613 280.3779 580.707 c280.1343 585.373 278.563 589.9087 275.7305 592.3804 c272.9434 594.8945 269.7183 595.396 266.8486 595.272 C270.7114 595.1216 274.957 593.4761 277.0591 589.0205 c279.1997 584.6743 279.1592 579.1211 278.4404 574.0684 c277.7275 568.9385 276.2798 563.98 275.1738 559.1567 c274.1704 554.4106 273.0615 549.3599 276.3833 545.1694 c277.8584 543.4146 279.7988 541.6563 282.7104 540.6816 c285.5879 539.7632 288.7861 539.918 291.5264 540.0693 c293.2246 540.2275 294.9365 540.2319 296.6338 540.1182 c298.0625 540.0234 299.5566 539.8862 300.9434 539.5249 c301.2354 539.4487 302.1768 539.437 302.2354 539.0093 c302.2813 538.6748 301.6924 538.3462 301.4746 538.1914 c300.8125 537.7168 300.1953 537.189 299.5479 536.6938 c298.0586 535.5586 296.6816 534.2715 295.5 532.8105 c294.7275 531.8545 294.0732 530.8105 293.5371 529.7021 C292.124 525.9268 294.626 521.8994 297.7861 521.8945 C300.6533 522.127 302.7041 523.8604 305.1855 524.834 c307.708 525.9287 310.5664 527.0068 312.6543 525.9375 C314.709 525.0488 314.6895 522.8652 314.0479 520.4048 C311.9141 515.9619 305.9189 514.0771 303.8457 509.2085 C301.0918 504.9785 301.1074 498.0747 306.1885 493.8623 c311.1025 489.6724 318.2617 490.9043 322.6143 494.0029 c327.2656 497.0137 330.7607 501.1362 334.2617 505.1865 C330.7783 501.1597 325.0732 498.1694 320.4883 496.2891 c316.9736 494.749 313.0713 493.6846 309.7207 495.478 c305.4727 497.7744 303.0439 502.7505 304.665 506.7354 C306.042 511.2739 309.8027 511.9189 315.3389 516.4468 C317.8613 519.1924 318.9365 522.7993 317.3057 526.4966 C314.9883 530.46 310.3496 530.4805 307.5244 529.7441 c304.8252 529.0918 302.8232 528.543 300.9141 528.2578 c300.0039 528.1128 299.167 528.105 298.8857 528.2334 C298.752 529.0068 298.8926 526.4209 298.666 526.0195 C298.5156 525.2544 298.1494 525.061 298.6279 525.5337 C298.7012 525.5562 299.1582 525.9565 299.6719 526.2124 c300.3086 526.4858 299.2656 526.0532 301.2861 526.8184 C301.4141 526.8252 301.1182 526.6768 300.9043 526.5942 c299.8613 526.2158 298.8564 526.3296 299.0576 526.272 C298.4756 526.7578 301.3701 524.6519 300.542 525.6074 CBb1 (Unnamed gradient 66) 330.0488 503.3394 118.8251 75.556 0.933605 0.327633 -0.331819 0.945531 3218.6248 -2247.8083 Bg-12.0453 74.5239 56.5048 9.75571 280.8042 489.0181 Xm-1314.5229 8132.9312 56.5048 9.75571 1595.3271 -7643.9131 Bc-12.0453 74.5239 56.5048 9.75571 280.8042 489.0181 Bm-1314.5229 8132.9312 56.5048 9.75571 268.7588 563.542 Bcf0 BBUUu276.2783 638.1577 m275.1094 637.5054 273.2891 636.2813 271.9639 635.7476 c270.25 635.0278 268.4834 634.6899 267.8965 635.1621 c266.7119 636.147 268.8564 639.168 269.5186 641.0752 c271.127 645.2544 264.1689 643.4229 256.3164 641.7095 c265.376 643.1724 269.4443 643.167 265.8408 637.7231 c264.2666 635.3325 260.5947 630.3945 261.1084 628.6982 c261.5 627.146 264.6787 627.8823 267.9346 629.5283 c269.9199 630.4897 272.3203 632.0952 272.5244 631.3237 c272.7676 630.5454 271.2861 627.7231 272.7559 628.1982 c274.0664 628.6563 275.5996 629.8955 276.1387 629.4307 c276.6338 628.9497 275.792 626.1499 276.3516 625.3799 c277.4619 623.9141 280.5811 627.3359 282.1445 628.3574 c281.3154 627.916 281.2617 629.9082 280.6563 630.0049 c280.1826 630.104 279.1934 629.1846 278.7803 629.5005 c277.6875 630.3232 277.8789 632.7725 276.0869 632.2822 c274.1104 631.8447 277.6973 637.416 277.5352 638.4595 c277.4619 638.7402 276.9805 638.5479 276.2783 638.1577 CBb1 (Unnamed gradient 6) 266.7505 652.0103 -81.6897 28.4044 1 0 0 1 0 0 Bg4.10539 -28.1061 -27.3369 -3.99302 280.4189 654.0068 Xm1180.9025 -8084.6431 -27.3369 -3.99302 -900.4834 8738.6504 Bc4.10539 -28.1061 -27.3369 -3.99302 280.4189 654.0068 Bm1180.9025 -8084.6431 -27.3369 -3.99302 284.5244 625.9009 Bcf0 BBU365.5605 163.6602 m363.832 163.8311 366.1904 157.5635 364.6611 156.3018 c363.624 155.3271 361.5908 157.7627 360.7363 156.5088 c359.9531 155.4336 358.998 154.5195 357.4287 157.0879 c357.9082 154.8242 358.6943 152.415 359.2871 150.0498 c360.3223 152.0215 359.9287 156.2529 361.9307 155.1006 c363.0781 154.4717 364.7393 151.9863 366.1299 151.3066 c367.7051 150.5215 368.2256 152.0684 368.0615 154.2246 c367.8848 156.6807 367.0039 159.4629 367.5635 160.5098 c368.0127 161.4961 369.5557 161.1826 370.792 161.3613 c371.9893 161.5137 373.5771 161.6064 373.2656 163.3232 c373.0654 164.4805 371.7129 166.2354 371.8916 166.9551 c372.0674 167.6885 373.6465 167.1055 374.6201 167.374 c375.4258 167.6064 375.4473 168.3174 375.6836 168.9014 c374.0742 169.2432 371.9502 170.3379 370.2686 171.1201 c371.2891 169.2031 369.4971 168.4043 369.7256 166.6289 c369.9834 165.2686 370.418 163.4082 369.5332 162.7783 c368.6865 162.1787 366.4941 163.6895 365.5605 163.6602 CBb1 (Unnamed gradient 6) 293.4688 131.7822 -81.6897 28.4048 -0.140178 -0.97431 0.821223 -0.118153 2446.7249 17452.3867 Bg22.5063 7.32086 5.96546 -21.9475 353.9336 167.8682 Xm6500.3325 2114.4329 5.96546 -21.9475 -6146.3989 -1946.5645 Bc22.5063 7.32086 5.96546 -21.9475 353.9336 167.8682 Bm6500.3325 2114.4329 5.96546 -21.9475 376.4395 175.1895 Bcf0 BB/BBAccumRotation (1.713690) XTUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF