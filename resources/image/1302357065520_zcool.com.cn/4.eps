%!PS-Adobe-3.0 %%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 13.0.1%%For: (marina) ()%%Title: (11-37.eps)%%CreationDate: 2/6/11 3:59 PM%%BoundingBox: 78 123 516 714%%HiResBoundingBox: 78.6279 123.7295 515.0391 713.209%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%RGBProcessColor: 0 0 0 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 283.5 424.8936 283.5 424.8936%AI3_TileBox: -22.5356 29.1963 589.4648 821.1968%AI3_DocumentPreview: None%AI5_ArtSize: 566.9291 850.3937%AI5_RulerUnits: 4%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -629 884.3936 1 1829 1029 18 0 0 50 75 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 96 128 8%%BeginData: 11398 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD20F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F8270527F82727270027272705FD13270527F852FFFD29F805F8F8%F827F8F8F827F8F8F827F827F827F827F827F827F827F827F827F827F827%F827F8270027F8270027F8270027F827F827F82727FFFD1EF800F8F8F827%F8F8F827F827F827F827F827F827F827F827F827F827F827F827F8270527%F8272727F827272700FD0B270527272700272727F852FFFD2FF827F8F8F8%27F800F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F80527FFFD1EF827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F8270527F827272700FD1B27F852FF%FD27F800F8F8F827F8F8F827F8F8F827F827F827F827F827F827F827F827%F827F827F8270027F8270527F827272700272727F8270027F827F82727FF%FD20F827F8F8F827F827F827F827F827F827F827F827F827F827F827F827%F8270027F8272727F827272705FD13270527F852FFFD2DF805F8F8F827F8%00F827F827F827F827F827F827F827F827F827F827F8270027F8270527F8%270527F8270027F827F827F82727FFFD1CF827F8F8F827F827F827F827F8%27F827F827F827F827F827F827F827F8270027F827272700FD1D270052FF%FD29F827F8F8F827F8F8F827F821F827F827F827F827F827F827F827F827%F8270027F8272727002727270527272700272727F8270027F82727FFFD1E%F827F8F8F827F8F8F827F827F827F827F827F827F827F827F827F827F827%0027F8272727F827272705FD1727F852FFFD2FF827F8F8F827F805F827F8%27F827F827F827F827F827F827F827F827F82705270027272700270527F8%270027F827F82727FFFD1EF827F827F827F8272127F827F827F827F827F8%27F827F827F827F827F8272727F827272705FD1B27F852FFFD24F8FD0421%2021F827F8F8F827F8F8F827F827F827F827F827F827F827F827F827F827%F8270027F8272727002727270527272700270527F827002727FFFD20F827%F8F8F84646462104F8212127F827F827F827F827F827F827F827F8270527%F827272700FD17270527F852FFFD25F845FD0421F8212121F8F8F827F8F8%F827F827F827F827F827F827F827F827F827F827F8270027F8270027F827%0027F8270027F827F827F82727FFFD1CF827F8F8F827F827F827F827F827%21274527214CF827F827F827F827F8270027F82727270027272705FD1927%0052FFFD29F804F8F8FD0421F827F800F827F827F827F827F827F827F827%F827F827F827F8270027F8272727F8272727F8270527F8270027F82727FF%FD1EF821F8F8F827F8F8F827F827F827F82721274627F827F827F827F827%F827F827F8270527F82727270027272705FD0F2705272727F852FFFD2DF8%FD0421F8F827F800F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F80527FFFD1EF827F8F8F827F827%F827F827F827F827F84C21462127F827F827F827F8270027F82727270027%272705FD1727F852FFFD2BF827F8F821462146F827F821F827F827F827F8%27F827F827F827F827F827F827F8270027F8270027F8270027F827F827F8%27F82727FFFD20F827F8F8F827F8F8F827F827F827F82746274627F827F8%27F827F827F827F827F8270527F8272727F8272727002727270027272700%27272700272727F827F852FFFD2FF846F84621F8F827F800F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F82727FFFD20F827F827F827F827F827F827F827F8272170216BF827F827%F827F827F8270027F8272727F82727270027272705FD0727052727270527%27270027F852FFFD2DF827F82146276A21F827F800F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F82727%FFFD1CF85120FD04F827F8F8F827F800F827F827F827F86A21704604F827%F827F827F827F827F827F8270027F8270527F8272727F8272727F8272727%F8272727F8270527F852FFFD1BF8759E26FD12F82146F88FF8F8F827F800%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F8F827FFFD1AF82774214621F8F8F827F827F827F827F827F827%F827F8276A046B4CF827F827F827F827F827F827F8270027F8272727F827%2727F827272700272727F8272727F8272727F852FFFD1AF826264690FD11%F804F86BF84646F8F827F800F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F8F827FFFD1AF84AF88F46FD06F8%27F8F8F827F800F827F827F8044621F86BF827F827F827F827F827F827F8%27F827F827F8270027F8270027F8270027F8270027F8270027F827F828FF%FD1AF820F86B6AFD13F82145F84645F8F8F827F8F8F827F800F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F8F827FFFD1AF8%4BF86B6AFD06F827F827F827F827F827F827F827206BF84C4604F827F827%F827F827F827F827F827F827F8270027F8270027F8270027F8270027F827%0027F827F852FFFD1AF84AF82190FD13F8044645F86BF8F8F827F8F8F827%F800F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F80527FFFD1AF87520F86B6BFD07F827F8F8F827F8F8F827F827F84C6B04%464CF827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F852FFFD1AF8504AF8F88F46FD13F88FF8454504%F8F8F827F8F8F827F8F8F827F800F827F805F827F827F827F827F827F827%F827F805F827F8F827FFFD1AF89F74F8F8218F21FD05F827F8F8F820F82E%0C2F0C28F8266B46F88FF827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F852FFFD1AF84A9FF8F8F86A%FD07F80500F8F8130C05F8050D0DF86A6BF86A45F8F8F827F8F8F827F8F8%F827F800F827F821F827F827F827F827F827F827F827F800F827F8F827FF%FD1AF826C026F84621FD06F8060028010C132EF8F8F8270C0D2190F8466A%05F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827FFFD1BF89F4AF82121FD05F8060105F8060D13FD07%F8298F21F86AFD05F800F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827%F8F8F827F8F8F827FD04F827FFFD1BF8509FF84621FD05F8063000270130%1327F827F827F820069646044570F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827FFFD1BF8269E26F8%6AFD05F80608F8F80607130CFD06F805476AF8206921F8F8F827F8F8F827%F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827FD04F827FFFD%1CF89F26F84621F8F8F800F82A06F8070DF8351327F8F8F820F8726A05F8%454505F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827FFFD1CF87450F84646FD06F80707280505F80C1313%0500F807236AF8F8F845FD0DF800F8F8F800F8F8F805F8F8F805F8F8F800%F8F8F800F8F827FFFD0CF8274B6F2027F82727706F9A9A764B7021994AF8%F88FF8F8F8274B9A9ABD9ABD590CF8260C3C142F05456A27F805F84BF827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F852FFFD0BF8279A9A6F764B4B4B6F4B4B20212020F8217550F8F86B%706F9A9A9A6F4B20F8F8200506F8F8F81405F8216BFD05F845F8F8F800F8%F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F827%FFFD0AF84B994BFD07F84468684469444420754AF8F86B4B272004FD08F8%0505F8F80530F8466AF8F827F8044469F805F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827FFFD09F8264AF8F8F820%44204420442020FD05F8206E20F8F86B452020F820FD0CF806F8456AFD06%F86869FD20F827FFFD0CF82120212021FD0BF89FF8044695446969FD048D%8E8D8D69694521F827F806F88F2104F827F827F86F8D45F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827FFFD1BF826%26F8458F2104F8F8F82020452045444544696969F84AF8216AFD07F8208D%20FD12F800FD0CF827FFFD1BF82626F8958F6A6A6A4521FD09F821694526%516A45F827F8F8F827F8218C45F8F8F827F8F8F827F800F827F805F827F8%27F827F805F827F800F827F8F8F827FFFD1BF84A2027F8272121216B8F46%20FD08F8204526456AFD08F8208DFD20F827FFFD1BF82075F82E27270427%048F6A4B4521FD07F821269420F8F827F8F8F827F8694405F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827FFFD1CF8%504AF8FD0527208EF8F84521FD05F821208E20FD08F8206820FD20F827FF%FD1CF8269F4AF8F8F827F8276A21F8044521FD04F8209445FD09F86845F8%F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F8%27F827FFFD1DF8269E74F8F82727F846FD04F845F8F8F8209321FD09F868%44FD22F827FFFD1EF826749F4B27F8274521F827F821454B457021FD08F8%206845FD05F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F8%27F8F8F827F827FFFD20F8269F74F8F845FD04F8266F2021FD09F8206844%FD24F827FFFD1FF80527F84B744B2027F8F8F89F75FD0AF8206820FD25F8%27FFFD1FF827F8F8F827984BFD04F84A4BFD09F8206820FD27F8FFFD1EF8%272727F827F84B4505F827F84B7527F800FD05F8446821FD27F827FFFD1F%F827F8F8F827F821FD05F8274A4B2026F8F8F8206820FD29F8FFFD1EF827%2727F827F8272127F827F804F800F84B4A51F8F86869FD29F827FFFD1FF8%272727F8F8F82121202045FD06F84A75208CFD2BF8FFFD20F8FD0527F84B%456F45692027F820F8279F934405F84B4B4B20FD24F827FFFD23F8272727%F8F8F8046945FD04F8749F6820F8754B202070FD24F827FFFD24F8272727%04056969FD04F874C1F869F8994BF8F8F8274BF8F84B954CFD1EF827FFFD%25F827F8052069FD05F8C1262044756EFD04F84B44F84B4BF8BE45FD1EF8%FFFD23F827522727F8694405F8F8F827C15120939927F827F8F86F752176%F8F821BE21FD1CF827FFFD23F8522727F8046845FD05F851C099BA75FD05%F84B999A20F8F8F87095FD1DF8FFFD21F827522727F805F8694404F827F8%F8F8276E75F800F8202005F84B20FD04F82721FD1CF827FFFD21F8272727%FD04F8208DFD07F844F8F8F820444420F8F8444444FD21F8FFFD20F82727%27F827F8F8F827698D684BF805F8274427F8054445F84B20276827204544%27FD1DF827FFFD21F85227FD06F8052844688D20F8F844F8F8F84520F8F8%45F86820F8F8204420FD1CF827FFFD20F8272752FD07F80CF820208D6844%2005F8204427F8F844272069F805F8216869FD1BF827FFFD21F8272727FD%05F80505FD04F8446868F8F8F844F8272044F8F86820FD04F8448C686844%44FD17F8FFFD21F827522752FD0527352727F827F821448D44274452274B%4527F8692005F827F8052045446F20FD16F827FFFD23F8FD07270C2EFD04%272020F869686F05F8F86820446820FD05F805F805FD19F8FFFD24F8FD04%2752272E2E4B2752276F20F8F84B4BF8F8F8206F4427F8F8F8272727F827%FD19F827FFFD2BF80CF8272727444BF8272704FD04F805FD05F8FD0427FD%1BF8FFFD2AF8050CFD04F86F27522727FD05F827F827F8272727F8272727%FD19F827FFFD2BF80CF8F8F82044FD08F82727F8F8272727FD1EF827FFFD%2BF80C05F8F82044FD09F8FD0527FD1FF827FFFD2BF81305F8F84420FD0A%F8272727FD21F8FFFD2BF81334F8F84444FD2DF827FFFD2BF8130CF8F844%20FD2EF8FFFD2BF81335F8F84444FD2DF827FFFD2BF8130CF8F868FD2FF8%FFFD2AF8051A27F8F84421FD2DF827FFFD2AF8051AF8F8F868FD2EF827FF%FD2AF83513F8F8F84420FD2DF827FFFD2AF81305F8F8F86820FD2EF8FFFD%2AF83CFD04F84444FD2DF827FFFD2AF81305F8F8F84420FD2EF8FFFD2AF8%3505F8F8F84445FD2DF827FFFD2AF80C13F8F8F84420FD2EF8FFFD2AF805%1327F8F82045FD2DF827FFFD2BF80C05F8F82020FD2DF827FFFD2BF80513%F8F82044FD2DF827FFFD2CF80CF8F82020FD2EF8FFFD2CF80CF8F82044FD%2DF827FFFD2CF80BF8F82020FD2EF8FFFD2BF8052EF8F82044FD2DF827FF%FD2AF80513F8F8F82020FD2EF8FFFD28F82E0C35FD04F84445FD2DF827FF%FD28F81A0CFD05F868FD2EF827FFFD28F8130CFD04F82068FD2EF827FFFD%29F81AFD04F82068FD2FF8FFFD29F8132EF8F8F86944FD2EF827FFFD29F8%0C0CF8F8F86820FD2FF8FFFD29F8050CF8F84469FD2FF827FFFD29F8050C%F8F86844FD30F8FFFD29F8050CF8218C20FD2FF827FFFD29F81305F86868%FD30F827FFFD28F80C13F82068FD31F827FFFD28F8190CFD35F8FFFD27F8%133CFD35F827FFFD26F80C3CFD37F8FFFD26F805FD37F827FFFD5FF8FFFD%5EF827FFFD5EF827FFFD5EF827FFFD5FF8FFFD5EF827FFFD5FF8FFFD5EF8%27FFFD5FF8FF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI5_End_NonPrinting--5 Bn%AI5_BeginGradient: (Unnamed gradient 47)(Unnamed gradient 47) 0 2 Bd[0<C4C3C2C1C0BEBDBCBBBAB9B7B6B5B3B2B1B0AEAEADACABAAA9A8A6A5A4A2A2A19F9E9D9B9998989695939290908F8E8C8B8A8A8887868684838180807E7D7B7B7A797977767575737272706F6F6D6C6C6B6A6A6867676565646262616160605E5D5D5C5C5A5A5959575756565555535353525251514F4F4F4E4E4E4D4D4D4B4B4B4A4A4A4A48484848484747474747>101<606162636465666768696A6B6C6D6E6F70717272737475767778797A7B7C7C7D7E7F8081828383848586878888898A8B8C8D8D8E8F90909192939494959697979899999A9B9C9C9D9E9E9FA0A0A1A2A2A3A4A4A5A6A6A7A7A8A9A9AAAAABABACADADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B4B5B5B6B6B7B7B7B8B8B8B9B9B9BABABABBBBBBBBBCBCBCBCBCBDBDBDBDBD>04 %_Br[0 0.278431 1 0 1 0.741176 0 2 50.0844 100 %_BS%_0 0.278431 1 0 1 0.741176 0 2 50.0844 100 Bs0 0.768627 1 0 1 0.376471 0 2 36.2637 0 %_BS%_0 0.768627 1 0 1 0.376471 0 2 36.2637 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 6)(Unnamed gradient 6) 0 2 Bd[<9D9D9D9D9D9D9D9D9D9D9D9D9D9E9E9E9E9E9E9E9E9E9E9F9F9F9F9F9F9FA0A0A0A0A0A0A1A1A1A2A2A2A2A2A3A3A3A3A3A4A4A4A5A5A5A5A6A6A6A7A7A8A8A8A8A9A9AAAAABABABABACACACACADADADAEAEAFAFAFAFB0B1B1B1B1B2B2B3B4B4B4B5B5B5B5B6B6B6B7B7B7B8B8B8B9B9B9B9BABABABABABBBBBBBCBCBDBDBDBEBEBEBEBFBFBFBFC0C0C0C1C1C1C2C2C2C2C2C3C3C3C3C3C4C4C5C6C6C6C7C7C7C8C8C8C8C9C9C9C9CACACBCBCCCCCDCDCDCDCECECECFD0D0D0D0D1D1D1D2D2D3D3D4D4D4D5D5D5D5D6D6D7D7D7D8D8D9D9D9DADADADADBDBDB><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020203040405070709090B0C0C0E1010121313151717191B1B1D1E1E20222224262828292B2B2D2F313133353737383A3C3C3D3F4143434547494B4B4D4F51545456585A5C5E5E6062646668686A6C6E707274767677797B7C7E808183838586888A8B8D8E90919394969898999B9C9D9E9FA1A2A3A4A6A7A8A9AAABACAD><3C3C3C3C3C3C3C3C3C3C3C3C3C3B3B3B3B3B3B3B3B3B3B3A3A3A3939393939393938383837373736363635353434343333333333323231313030302F2F2F2F2E2E2D2D2C2C2B2B2A2A292928282727262525232322222120201F1F1F1F1E1D1D1C1C1C1B1B1A19191817171514141312121110100F0E0E0D0B0B0A09080806050505040303020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>00<DFDFDFDFDFDFDFDEDEDEDEDEDEDDDDDDDDDDDCDCDCDCDCDBDBDBDADADADAD9D9D9D8D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D2D2D2D1D1D0D0CFCFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0BFBFBEBEBDBDBCBBBBBAB9B9B8B8B7B6B6B5B4B4B3B2B2B1B0B0AFAEAEADACACABAAAAA9A8A7A7A6A5A5A4A3A2A2A1A09F9F9E9D9C9C9B9A999898979695949493929190908F8E8D8C8B8B8A89888786868584838281807F7F7E7D7C7B7A79787777767574737271706F6E6D6C6B6A6A696867666564636261605F5E5D5C5B5A5958><DBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADAD9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9>4 %_Br[0.858823 0.678431 0 0 0 0.345098 0.85098 2 50 100 %_BS%_0.858823 0.678431 0 0 0 0.345098 0.85098 2 50 100 Bs0.615686 0 0.235294 0 0 0.87451 0.858824 2 64.8352 0 %_BS%_0.615686 0 0.235294 0 0 0.87451 0.858824 2 64.8352 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 66)(Unnamed gradient 66) 0 2 Bd[<1B1A191817161514131211100F0E0D0D0B0B0A090807060504030202010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><B4B5B4B4B4B4B4B4B5B4B5B4B5B4B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B6B5B6B6B6B6B6B6B5B6B6B5B5B4B4B4B2B2B1B1B1B0B0AFAFAFAEAEADACACABABABA9A9A8A8A8A6A6A5A5A5A4A4A4A3A3A2A2A2A0A0A09F9F9D9D9D9C9C9C9A9A9A989897979695959593939392929290908F8F8F8E8E8E8C8C8C8B8B8B8989898888888686868585858383838282828180807F7F7F7F7D7D7D7B7B7B7A7A7A78787878777777757575747474747272727170706F6F6F6F6D6D6D6D6C6C6C6A6A6A6A6969696968686866666666656565656363636362626262616160605F5F5F5F5E5D5D5D5C5C5C5C5C5B5B5B5B5959595959585858585856565656565555555555545454545452525252525151515151515050505050504E4E4E4E4E4E4D4D4D4D4D4D4D4C4C4C4C4C4C4B4B4A4A4A4A4A4A4A4A4A4848484848484848484848474747474747474747474747><000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101030507090A0C0E11131417191A1C1E212325282A2D2D2F313336383A3C3E3E414346484A4D4D4F515356585A5B5C5E61626465676A6C6E7070727476787B7B7D7F8183838487898B8C8E8F929494969799999B9D9FA0A0A2A4A5A6A7A9ABABACAFB0B0B2B4B4B5B7B8B8B9BABBBBBCBEBEBFC1C2C3C4C6C6C7C8C8C9CBCBCCCDCDCED0D0D1D2D2D4D5D5D6D7D7D8D9D9DADBDBDCDCDEDFE0E1E2E3E4E4E5E6E6E7E7E8E9E9EAEAEBEBECEDEDEEEEEFEFF0F0F0F1F1F2F2F3F3F4F4F4F4F5F5F6F6F6F6F7F7F8F8F9F9F9F9FAFAFBFBFBFBFCFCFCFCFCFDFDFDFDFEFEFEFEFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>01<60606161626263636364646565666666676768686969696A6A6B6B6B6C6C6D6D6E6E6E6F6F70707071717272727373747474757576767677777878787979797A7A7B7B7B7C7C7D7D7D7E7E7E7F7F808080818181828283838384848485858586868787878888888989898A8A8A8B8B8C8C8C8D8D8D8E8E8E8F8F8F909090919191929292939393949494959595969696979797979898989999999A9A9A9B9B9B9B9C9C9C9D9D9D9E9E9E9E9F9F9FA0A0A0A1A1A1A1A2A2A2A2A3A3A3A4A4A4A4A5A5A5A5A6A6A6A7A7A7A7A8A8A8A8A9A9A9A9AAAAAAAAABABABABACACACACADADADADAEAEAEAEAEAFAFAFAFB0B0B0B0B0B1B1B1B1B1B2B2B2B2B2B3B3B3B3B3B4B4B4B4B4B5B5B5B5B5B6B6B6B6B6B6B7B7B7B7B7B7B8B8B8B8B8B8B9B9B9B9B9B9B9BABABABABABABABABBBBBBBBBBBBBBBBBBBCBCBCBCBCBCBCBCBCBCBCBDBDBDBDBDBDBDBDBDBDBDBD><D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADADACABAAA9A8A7A6A5A4A3A2A1A1A09F9E9D9C9B9A9999989796959493929191908F8E8D8C8B8B8A8988878685858483828180807F7E7D7C7B7B7A7978777676757473727271706F6E6E6D6C6B6A6A696867676665646363626160605F5E5D5D5C5B5A5A59585857565555545352525150504F4E4D4D4C4B4B4A4949484747464545444343424141403F3F3E3D3D3C3B3B3A39393838373636353434333332313130302F2E2E2D2D2C2C2B2A2A292928282727262525242423232222212120201F1F1E1E1D1D1C1C1B1B1A1A19191818171716161615151414131312121211111010100F0F0E0E0E0D0D0D0C0C0B0B0B0A0A0A0909090808080707070706060605050505040404040303030302020202020101010101010100000000000000>4 %_Br[0 0.278431 1 0 1 0.741176 0 2 50.0844 100 %_BS%_0 0.278431 1 0 1 0.741176 0 2 50.0844 100 Bs0.105882 0.705882 0 0 1 0.376471 0.843137 2 36.2637 0 %_BS%_0.105882 0.705882 0 0 1 0.376471 0.843137 2 36.2637 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 70)(Unnamed gradient 70) 0 2 Bd[<2626262625252525252525252424242424242423232323232323232222222222222221212121212121212020202020202020202020202020201F1F1F202020201F1F1F1F202020201F1F1F1F1F20201F1F1F1F202020201F1F20202020201F1F2020202020201F1F1F1F2020201F1F1F1F1F1F1F1F1E1D1D1D1D1D1D1C1C1C1C1C1C1B1B1A1A1919191A1A18181919191A1B1B1B1B1C1D1E1F202021222324252526262728292A2B2C2C2D2E2E2F3031323232333435353636363738393A3B3C3B3C3C3D3E3F3F3F4040414242434444444546><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFDFDFCFBFAF9F8F7F6F6F5F4F4F3F2F2F1F1F0EFEFEEEEEDECECEBEBEAEAE9E9E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E2E2E2E1E1E1E0E0E0DFDFDFDEDEDEDEDDDDDDDD><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFBF8F6F3F1EEECE9E7E5E2E0DEDBD8D6D3D0CECCCAC8C6C4C1BFBDBAB8B6B3B1AFACAAA8A6A3A19E9C99979592908D8A8784827F7D7A787673716F6C6A676562605E5B595654514F4C494744423F3D3A383533302D2B282522201D1B181614110F0C0A080705030200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><0F0F0F0F0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A09090909090909080808080808080807070707070707060606060606060605050505050505040404040403030303030202020202020202020101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><C7C7C7C7C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9CACACACACACACACACBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCDCDCDCDCDCDCDCECECECECECECECECFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D2D2D2D2D2D2D2D2D3D3D3D3D3D3D3D4D4D4D4D4D4D4D4D5D5D5D5D5D5D5D6D6D6D6D6D6D6D6D7D7D7D7D7D7D7D8D8D8D8D8D8D8D8D9D9D9D9D9D9D9DADADADADADADADADBDBDBDBDBDBDBDCDCDCDCDCDCDCDCDDDDDDDDDDDDDDDEDEDEDEDEDEDEDEDFDFDFDFDFDFDFE0E0E0E0E0E0E0E0E1E1E1E1E1E1E1E2E2E2E2E2E2E2E2E3E3E3E3>0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2>4 %_Br[0.27451 0.866667 0 0 0.890196 0 0.823529 2 50 100 %_BS%_0.27451 0.866667 0 0 0.890196 0 0.823529 2 50 100 Bs0.14902 1 1 0.058824 0.780392 0 0 2 50 0 %_BS%_0.14902 1 1 0.058824 0.780392 0 0 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 90)(Unnamed gradient 90) 1 2 Bd[<B5B5B6B6B7B7B6B7B7B7B8B8B9B9B9BABAB9B9BABABBBBBBBCBCBCBDBBBCBCBDBDBDBCBCBDBDBDBEBCBCBCBDBDBDBDBDBDBEBEBDBDBDBDBDBEBEBEBEBEBFBEBEBFBFBFBF><A1A1A2A2A3A3A4A5A5A3A4A4A5A5A6A6A7A8A8A9A9A9AAAAABABA9A9AAABABABACACABABABACACACADADABABACACACACACACACADADADADADADADADACACACADADADADADAD><8F8F909090919192929495959596969797979898989999999A9A9D9D9D9D9E9E9E9FA1A1A2A2A2A2A3A3A5A5A5A5A6A6A6A6A7A7A7A7A7A8A8A8A8A9AAAAAAAAAAABABAB><7376787A7C7E80828486888B8D8F919396989A9C9EA1A3A5A7A9ABADAFB1B3B5B7B9BCBEC0C2C4C5C6C8C9CACBCCCDCFD0D2D3D4D6D7D8D9DADBDCDDDEDFE0E2E3E4E5E6><3D3C3B3A39383837363534333231302F2E2E2D2C2B2A29282726252424232221201F1E1D1C1B1A19191817161514131211100F0F0E0D0C0B0A0908070605050403020100><3F3E3D3C3B3A39383737363534333231302F2E2D2C2B2A29282727262524232221201F1E1D1C1B1A19181817161514131211100F0E0D0C0B0A0908080706050403020100><44434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A2928272625242321201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>4 %_Br[0.709804 0.631373 0.560784 0.45098 0.239216 0.247059 0.266667 2 50 0 %_BS%_0.709804 0.631373 0.560784 0.45098 0.239216 0.247059 0.266667 2 50 0 Bs0.74902 0.678431 0.670588 0.901961 0 0 0 2 50 100 %_BS%_0.74902 0.678431 0.670588 0.901961 0 0 0 2 50 100 BsBD%AI5_EndGradient%AI5_Begin_NonPrintingNp4 Bn%AI5_BeginGradient: (Linear Gradient 1)(Linear Gradient 1) 0 2 Bd[<00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F2021222324252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F5152535455565658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F90909192939494959696979898999A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAABABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2><00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C1D1D1E1F202122222324262728292A2B2C2D2E2E2F30313233343536373838393A3B3C3D3E3F4041434445464648494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F60616263646465666768696A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC><00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F8081818283838485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423222120>4 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Linear Gradient 2)(Linear Gradient 2) 0 6 Bd[<C5C5C5C5C6C6C7C7C8C8C8C8C9C9C9CACBCBCCCCCCCCCCCCCDCDCECECFCFD0D0D1D1D1D1D1D2D2D2D3D3D3D4D4D4D4D4D4D5D5D5D5D5D6D6D6D6D7D6D7D7D7D7D7D8D8D8D9D9D9DAD9DADADADADADADADADADBDBDADBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDCDBDBDBDBDBDBDADBDBDADBDADADADADADADADADADADAD9D9D9D9D8D8D8D8D8D7D7D7D7D7D7D6D6D6D6D6D6><3032343436383A3B3D3F3F4143444648494B4D4F4F51535557595B5C5E6062646567686A6C6E70727476787A7D7F81838587898B8D8D8E9092949597999A9C9E9FA1A2A3A5A6A8A9ABACAEAFB0B1B2B3B4B5B6B7B7B8B9BABBBCBDBEBFC0C0C1C2C2C3C4C4C5C6C7C7C8C9C9C9CACACBCCCCCDCDCECECFCFCFD0D0D0D1D1D1D2D2D2D3D3D4D3D4D4D4D5D5D5D6D6D6D6D6D6D6D6D6D7D7><232120201F1E1C1B18171716141312100F0E0D0C0C09080706050402010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>0<0000010101020203030304040505060606070708080809090A0A0B0B0B0C0C0D0D0E0E0E0F0F10101111111212131314141415151616171718181819191A1A1B1B1C1C1C1D1D1E1E1F1F20202021212222232324242425252626272728282829292A2A2B2B2C2C2D2D2D2E2E2F2F303031313232323333343435353636373737383839393A3A3B3B3C3C3C3D3D3E3E3F3F404041414242><A09F9E9E9D9C9B9A99989897969594939291908F8F8E8D8C8B8A89888786858483828281807F7E7D7C7B7A79787776757473727170706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110><C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCDCDCDCDCDCDCDCDCDCDCDCDCECECECECECECECECECECECECFCFCFCFCFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D2D2D2D2D2D2>4 %_Br<8282828383838384848485858586868686878787878788888989898A8A8A8B8B8C8C8C8D8D8D8D8E8E8E8F8F8F8F90909091919292939394949595959696969697979898989899999A9A9A9A9B9B9C9C9C9C9D9D9E9E9E9E9F9E9F9FA0A0A0A1A1A1A2A2A2A2A3A3A3A4A4A5A5A5A6A6A6A7A7A8A8A8A9A9AAAAAAAAABABABABACACACADADADADADAEAEAFAFB0B0B0B1B1B2B2B3B3B4B4B4B5B5B6B6B7B7B7B9B8B9B9BABABBBBBBBCBCBDBDBDBDBEBEBFBFBFBFBFC0C0C0C0C1C1C1C1C1C1C1C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C3C4C3C4C4C4C4C4C4C5C5C5C5C5C5C5C5><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010203030405060608080A0A0B0C0C0E0E101012121313161618181A1B1B1C1C1E1E2020232325252828292A2B2C2E2E3030><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFCFBFAF9F9F7F5F4F1F1F0EEEDECEBEBEBEAE8E7E6E6E4E2E1DFDDDCDBDAD9D8D7D6D5D5D3D2D1D0CECDCBCBCAC8C7C6C5C4C3C2C2C0BFBEBCBBBAB8B7B5B5B4B2B1B0AEADACAAA9A7A6A6A4A3A1A09E9C9A9997959492908E8E8C8A88868582817E7D7A79767572706F6C6A6866646462605D5C59575553514E4D4A484644413F3C3A373633312E2C29282523>0<737373727272727171717070706F6F6F6E6E6E6D6D6D6C6C6B6B6B6A6A6A69696868686767666665656564646363626262616160605F5F5E5E5D5D5C5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A494948484747464545444443434242414140403F3E3E3D3D3C3C3B3B3A3A39383837373636353534333332323131302F2F2E2E2D2D2C2B2B2A2A29292827272626252424232322222120201F1F1E1D1D1C1C1B1A1A191918171716161514141313121111100F0F0E0E0D0C0C0B0B0A09090807070606050404030302010100><F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F3F2F2F2F1F1F1F0F0F0F0EFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAEAE9E9E9E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDCDBDBDADADAD9D9D8D8D8D7D7D6D6D6D5D5D4D4D4D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCCCCCCCBCBCACAC9C9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C3C2C2C1C1C0C0BFBFBFBEBEBDBDBCBCBBBBBBBABAB9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADACACABABAAAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A0><0F0F10101011111212131314141515161617171819191A1A1B1C1C1D1D1E1F1F2021212223232425252627272829292A2B2C2C2D2E2E2F303131323334343536373738393A3A3B3C3D3D3E3F404141424344454546474849494A4B4C4D4D4E4F5051525253545556575758595A5B5C5D5D5E5F60616263636465666768696A6A6B6C6D6E6F70717272737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919293949495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6>4 %_Br<0001030405050608090A0B0D0E0F111213151618191A1C1D1E1F202123242627282A2B2C2D2F303132343536373838393B3C3D3E3F4141434445464748494A4B4C4D4F4F51525353535455565758595A5B5C5C5D5E5F60616162626364656667676869696A6A6B6B6C6D6D6E6F7070707172737374757575757576767778787879797A7B7B7B7C7C7D7D7D7D7E7E7F80808081818182828282><444341413F3E3E3C3C3A3939373634343232312F2E2C2C2B292927262624232120201E1D1B1B1A18181515141212100F0F0C0C0B0909060606040402020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>10<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBABAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E9E9D9C9B9A99989796959594939291908F8E8D8D8C8B8A8988878786858483828281807F7E7D7D7C7B7A79797877767675747473><BFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C6C6C6C7C7C8C8C8C9C9CACACACBCBCCCCCCCDCDCECECECFCFD0D0D0D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDCDDDDDEDEDEDFDFE0E0E0E1E1E1E2E2E3E3E3E4E4E4E5E5E6E6E6E7E7E7E8E8E9E9E9EAEAEAEBEBEBECECECEDEDEEEEEEEFEFEFF0F0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7F7F8F8><00000000000101010101010101010102020202020202020203030303030303030304040404040404040404050505050505050505050606060606060606060707070707070707070708080808080808080808090909090909090909090A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F>4 %_Br0<9E9D9B999896959392908F8E8C8B8A88878684838181807E7D7B7A79777675737272706F6D6C6B6A6A68676564626261605E5D5D5C5A595757565555535251514F4E4E4D4B4B4A4A4848474745454444>101<7F808182838485868788898A8B8C8D8E8F90919293939495969798999A9B9C9D9E9E9FA0A1A2A3A4A4A5A6A7A8A9A9AAABACADADAEAFB0B1B1B2B3B3B4B5B6B6B7B8B8B9BABABBBBBCBCBDBDBEBEBFBF>04 %_Br0<FDFDFDFDFDFCFCFCFCFCFBFBFBFBFBFAFAFAFAFAF9F9F9F8F8F8F7F7F6F6F5F5F5F5F4F4F3F3F2F2F1F1F0F0EFEFEFEEEEEDEDECECECEBEBEAE9E9E9E8E7E7E7E6E6E5E5E4E3E3E3E2E1E0E0E0DFDEDEDDDDDCDCDBDADAD9D8D8D7D7D6D6D5D4D4D3D2D2D1D1D0CFCFCECDCDCCCCCBCACAC9C9C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0C0BEBEBDBDBCBCBBBBBABAB9B9B7B7B6B6B5B5B3B3B3B2B2B1B1B1B0B0AEAEAEADADACACACABABABAAAAAAA9A9A9A8A8A8A6A6A6A6A5A5A5A5A4A4A4A4A2A2A2A2A2A1A1A1A1A19F9F9F9F9F9F9F9F9E9E9E9E9E9E9E9E9E>101<000102030405060708090A0B0C0D0E0F10111112131415161718191A1B1C1D1D1E1F20212223242425262728292A2A2B2C2D2E2F2F3031323334343536373838393A3B3B3C3D3E3E3F40414142434444454647474849494A4B4B4C4D4E4E4F505051525253535455555657575858595A5A5B5B5C5D5D5E5E5F5F606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6E6F6F70707071717272727373747474757575767676777777787878797979797A7A7A7A7B7B7B7B7C7C7C7C7C7D7D7D7D7D7E7E7E7E7E7E7E7E7F7F7F7F7F7F7F7F7F>04 %_Br[0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 %_BS%_0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 Bs0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 %_BS%_0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 Bs0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 %_BS%_0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 Bs0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 %_BS%_0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 Bs0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 %_BS%_0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 Bs0 0.992157 1 0 1 0 0 2 33.3333 0 %_BS%_0 0.992157 1 0 1 0 0 2 33.3333 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 1)(Radial Gradient 1) 1 2 Bd[<00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F2021222324252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F5152535455565658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F90909192939494959696979898999A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAABABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2><00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C1D1D1E1F202122222324262728292A2B2C2D2E2E2F30313233343536373838393A3B3C3D3E3F4041434445464648494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F60616263646465666768696A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC><00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F8081818283838485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423222120>4 %_Br[1 0 50 0 %_BS%_1 0 50 0 Bs0 0 50 100 %_BS%_0 0 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 2)(Radial Gradient 2) 1 6 Bd[0<FDFDFDFDFDFCFCFCFCFCFBFBFBFBFBFAFAFAFAFAF9F9F9F8F8F8F7F7F6F6F5F5F5F5F4F4F3F3F2F2F1F1F0F0EFEFEFEEEEEDEDECECECEBEBEAE9E9E9E8E7E7E7E6E6E5E5E4E3E3E3E2E1E0E0E0DFDEDEDDDDDCDCDBDADAD9D8D8D7D7D6D6D5D4D4D3D2D2D1D1D0CFCFCECDCDCCCCCBCACAC9C9C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0C0BEBEBDBDBCBCBBBBBABAB9B9B7B7B6B6B5B5B3B3B3B2B2B1B1B1B0B0AEAEAEADADACACACABABABAAAAAAA9A9A9A8A8A8A6A6A6A6A5A5A5A5A4A4A4A4A2A2A2A2A2A1A1A1A1A19F9F9F9F9F9F9F9F9E9E9E9E9E9E9E9E9E>101<000102030405060708090A0B0C0D0E0F10111112131415161718191A1B1C1D1D1E1F20212223242425262728292A2A2B2C2D2E2F2F3031323334343536373838393A3B3B3C3D3E3E3F40414142434444454647474849494A4B4B4C4D4E4E4F505051525253535455555657575858595A5A5B5B5C5D5D5E5E5F5F606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6E6F6F70707071717272727373747474757575767676777777787878797979797A7A7A7A7B7B7B7B7C7C7C7C7C7D7D7D7D7D7E7E7E7E7E7E7E7E7F7F7F7F7F7F7F7F7F>04 %_Br0<9E9D9B999896959392908F8E8C8B8A88878684838181807E7D7B7A79777675737272706F6D6C6B6A6A68676564626261605E5D5D5C5A595757565555535251514F4E4E4D4B4B4A4A4848474745454444>101<7F808182838485868788898A8B8C8D8E8F90919293939495969798999A9B9C9D9E9E9FA0A1A2A3A4A4A5A6A7A8A9A9AAABACADADAEAFB0B1B1B2B3B3B4B5B6B6B7B8B8B9BABABBBBBCBCBDBDBEBEBFBF>04 %_Br<0001030405050608090A0B0D0E0F111213151618191A1C1D1E1F202123242627282A2B2C2D2F303132343536373838393B3C3D3E3F4141434445464748494A4B4C4D4F4F51525353535455565758595A5B5C5C5D5E5F60616162626364656667676869696A6A6B6B6C6D6D6E6F7070707172737374757575757576767778787879797A7B7B7B7C7C7D7D7D7D7E7E7F80808081818182828282><444341413F3E3E3C3C3A3939373634343232312F2E2C2C2B292927262624232120201E1D1B1B1A18181515141212100F0F0C0C0B0909060606040402020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>10<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBABAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E9E9D9C9B9A99989796959594939291908F8E8D8D8C8B8A8988878786858483828281807F7E7D7D7C7B7A79797877767675747473><BFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C6C6C6C7C7C8C8C8C9C9CACACACBCBCCCCCCCDCDCECECECFCFD0D0D0D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDCDDDDDEDEDEDFDFE0E0E0E1E1E1E2E2E3E3E3E4E4E4E5E5E6E6E6E7E7E7E8E8E9E9E9EAEAEAEBEBEBECECECEDEDEEEEEEEFEFEFF0F0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7F7F8F8><00000000000101010101010101010102020202020202020203030303030303030304040404040404040404050505050505050505050606060606060606060707070707070707070708080808080808080808090909090909090909090A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F>4 %_Br<8282828383838384848485858586868686878787878788888989898A8A8A8B8B8C8C8C8D8D8D8D8E8E8E8F8F8F8F90909091919292939394949595959696969697979898989899999A9A9A9A9B9B9C9C9C9C9D9D9E9E9E9E9F9E9F9FA0A0A0A1A1A1A2A2A2A2A3A3A3A4A4A5A5A5A6A6A6A7A7A8A8A8A9A9AAAAAAAAABABABABACACACADADADADADAEAEAFAFB0B0B0B1B1B2B2B3B3B4B4B4B5B5B6B6B7B7B7B9B8B9B9BABABBBBBBBCBCBDBDBDBDBEBEBFBFBFBFBFC0C0C0C0C1C1C1C1C1C1C1C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C3C4C3C4C4C4C4C4C4C5C5C5C5C5C5C5C5><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010203030405060608080A0A0B0C0C0E0E101012121313161618181A1B1B1C1C1E1E2020232325252828292A2B2C2E2E3030><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFCFBFAF9F9F7F5F4F1F1F0EEEDECEBEBEBEAE8E7E6E6E4E2E1DFDDDCDBDAD9D8D7D6D5D5D3D2D1D0CECDCBCBCAC8C7C6C5C4C3C2C2C0BFBEBCBBBAB8B7B5B5B4B2B1B0AEADACAAA9A7A6A6A4A3A1A09E9C9A9997959492908E8E8C8A88868582817E7D7A79767572706F6C6A6866646462605D5C59575553514E4D4A484644413F3C3A373633312E2C29282523>0<737373727272727171717070706F6F6F6E6E6E6D6D6D6C6C6B6B6B6A6A6A69696868686767666665656564646363626262616160605F5F5E5E5D5D5C5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A494948484747464545444443434242414140403F3E3E3D3D3C3C3B3B3A3A39383837373636353534333332323131302F2F2E2E2D2D2C2B2B2A2A29292827272626252424232322222120201F1F1E1D1D1C1C1B1A1A191918171716161514141313121111100F0F0E0E0D0C0C0B0B0A09090807070606050404030302010100><F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F3F2F2F2F1F1F1F0F0F0F0EFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAEAE9E9E9E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDCDBDBDADADAD9D9D8D8D8D7D7D6D6D6D5D5D4D4D4D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCCCCCCCBCBCACAC9C9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C3C2C2C1C1C0C0BFBFBFBEBEBDBDBCBCBBBBBBBABAB9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADACACABABAAAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A0><0F0F10101011111212131314141515161617171819191A1A1B1C1C1D1D1E1F1F2021212223232425252627272829292A2B2C2C2D2E2E2F303131323334343536373738393A3A3B3C3D3D3E3F404141424344454546474849494A4B4C4D4D4E4F5051525253545556575758595A5B5C5D5D5E5F60616263636465666768696A6A6B6C6D6E6F70717272737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919293949495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6>4 %_Br<C5C5C5C5C6C6C7C7C8C8C8C8C9C9C9CACBCBCCCCCCCCCCCCCDCDCECECFCFD0D0D1D1D1D1D1D2D2D2D3D3D3D4D4D4D4D4D4D5D5D5D5D5D6D6D6D6D7D6D7D7D7D7D7D8D8D8D9D9D9DAD9DADADADADADADADADADBDBDADBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDCDBDBDBDBDBDBDADBDBDADBDADADADADADADADADADADAD9D9D9D9D8D8D8D8D8D7D7D7D7D7D7D6D6D6D6D6D6><3032343436383A3B3D3F3F4143444648494B4D4F4F51535557595B5C5E6062646567686A6C6E70727476787A7D7F81838587898B8D8D8E9092949597999A9C9E9FA1A2A3A5A6A8A9ABACAEAFB0B1B2B3B4B5B6B7B7B8B9BABBBCBDBEBFC0C0C1C2C2C3C4C4C5C6C7C7C8C9C9C9CACACBCCCCCDCDCECECFCFCFD0D0D0D1D1D1D2D2D2D3D3D4D3D4D4D4D5D5D5D6D6D6D6D6D6D6D6D6D7D7><232120201F1E1C1B18171716141312100F0E0D0C0C09080706050402010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>0<0000010101020203030304040505060606070708080809090A0A0B0B0B0C0C0D0D0E0E0E0F0F10101111111212131314141415151616171718181819191A1A1B1B1C1C1C1D1D1E1E1F1F20202021212222232324242425252626272728282829292A2A2B2B2C2C2D2D2D2E2E2F2F303031313232323333343435353636373737383839393A3A3B3B3C3C3C3D3D3E3E3F3F404041414242><A09F9E9E9D9C9B9A99989897969594939291908F8F8E8D8C8B8A89888786858483828281807F7E7D7C7B7A79787776757473727170706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110><C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCDCDCDCDCDCDCDCDCDCDCDCDCECECECECECECECECECECECECFCFCFCFCFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D2D2D2D2D2D2>4 %_Br[0 0.992157 1 0 1 0 0 2 33.3333 0 %_BS%_0 0.992157 1 0 1 0 0 2 33.3333 0 Bs0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 %_BS%_0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 Bs0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 %_BS%_0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 Bs0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 %_BS%_0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 Bs0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 %_BS%_0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 Bs0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 %_BS%_0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Offset Squares Pattern)(Offset Squares Pattern) 0 0 55.0781 55.0801 [%AI3_Tile(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0 0 m0 55.0801 L55.0781 55.0801 L55.0781 0 L0 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.043137 0 0.713725 0 1 1 0.4 Xa 0.043137 0 0.713725 0 1 1 0.4 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR26.1436 52.3262 m26.1436 29.4307 L3.03125 29.4307 L3.03125 52.3262 L26.1436 52.3262 Lf25.0264 50.123 m5.89063 50.123 L5.89063 32.4961 L25.0264 32.4961 L25.0264 50.123 Lf*U*u5.89063 50.123 m25.0264 50.123 L25.0264 32.4961 L5.89063 32.4961 L5.89063 50.123 Ln10.0313 34.2578 m24.1338 34.2578 L24.1338 48.3613 L10.0313 48.3613 L10.0313 34.2578 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.501961 0.984314 0 0.968627 0.576471 0.117647 Xa 0 0.501961 0.984314 0 0.968627 0.576471 0.117647 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR22.4082 48.793 m8.30566 48.793 L8.30566 34.6895 L22.4082 34.6895 L22.4082 48.793 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.003922 0.984314 0.976471 0 0.929412 0.12549 0.141176 Xa 0.003922 0.984314 0.976471 0 0.929412 0.12549 0.141176 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR52.6943 24.7852 m52.6943 1.67578 L28.9355 1.67578 L28.9355 24.7852 L52.6943 24.7852 Lf47.6777 22.582 m30.0527 22.582 L30.0527 4.95703 L47.6777 4.95703 L47.6777 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR30.0527 22.582 m50.6982 22.582 L50.6982 4.95703 L30.0527 4.95703 L30.0527 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.501961 0 0.992157 0 0.54902 0.776471 0.247059 Xa 0.501961 0 0.992157 0 0.54902 0.776471 0.247059 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR47.4199 21.252 m32.2393 21.252 L32.2393 6.50293 L47.4199 6.50293 L47.4199 21.252 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.698039 0.14902 0 0 0.160784 0.670588 0.886275 Xa 0.698039 0.14902 0 0 0.160784 0.670588 0.886275 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR27.5391 27.5391 m27.5391 0 L0 0 L0 27.5391 L27.5391 27.5391 Lf25.4316 26.1445 m2.75293 26.1445 L2.75293 2.16992 L25.4316 2.16992 L25.4316 26.1445 Lf*U*u4.95605 7.40039 m22.582 7.40039 L22.582 25.0273 L4.95605 25.0273 L4.95605 7.40039 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.188235 0 0.980392 0 0.85098 0.878431 0.129412 Xa 0.188235 0 0.980392 0 0.85098 0.878431 0.129412 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR22.582 5.67383 m4.95605 5.67383 L4.95605 25.0273 L22.582 25.0273 L22.582 5.67383 Lf20.3887 21.3281 m7.58105 21.3281 L7.58105 10.0313 L20.3887 10.0313 L20.3887 21.3281 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 Xa 0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR6.93555 8.73633 m21.0371 8.73633 L21.0371 22.8379 L6.93555 22.8379 L6.93555 8.73633 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.623529 0 0.003922 0 0.2 0.776471 0.956863 Xa 0.623529 0 0.003922 0 0.2 0.776471 0.956863 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR55.0781 55.0801 m55.0781 27.5391 L27.5391 27.5391 L27.5391 55.0801 L55.0781 55.0801 Lf52.3252 50.9688 m30.292 50.9688 L30.292 28.9355 L52.3252 28.9355 L52.3252 50.9688 Lf*U*u30.292 50.9688 m52.3252 50.9688 L52.3252 28.9355 L30.292 28.9355 L30.292 50.9688 Ln32.4951 30.0527 m50.1221 30.0527 L50.1221 47.6777 L32.4951 47.6777 L32.4951 30.0527 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.043137 0 0.713725 0 1 1 0.4 Xa 0.043137 0 0.713725 0 1 1 0.4 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR50.1221 30.0527 m32.4951 30.0527 L32.4951 48.9727 L50.1221 48.9727 L50.1221 30.0527 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.901961 0 0 1 0.2 0.6 Xa 0 0.901961 0 0 1 0.2 0.6 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.9063 33.749 m49.0078 33.749 L49.0078 47.8506 L34.9063 47.8506 L34.9063 33.749 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7907.8833 8616.3486 m-7816.0479 8616.3486 L-7816.0479 8612.0693 L-7907.8833 8612.0693 L-7907.8833 8616.3486 Ln0 O0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa-7907.6631 8613.6689 m-7908 8613.7354 -7907.4814 8613.9248 -7907.8833 8613.7822 C-7907.8379 8613.6641 -7907.7725 8613.5752 -7907.6631 8613.6689 Cf-7817.1675 8613.835 m-7818.2529 8614.5977 -7819.6816 8613.8271 -7820.8701 8614.3135 C-7821.0098 8614.3457 -7820.8354 8613.8955 -7821.1484 8613.9961 C-7822.3008 8614.5889 -7824.1162 8614.2354 -7825.5195 8613.7783 C-7825.4346 8613.6602 L-7825.7021 8613.5752 -7826.0283 8613.9658 -7826.3115 8613.9111 C-7826.3135 8613.833 -7826.2207 8613.7998 -7826.2861 8613.6914 C-7826.3574 8613.9287 -7826.7979 8613.8018 -7826.9189 8613.9775 C-7827.0303 8613.8857 -7827.0195 8613.6982 -7827.1641 8613.5938 C-7827.3262 8613.8633 L-7827.7769 8614.5029 -7828.4209 8613.8193 -7829.0361 8614.1494 C-7829.0063 8614.0869 -7828.9453 8614.0381 -7828.9941 8613.9775 C-7829.9814 8614.3662 -7831.2168 8614.293 -7832.3208 8614.4365 C-7832.2769 8614.3418 -7832.2363 8614.1689 -7832.3008 8614.0615 C-7832.3555 8614.3447 -7832.6963 8614.416 -7832.9922 8614.4717 C-7833.1255 8614.1807 -7833.4995 8614.7373 -7833.8467 8614.5762 C-7833.8169 8614.5127 L-7834.0732 8614.8174 -7834.1973 8614.3369 -7834.4053 8614.7021 C-7834.5684 8614.4736 L-7834.6807 8614.8838 -7834.9395 8614.2607 -7835.1514 8614.4697 C-7835.1445 8614.5537 L-7835.3442 8614.6533 -7835.4482 8614.4473 -7835.6338 8614.5166 C-7835.6514 8614.4697 L-7836.0854 8614.5762 -7836.3379 8614.3486 -7836.3271 8614.6689 C-7836.4795 8614.4121 -7835.9063 8614.5518 -7836.1455 8614.1777 C-7837.5732 8614.5088 -7839.0459 8614.4434 -7840.4834 8614.4502 C-7840.6465 8614.3213 -7840.7505 8614.2822 -7840.7871 8614.1602 C-7840.9307 8614.2256 -7841.3281 8614.2197 -7841.4585 8614.3838 C-7841.4102 8614.377 -7841.5513 8614.2197 -7841.6274 8614.2041 C-7841.8887 8614.083 -7841.9131 8614.5557 -7842.2002 8614.4121 C-7842.0859 8614.3271 -7842.0469 8614.2236 -7842.0854 8614.1045 C-7842.3301 8614.3545 -7842.6577 8614.3145 -7842.9473 8614.3955 C-7842.9023 8614.3418 -7842.8325 8614.3096 -7842.8433 8614.209 C-7843.1602 8614.4922 -7843.4209 8614.1494 -7843.6982 8614.3281 C-7843.5947 8614.1436 L-7844.0415 8613.9189 -7843.7266 8614.5303 -7844.1128 8614.3975 C-7844.02 8614.3389 -7844.0527 8614.2666 -7844.0361 8614.1914 C-7844.3965 8614.5273 -7844.9795 8614.416 -7845.3389 8614.5303 C-7845.3174 8614.5049 -7845.3232 8614.4541 Y-7845.7148 8614.4961 -7846.1245 8614.3916 -7846.5552 8614.5381 C-7846.7119 8614.4561 -7846.5039 8614.0869 -7846.9185 8614.1553 C-7846.9033 8614.5264 -7847.6221 8614.3076 -7847.3779 8614.7275 C-7847.7319 8614.667 -7848.2925 8614.5273 -7848.5283 8614.6533 C-7848.3691 8614.5127 -7848.7007 8614.2002 -7848.4063 8614.1689 C-7848.6289 8613.9434 L-7848.5957 8613.792 -7848.3999 8613.9951 -7848.4707 8613.8037 C-7848.6182 8613.8193 -7849.0479 8613.9658 -7849.1797 8613.9053 C-7849.4531 8614.1328 -7849.7041 8614.5576 -7850.1465 8614.6045 C-7849.9385 8614.46 -7850.2646 8614.1953 -7850.1235 8614.1318 C-7850.7407 8614.8418 L-7850.8877 8614.8594 -7850.7725 8614.5498 -7850.9854 8614.6465 C-7850.9746 8614.7441 -7851.0674 8614.8057 -7851.1318 8614.8857 C-7851.1875 8614.8418 -7851.7441 8614.9775 -7851.8081 8614.6113 C-7851.8735 8614.4697 -7851.5684 8614.5361 -7851.7314 8614.4053 C-7852.0029 8614.4082 -7852.0151 8614.5342 -7852.2871 8614.54 C-7852.2925 8614.4912 L-7852.4717 8614.4365 -7852.8213 8614.6465 -7852.6265 8614.8486 C-7852.5015 8614.8594 -7852.6738 8614.6289 -7852.4888 8614.7354 C-7852.6152 8614.9473 -7852.9312 8615.0068 -7853.2031 8615.0098 C-7853.1104 8614.9521 -7853.1216 8614.8545 -7853.0845 8614.751 C-7853.4497 8615.0381 -7853.8369 8615.1289 -7854.2451 8615.249 C-7854.2515 8615.4229 -7854.0928 8614.9326 -7854.0327 8615.0244 C-7854.5557 8614.7832 -7855.1128 8615.3662 -7855.5479 8615.0137 C-7855.4766 8614.9834 -7855.5098 8615.2607 -7855.5146 8615.2119 C-7855.7666 8615.1904 -7855.7549 8614.9385 -7855.9189 8615.0313 C-7855.9355 8614.8838 -7856.1255 8615.0791 -7856.2944 8615.124 C-7856.3818 8615.2305 -7856.3384 8615.0518 -7856.1914 8615.0361 C-7856.4268 8615.1602 -7857.3691 8615.3877 -7857.9131 8615.1729 C-7857.9023 8615.2705 -7858.2471 8615.5313 -7858.3721 8615.5205 C-7858.3232 8615.292 L-7858.4375 8615.1553 -7858.7422 8615.3115 -7858.7632 8615.1162 C-7859.0303 8615.3936 -7857.7344 8614.8799 -7858.0957 8615.0938 C-7858.1895 8614.9033 -7858.5991 8615.458 -7858.5215 8615.1465 C-7858.7725 8615.1553 -7859.0161 8615.4121 -7859.2559 8615.1982 C-7859.1865 8615.2354 -7859.0522 8614.8809 -7859.2549 8614.8975 C-7859.6123 8614.9385 -7859.3564 8615.0068 -7859.6465 8615.083 C-7859.8281 8615.1768 L-7859.8398 8615.3994 -7860.1475 8615.1465 -7860.0146 8615.3955 C-7860.0586 8615.2119 -7860.5337 8615.5088 -7860.4971 8615.1396 C-7860.4473 8614.8486 L-7860.6016 8614.8701 -7860.7002 8615.1553 -7860.8213 8615.2832 C-7860.8418 8615.2568 -7860.8823 8615.1982 -7860.8745 8615.1514 C-7860.8994 8615.5967 -7861.2432 8615.1143 -7861.4268 8615.458 C-7861.7505 8615.3037 -7862.2495 8615.4434 -7862.4023 8615.167 C-7862.6514 8615.3018 -7862.8784 8615.4609 -7863.1621 8615.3662 C-7863.1055 8615.3242 -7863.0283 8615.3115 -7863.0122 8615.2158 C-7863.1904 8615.085 -7863.2344 8615.2021 -7863.3975 8615.2744 C-7863.3608 8615.208 -7863.7539 8615.0137 -7863.9521 8614.8564 C-7864.1992 8614.9893 -7864.1143 8615.2295 -7864.1392 8615.376 C-7864.3652 8614.9365 -7864.8379 8615.6592 -7865.1211 8615.2607 C-7865.0352 8615.2002 -7864.7598 8615.0449 -7864.9658 8614.9346 C-7865.1919 8614.4961 -7865.4219 8615.2578 -7865.7861 8615.0479 C-7865.6968 8615.4121 L-7865.8594 8615.1865 -7866.2334 8615.624 -7866.1963 8615.2529 C-7866.3184 8615.3838 -7866.6265 8615.1318 -7866.5859 8615.4873 C-7867.1846 8615.1865 -7868.0425 8615.6689 -7868.4102 8615.0313 C-7868.4961 8615.0908 -7868.7104 8615.0303 -7868.6665 8615.2129 C-7868.5239 8615.4111 -7868.4673 8615.0713 -7868.4141 8615.2061 C-7868.4912 8615.2168 -7868.5078 8615.3145 -7868.5161 8615.3633 C-7868.7021 8615.2822 -7868.8486 8615.2568 -7868.6729 8614.9609 C-7869.0869 8614.7412 -7869.1001 8615.5654 -7869.6274 8615.4258 C-7869.6035 8615.2793 -7869.6436 8615.2236 -7869.7979 8615.2471 C-7870.0903 8615.499 L-7870.4312 8615.4404 -7870.2842 8615.1641 -7870.2925 8614.915 C-7870.4746 8614.958 -7870.6973 8614.9463 -7870.7803 8615.1318 C-7871.0015 8614.8193 L-7870.8398 8615.0449 -7871.1514 8614.9697 -7871.2368 8615.0303 C-7871.1514 8614.9697 L-7871.1846 8614.8633 -7871.3955 8614.9287 -7871.5024 8614.96 C-7871.4766 8615.1143 -7871.2617 8615.1768 -7871.1445 8615.2217 C-7871.2373 8615.3311 -7871.3823 8615.3057 -7871.5059 8615.4346 C-7871.4648 8615.1904 -7871.8027 8615.2607 -7871.9473 8615.2354 C-7872.1133 8615.1826 -7872.1348 8615.4541 -7872.1831 8615.4463 C-7872.1875 8615.3193 -7872.4541 8615.4248 -7872.3247 8615.2471 C-7872.2681 8615.2061 -7872.1953 8615.3701 -7872.1016 8615.2578 C-7872.2109 8615.1641 -7872.1982 8614.9434 -7872.4258 8615.1045 C-7872.5967 8615.2256 -7872.3818 8615.5869 -7872.7061 8615.4326 C-7872.6211 8615.3721 -7872.6055 8615.2744 -7872.5391 8615.1865 C-7872.8433 8615.0596 L-7872.8564 8615.2822 L-7872.8975 8615.2256 -7872.8691 8615.2061 -7872.8877 8615.1768 C-7872.9785 8615.4111 -7873.3521 8615.249 -7873.4209 8615.5127 C-7873.5742 8615.5361 -7873.7441 8615.3584 -7873.8906 8615.333 C-7873.8623 8615.3135 L-7874.0415 8615.1826 -7874.2793 8615.2686 -7874.4297 8615.4189 C-7874.4219 8615.3701 L-7874.5195 8615.3525 -7874.7505 8615.3877 -7874.8735 8615.5186 C-7875.1201 8615.3506 -7874.9561 8614.6777 -7875.2295 8614.958 C-7875.48 8614.9658 -7875.6221 8615.3662 -7875.5215 8615.5088 C-7875.9717 8615.3584 -7876.4834 8615.7217 -7876.9009 8615.376 C-7876.9658 8615.4658 -7876.9248 8615.5225 -7877.0586 8615.5752 C-7877.7197 8615.4873 -7878.4551 8615.8389 -7878.9814 8615.4014 C-7878.79 8615.3076 -7878.9688 8615.1777 -7878.9727 8615.0518 C-7879.1309 8615.251 -7879.1631 8614.8447 -7879.2197 8615.1865 C-7879.2041 8615.3877 -7879.2197 8615.4854 -7879.0337 8615.5664 C-7879.4282 8615.6748 -7880.0283 8615.6748 -7880.2471 8615.4873 C-7880.1377 8615.5801 -7880.2227 8615.6416 -7880.3086 8615.7021 C-7880.2803 8615.3809 -7880.5713 8615.333 -7880.7915 8615.4463 C-7880.8223 8615.6416 L-7880.9658 8615.4404 L-7881.0503 8615.5029 -7881.0591 8615.8506 -7881.2773 8615.6631 C-7881.2891 8615.5869 -7881.3018 8615.5098 -7881.3418 8615.4541 C-7881.5693 8615.6143 -7881.8906 8615.8857 -7882.1377 8615.7197 C-7882.3398 8615.4346 L-7882.4453 8615.4658 -7882.6235 8615.6377 -7882.4375 8615.7197 C-7882.8594 8615.5479 -7883.1309 8615.5264 -7883.2646 8615.2793 C-7883.9912 8615.8809 -7885.0459 8615.9053 -7885.8906 8615.8623 C-7885.8652 8615.7158 L-7886.0923 8615.5791 -7885.9834 8615.9717 -7886.1416 8615.8701 C-7886.0684 8615.7305 -7886.3145 8615.5664 -7886.1362 8615.3955 C-7886.4609 8615.2412 -7886.5547 8615.6494 -7886.7656 8615.7158 C-7886.7979 8615.9082 -7886.5957 8615.5928 -7886.6367 8615.8369 C-7886.6729 8615.9053 -7887.0859 8615.6865 -7887.1362 8615.9775 C-7887.2178 8615.8633 -7887.1543 8615.6494 -7887.1104 8615.5313 C-7887.3086 8615.6729 L-7887.5513 8615.333 -7886.7559 8615.0654 -7887.0107 8614.6465 C-7887.1934 8614.6914 L-7887.3682 8614.3877 -7886.71 8614.3486 -7887.1689 8614.2441 C-7887.3682 8614.3877 -7887.5381 8614.8096 -7887.3608 8614.9385 C-7887.7754 8615.0186 -7887.5527 8615.6318 -7887.9985 8615.6074 C-7888.1201 8615.4365 -7887.6416 8615.5664 -7887.7275 8615.3271 C-7887.9375 8615.0928 -7888.1484 8615.458 -7888.3354 8615.376 C-7888.1279 8615.4854 -7888.3032 8615.7793 -7888.4375 8615.833 C-7888.6641 8615.6953 -7888.29 8615.5576 -7888.6113 8615.5273 C-7888.6641 8615.6953 -7888.9595 8615.8213 -7888.7041 8615.9385 C-7888.8203 8616.3193 -7889.0381 8615.833 -7889.2129 8616.1279 C-7889.3174 8615.8594 -7888.8823 8615.5088 -7889.2354 8615.375 C-7889.1792 8615.6328 -7889.6704 8615.7256 -7889.4839 8616.1074 C-7889.6221 8616.0342 -7889.6367 8615.8311 -7889.5361 8615.6729 C-7889.7334 8615.5137 -7890.0151 8616.1436 -7890.0801 8615.6318 C-7890.1479 8615.8955 L-7890.21 8615.8096 -7890.2983 8615.7441 -7890.3994 8615.6025 C-7890.5732 8615.5977 -7890.96 8615.96 -7890.9443 8615.5615 C-7891 8615.6025 -7891.3975 8615.585 -7891.2441 8615.8594 C-7890.9971 8616.0273 -7890.96 8615.6592 -7890.8223 8616.0313 C-7890.9971 8615.7275 -7891.1787 8616.0713 -7891.3213 8616.1729 C-7891.3447 8616.0186 L-7891.4297 8616.0791 -7891.6255 8616.0449 -7891.6787 8616.2119 C-7891.6133 8616.124 -7891.6475 8616.0186 -7891.7148 8615.9814 C-7891.8042 8616.2158 L-7892.1494 8616.333 -7891.8857 8615.8037 -7892.2217 8615.8721 C-7891.9663 8615.6904 L-7892.0225 8615.7295 -7892.1367 8615.5098 -7892.2979 8615.583 C-7892.3604 8615.7969 -7892.4775 8616.0537 -7892.5313 8616.2197 C-7892.7207 8616.3135 -7892.6162 8615.9785 -7892.8027 8616.1982 C-7892.5586 8615.9404 L-7892.5215 8615.8701 -7892.7231 8615.5869 -7892.9761 8615.5928 C-7893.1377 8615.667 -7893.3887 8615.9756 -7893.1338 8616.0928 C-7893.2607 8616.0967 -7893.4385 8615.9658 -7893.3379 8615.8096 C-7893.6255 8615.8838 -7893.2998 8616.04 -7893.5479 8616.1729 C-7893.6494 8616.0303 -7893.9658 8615.8271 -7894.1563 8615.6201 C-7893.8975 8615.2617 L-7894.0693 8615.2578 L-7893.8467 8614.9717 -7894.1826 8615.04 -7894.0566 8614.7373 C-7894.1743 8614.6904 -7894.3169 8614.793 -7894.4307 8614.8721 C-7894.0864 8615.3564 -7894.8159 8615.5342 -7894.7158 8615.9756 C-7895.1875 8616.0967 -7895.0107 8614.9014 -7895.5024 8615.5928 C-7895.4219 8615.708 -7895.6533 8616.0439 -7895.3564 8615.916 C-7895.6494 8615.8682 -7895.5557 8616.3594 -7895.9014 8616.1768 C-7895.6455 8615.9951 -7896.1763 8615.7295 -7895.8066 8615.4658 C-7895.8311 8615.6113 -7895.6001 8615.5762 -7895.5435 8615.5361 C-7895.6641 8615.3662 -7895.5186 8615.0908 -7895.8184 8615.0908 C-7896.0015 8615.1328 -7896.2524 8615.1416 -7896.2158 8615.3721 C-7896.2085 8615.625 -7895.9365 8615.3447 -7896.0537 8615.6006 C-7896.4185 8615.6885 -7896.4795 8615.3037 -7896.6304 8615.7529 C-7896.3999 8615.7168 -7896.3423 8615.9775 -7896.3467 8616.1514 C-7896.6143 8616.2568 L-7896.5625 8616.0889 L-7896.9922 8615.9678 -7896.6895 8616.3936 -7897.1055 8616.3486 C-7897.3008 8616.0166 L-7897.2017 8615.7305 -7896.6953 8616.1436 -7896.7695 8615.6777 C-7897.04 8615.6592 -7897.1299 8615.8955 -7897.3848 8615.7754 C-7897.3281 8615.7354 -7897.2505 8615.7236 -7897.1943 8615.6826 C-7897.2915 8615.667 -7897.3877 8615.0498 -7897.7734 8615.4111 C-7897.9727 8615.5518 -7897.8262 8615.5762 -7897.8311 8615.751 C-7898.2656 8615.8037 -7898.3955 8615.9814 -7898.6753 8616.0088 C-7898.6177 8615.6689 -7899.1699 8615.9756 -7898.8608 8615.6279 C-7898.7188 8615.8271 -7898.0903 8615.8076 -7897.9365 8615.4834 C-7898.0947 8615.0801 -7897.5952 8615.54 -7897.5024 8615.1318 C-7897.8506 8615.1221 -7897.8335 8614.7256 -7897.8896 8614.4658 C-7897.9863 8614.4473 -7898.0801 8614.5576 -7898.1377 8614.5977 C-7898.1787 8614.8418 -7898.0522 8614.8389 -7898.0449 8615.0908 C-7898.4336 8615.0244 -7898.8081 8615.1602 -7899.0225 8615.3994 C-7899.1523 8615.2783 -7899.1113 8615.0342 -7898.9575 8615.0098 C-7899.4199 8615.083 -7899.9141 8615.0498 -7900.3535 8614.9756 C-7900.0693 8615.375 -7900.8433 8615.0693 -7900.6494 8615.4014 C-7900.4141 8615.4912 -7900.2119 8615.7754 -7900.3418 8615.9541 C-7900.4888 8615.9287 -7900.3369 8615.7793 -7900.3984 8615.6943 C-7900.5859 8615.9121 -7900.6895 8615.3447 -7900.8735 8615.6885 C-7900.4512 8615.5596 -7900.7915 8615.2021 -7900.7139 8614.8896 C-7901.0186 8615.0654 -7900.7007 8614.667 -7901.0024 8614.667 C-7901.3057 8614.8408 -7901.6787 8614.9775 -7902.0161 8615.0449 C-7902.4399 8614.749 -7903.0898 8615.04 -7903.4683 8615.0518 C-7903.6665 8614.8936 -7903.5322 8614.54 -7903.7471 8614.4785 C-7903.9995 8614.4854 -7903.5601 8614.8594 -7903.9336 8614.6982 C-7903.8975 8614.6279 L-7904.0107 8614.709 -7904.5825 8614.3877 -7904.6929 8614.8955 C-7904.5776 8614.5127 L-7904.6475 8614.4775 -7904.7119 8614.5654 -7904.7695 8614.6064 C-7904.7725 8614.4814 -7904.8535 8614.3682 -7904.7402 8614.2861 C-7904.9707 8614.0225 -7905.2241 8614.3281 -7905.4746 8614.3389 C-7905.3135 8614.5654 L-7905.7422 8614.7432 -7906.0293 8614.5186 -7906.4443 8614.5977 C-7906.4316 8614.376 L-7906.6787 8614.5088 L-7906.6182 8614.293 -7906.8447 8614.1553 -7906.9751 8614.335 C-7906.3335 8613.792 L-7906.1553 8613.9229 -7906.5283 8614.0596 -7906.4165 8614.2783 C-7906.3213 8614.4697 -7905.9375 8614.4082 -7905.8755 8614.1953 C-7906.0225 8614.1709 -7906.0293 8614.2197 -7906.1436 8614.2998 C-7906.1919 8613.9912 -7905.9688 8614.0029 -7905.8584 8613.7969 C-7905.9355 8613.8096 -7906.0449 8613.7158 -7906.0615 8613.8135 C-7905.9102 8613.6631 -7905.7578 8613.6396 -7905.5059 8613.6318 C-7905.6763 8613.7529 -7905.4131 8613.8232 -7905.4775 8613.9111 C-7905.4575 8613.6396 -7905.2168 8613.5557 -7904.9053 8613.6318 C-7904.6831 8613.9463 -7904.3208 8613.4297 -7903.96 8613.5166 C-7904.1064 8613.792 -7904.2935 8614.0127 -7904.5127 8614.124 C-7904.2861 8614.2617 -7904.2607 8614.1162 -7904.0337 8614.2549 C-7903.9238 8614.0498 -7903.8457 8613.7354 -7903.5503 8613.6104 C-7903.5342 8613.8135 L-7903.2666 8613.709 -7903.2666 8613.4082 -7902.9258 8613.4658 C-7902.3418 8613.5654 -7901.7407 8613.5654 -7901.2949 8613.5908 C-7901.2783 8613.793 L-7901.0303 8613.3594 -7900.4521 8613.6328 -7900.1182 8613.4404 C-7899.5503 8613.6357 -7898.8848 8613.2471 -7898.5938 8613.5967 C-7897.5913 8613.4404 -7896.7148 8613.2881 -7895.6768 8613.3623 C-7895.8516 8613.6572 L-7895.6655 8613.4404 -7895.7305 8613.8271 -7895.5479 8613.7832 C-7895.7578 8613.5479 -7895.2949 8613.4775 -7895.1665 8613.2969 C-7894.7041 8613.5264 -7894.1104 8613.2754 -7893.7007 8613.0693 C-7893.6846 8613.2725 L-7893.2705 8612.8916 -7892.7759 8613.2256 -7892.2598 8613.2881 C-7892.2007 8613.3721 -7892.1074 8613.5625 -7891.9536 8613.54 C-7891.6738 8613.2119 -7891.5273 8613.2354 -7891.1167 8613.0303 C-7890.8169 8613.0303 -7890.3301 8613.1113 -7890.0254 8613.2393 C-7888.8975 8612.7783 -7887.7456 8613.0732 -7886.5732 8612.7959 C-7886.4888 8613.0342 L-7885.3521 8612.5244 -7883.9541 8612.9873 -7882.9839 8612.7256 C-7883.0776 8613.1328 L-7882.7734 8613.2578 -7882.3843 8613.0264 -7882.4619 8612.7373 C-7882.1567 8612.8623 -7881.7007 8612.54 -7881.5068 8612.875 C-7881.1953 8612.9502 -7881.1255 8612.6865 -7880.8662 8612.6318 C-7880.2422 8612.7861 -7880.0107 8612.751 -7879.4224 8612.6748 C-7879.5684 8612.6494 L-7879.6328 8612.7393 -7879.6387 8612.9121 -7879.4922 8612.9385 C-7879.2725 8612.8242 -7878.6846 8613.0479 -7878.9033 8612.5615 C-7878.2754 8612.8418 -7877.4385 8612.333 -7876.8271 8612.7119 C-7876.8789 8612.5791 -7876.7246 8612.5537 -7876.6602 8612.4639 C-7876.1089 8612.458 -7875.5293 8612.7295 -7875.0898 8612.5029 C-7875.0024 8612.5693 -7875.2295 8612.7295 -7875.0049 8612.7432 C-7874.8721 8612.6914 -7875.0024 8612.5693 -7874.8384 8612.4951 C-7873.9453 8612.2471 -7873.0303 8612.751 -7872.2188 8612.6865 C-7870.7754 8612.4297 -7869.2695 8612.5596 -7867.8867 8612.5166 C-7867.9023 8612.6143 L-7867.4395 8612.2412 -7866.8159 8612.9961 -7866.4463 8612.4346 C-7866.3369 8612.5273 -7866.0283 8612.4785 -7866.1094 8612.667 C-7865.7407 8612.4033 -7865.0771 8612.915 -7864.5439 8612.5801 C-7864.5928 8612.5713 -7864.6211 8612.5908 -7864.6777 8612.6328 C-7864.1392 8612.8486 -7863.6641 8612.5537 -7863.0957 8612.749 C-7863.1533 8612.791 -7863.2583 8612.8213 -7863.2754 8612.9189 C-7863.0557 8613.1064 -7862.7549 8612.5068 -7862.6348 8612.9775 C-7862.5088 8612.9736 -7862.5449 8612.7412 -7862.6221 8612.7549 C-7861.3779 8612.9385 -7860.0498 8612.6377 -7858.7549 8612.5303 C-7857.8271 8612.8115 -7858.6982 8613.3232 -7857.9663 8612.9717 C-7857.9063 8613.0625 -7857.9229 8612.792 -7857.9131 8612.8896 C-7857.6299 8612.7578 -7857.4717 8613.415 -7857.2754 8613.1689 C-7857.3564 8612.8799 -7857.1445 8613.0068 -7857.1387 8612.8311 C-7856.5713 8613.0186 -7856.4575 8613.2793 -7856.0098 8613.0596 C-7856.0435 8613.2119 L-7855.5186 8612.7822 -7854.9102 8613.0127 -7854.4673 8612.5166 C-7851.5728 8612.4258 -7848.7983 8612.1514 -7845.9761 8612.0938 C-7843.1865 8612.1885 -7840.4551 8611.9658 -7837.6221 8612.2295 C-7836.9585 8612.6289 -7836.9087 8612.6182 -7836.1797 8612.4561 C-7836.2095 8612.5205 -7836.2549 8612.5361 -7836.2061 8612.5967 C-7836.1699 8612.2686 -7835.6929 8612.5654 -7835.6235 8612.2529 C-7834.5762 8612.3135 -7833.6113 8612.2236 -7832.5337 8612.2217 C-7832.7041 8612.2568 -7832.7896 8612.5244 -7832.5869 8612.5029 C-7832.3755 8612.293 L-7832.3408 8612.3857 L-7832.2021 8612.3369 -7832.0513 8612.1748 -7832.1943 8612.0693 C-7829.4873 8611.7861 -7826.8242 8612.4434 -7824.1729 8612.3633 C-7823.5439 8612.5 -7822.6475 8612.375 -7821.9629 8612.3076 C-7819.9355 8612.7441 -7818.1084 8613.0977 -7816.0479 8612.792 C-7816.3174 8613.6396 -7817.1675 8613.835 Vf-7907.2578 8613.6357 m-7907.1855 8613.7998 -7906.9497 8613.8896 -7907.1377 8614.1074 C-7907.1611 8613.9541 -7907.2822 8613.7822 -7907.2578 8613.6357 Cf-7900.9619 8615.3232 m-7900.9536 8615.2744 -7900.8721 8615.3896 -7900.8521 8615.416 C-7900.9297 8615.4287 -7901.0024 8615.5664 -7901.0645 8615.4814 C-7900.9854 8615.4697 -7900.9976 8615.3916 -7900.9619 8615.3232 Cf-7899.3521 8615.4209 m-7899.3765 8615.5664 -7899.7207 8615.6826 -7899.9238 8615.7002 C-7899.3521 8615.4209 Lf-7897.8521 8616.0225 m-7897.7227 8616.1455 -7897.7583 8616.2129 -7897.9326 8616.209 C-7897.9453 8616.1318 -7897.8877 8616.0928 -7897.8521 8616.0225 Cf-7897.7456 8615.6904 m-7897.6211 8615.6865 -7897.5591 8615.7725 -7897.4985 8615.8564 C-7897.5029 8615.7305 -7897.7871 8615.9346 -7897.7456 8615.6904 Cf-7894.4893 8616.1143 m-7894.4111 8616.1025 -7894.2417 8615.9814 -7894.1689 8616.1436 C-7894.2505 8616.0303 -7894.5498 8616.3281 -7894.4893 8616.1143 Cf-7892.9761 8615.8936 m-7892.9272 8615.9033 -7892.9072 8615.9297 -7892.8506 8615.8896 C-7892.7607 8615.9561 -7892.8555 8616.0625 -7892.9312 8616.0762 C-7892.9761 8615.8936 Lf-7865.4287 8615.3076 m-7865.5923 8615.3799 L-7865.5684 8615.2354 L-7865.4287 8615.3076 Lf-7853.3574 8615.2998 m-7853.1943 8615.208 -7853.2441 8615.4365 -7853.2168 8615.458 C-7853.3643 8615.4736 -7853.1621 8615.2783 -7853.3574 8615.2998 Cf-7846.8486 8614.5713 m-7846.8984 8614.5752 L-7846.8818 8614.2754 L-7846.8486 8614.5713 LfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 2)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7559.2031 8616.3926 m-7559.2031 8586.5557 L-7908 8586.5557 L-7908 8616.3926 L-7559.2031 8616.3926 Ln0 O0.74902 0.678431 0.670588 0.901961 0 0 0 Xa-7721.6924 8588.3203 m-7727.9551 8590.3545 -7733.6455 8593.6973 -7740.3755 8595.8867 c-7749.04 8598.7061 -7760.0127 8601.1855 -7769.1592 8601.4199 c-7787.6572 8601.8936 -7802.6895 8596.4883 -7820.8486 8593.8652 c-7859.9404 8588.2188 -7887.2383 8599.3672 -7908 8611.6719 C-7878.3955 8597.8311 -7843.3955 8592.1357 -7810.3418 8601.6758 c-7795.6709 8605.9102 -7775.8994 8615.0459 -7760.5762 8616.2295 c-7746.3735 8617.3262 -7731.6104 8612.709 -7718.6709 8607.332 c-7710.7705 8604.0498 -7701.8672 8599.5811 -7693.0615 8600.2334 c-7683.5889 8600.9355 -7676.6816 8605.9443 -7666.4951 8603.9248 c-7657.4092 8602.125 -7649.7979 8598.9746 -7640.2197 8599.2559 c-7630.8652 8599.5313 -7622.4995 8604.0352 -7612.9155 8604.6553 c-7594.5449 8605.8438 -7577.1211 8599.1895 -7559.2031 8596.6797 C-7568.0469 8597.8271 -7578.5449 8594.9424 -7587.7852 8595.1553 c-7594.9961 8595.3232 -7602.25 8597.1436 -7609.2935 8597.0752 c-7627.2607 8596.9014 -7645.3438 8593.0996 -7663.1055 8595.584 c-7680.6191 8598.0332 -7692.4707 8587.5068 -7709.5479 8586.5996 c-7714.0264 8586.3613 -7717.9609 8587.1084 -7721.6924 8588.3203 cfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 4)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7869.8936 8616.3926 m-7869.8936 8613.9883 L-7908 8613.9883 L-7908 8616.3926 L-7869.8936 8616.3926 Ln0 O0.74902 0.678431 0.670588 0.901961 0 0 0 Xa-7908 8614.2246 m-7907.6582 8614.9326 -7907.4141 8615.6582 -7907.4595 8616.3926 C-7901.1274 8615.7813 -7894.8965 8615.4355 -7888.2031 8615.335 c-7882.0723 8615.2422 -7875.9951 8615.7148 -7869.8936 8615.6406 c-7873.2764 8615.6855 -7876.9395 8615.0293 -7880.2598 8614.7559 c-7884.7275 8614.3887 -7888.9727 8614.1553 -7893.5078 8614.1787 c-7897.8555 8614.1992 -7903.8691 8613.709 -7908 8614.2246 CfU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe ArtOnPath Br) -(ush Tool/ Charcoal/ Adobe ArtOnPath Brush Tool/ Art Brush 4/ A) -(dobe ArtOnPath Brush Tool/ Art Brush 2/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Art Brush 2)(1 / Unnamed Brush Pat 2/ / / / / 0 1 /  0 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Art Brush 4)(1 / Unnamed Brush Pat 4/ / / / / 0 1 /  0 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Charcoal)(1 / Unnamed Brush Pat/ / / / / 5 0.137255 0.121569 0.12549 /  ) -(1 1 1.2 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 1 1 1 Xa(White)Pc0.74902 0.678431 0.670588 0.901961 0 0 0 Xa(Black)Pc0 0.992157 1 0 1 0 0 Xa(RGB Red)Pc0.062745 0 0.964706 0 1 1 0 Xa(RGB Yellow)Pc0.627451 0 1 0 0 1 0 Xa(RGB Green)Pc0.517647 0 0.12549 0 0 1 1 Xa(RGB Cyan)Pc0.882353 0.768627 0 0 0 0 1 Xa(RGB Blue)Pc0.270588 0.815686 0 0 1 0 1 Xa(RGB Magenta)Pc0.168627 0.980392 0.92549 0.066667 0.756863 0.152941 0.176471 Xa(R=193 G=39 B=45)Pc0.003922 0.992157 0.972549 0 0.929412 0.109804 0.141176 Xa(R=237 G=28 B=36)Pc0 0.796078 0.968627 0 0.945098 0.352941 0.141176 Xa(R=241 G=90 B=36)Pc0 0.501961 0.984314 0 0.968627 0.576471 0.117647 Xa(R=247 G=147 B=30)Pc0 0.34902 0.870588 0 0.984314 0.690196 0.231373 Xa(R=251 G=176 B=59)Pc0.047059 0 0.933333 0 0.988235 0.933333 0.129412 Xa(R=252 G=238 B=33)Pc0.188235 0 0.980392 0 0.85098 0.878431 0.129412 Xa(R=217 G=224 B=33)Pc0.501961 0 0.992157 0 0.54902 0.776471 0.247059 Xa(R=140 G=198 B=63)Pc0.745098 0 0.996078 0 0.223529 0.709804 0.290196 Xa(R=57 G=181 B=74)Pc0.862745 0.176471 1 0.039216 0 0.572549 0.270588 Xa(R=0 G=146 B=69)Pc0.901961 0.333333 0.988235 0.258824 0 0.407843 0.215686 Xa(R=0 G=104 B=55)Pc0.760784 0 0.74902 0 0.133333 0.709804 0.45098 Xa(R=34 G=181 B=115)Pc0.784314 0.090196 0.458824 0 0 0.662745 0.615686 Xa(R=0 G=169 B=157)Pc0.698039 0.14902 0 0 0.160784 0.670588 0.886275 Xa(R=41 G=171 B=226)Pc0.87451 0.52549 0 0 0 0.443137 0.737255 Xa(R=0 G=113 B=188)Pc0.992157 0.964706 0.035294 0.003922 0.180392 0.192157 0.572549 Xa(R=46 G=49 B=146)Pc1 1 0.262745 0.247059 0.105882 0.078431 0.392157 Xa(R=27 G=20 B=100)Pc0.745098 0.984314 0.007843 0.003922 0.4 0.176471 0.568627 Xa(R=102 G=45 B=145)Pc0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 Xa(R=147 G=39 B=143)Pc0.34902 1 0.372549 0.109804 0.619608 0 0.364706 Xa(R=158 G=0 B=93)Pc0.117647 1 0.494118 0.007843 0.831373 0.078431 0.352941 Xa(R=212 G=20 B=90)Pc0 0.968627 0.203922 0 0.929412 0.117647 0.47451 Xa(R=237 G=30 B=121)Pc0.227451 0.27451 0.4 0 0.780392 0.698039 0.6 Xa(R=199 G=178 B=153)Pc0.4 0.427451 0.52549 0.066667 0.6 0.52549 0.458824 Xa(R=153 G=134 B=117)Pc0.505882 0.529412 0.607843 0.235294 0.45098 0.388235 0.341176 Xa(R=115 G=99 B=87)Pc0.576471 0.603922 0.639216 0.419608 0.32549 0.278431 0.254902 Xa(R=83 G=71 B=65)Pc0.227451 0.384314 0.635294 0.011765 0.776471 0.611765 0.427451 Xa(R=198 G=156 B=109)Pc0.317647 0.490196 0.741176 0.098039 0.65098 0.486275 0.321569 Xa(R=166 G=124 B=82)Pc0.360784 0.572549 0.839216 0.227451 0.54902 0.384314 0.223529 Xa(R=140 G=98 B=57)Pc0.392157 0.639216 0.933333 0.356863 0.458824 0.298039 0.141176 Xa(R=117 G=76 B=36)Pc0.415686 0.698039 0.968627 0.490196 0.376471 0.219608 0.07451 Xa(R=96 G=56 B=19)Pc0.478431 0.733333 0.835294 0.682353 0.258824 0.129412 0.043137 Xa(R=66 G=33 B=11)PcBb2 (Linear Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 1)PcBb0 0 0 0 Bh2 (Radial Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 1)PcBb2 (Linear Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 2)PcBb0 0 0 0 Bh2 (Radial Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 2)Pc(Offset Squares Pattern) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Offset Squares Pattern)Pc0 g(K=100)Pc0.1 g(K=90)Pc0.2 g(K=80)Pc0.3 g(K=70)Pc0.4 g(K=60)Pc0.5 g(K=50)Pc0.6 g(K=40)Pc0.7 g(K=30)Pc0.8 g(K=20)Pc0.9 g(K=10)Pc0.95 g(R=241 G=241  B=242)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 Au1 Ap0 O0 J 0 j 1 w 4 M []0 d0 XR515.0391 123.7295 m78.6279 123.7295 L78.6279 713.209 L515.0391 713.209 L515.0391 123.7295 LBb0 0 0 0 Bh1 (Unnamed gradient 90) 605.3965 666.6797 -117.9509 201.286 1.2424 0 0 1.1285 -2217.7832 -1017.7031 Bg-117.2152 -200.654 -220.9061 106.4692 451.2598 662.8447 Bmf0 BBuu0 Ap0.654902 0.584314 0.568627 0.372549 0.298039 0.298039 0.298039 Xa278.6172 362.7627 m270.4795 363.2217 263.9443 361.6572 256.3027 362.1924 c251.5215 362.5654 245.9531 363.5195 242.1182 367.2109 c237.9131 370.8838 238.4854 377.7139 240.2227 382.5459 c242.3047 387.6084 246.6387 390.7393 249.7246 394.7334 c253.5156 398.4082 253.4512 405.4658 249.6631 409.5225 c242.3027 418.2705 228.9546 418.1445 224.1909 423.333 c222.1641 425.4141 222.2363 428.7549 223.0635 433.29 c223.9063 437.1362 224.7729 438.2588 228.7715 441.2588 c232.3477 443.6152 238.1904 448.7959 239.5547 454.5908 c240.3652 457.0947 241.2988 462.3579 237.375 465.9033 c233.9111 468.6304 231.3408 468.4478 229.1812 468.7808 c224.7695 469.1533 221.2827 469.0488 218.3521 470.5269 c215.6836 472.1162 213.9473 476.105 214.6943 480.0552 c218.1094 488.0063 221.3691 492.4336 220.5605 497.8721 c220.4082 494.2207 219.5996 491.0063 217.0625 487.291 c214.084 484.001 211.2358 476.6772 214.3096 472.2783 c216.9365 467.2627 222.3359 467.0532 226.8296 466.5674 c229.2026 466.2451 231.6445 466.248 234.3833 464.8027 c237.6621 463.2212 237.9844 458.4355 237.0391 455.9956 c235.7417 450.5508 230.6831 446.2041 226.9106 443.7378 c222.877 441.001 220.7261 438.4238 219.854 434.2354 c218.7964 429.8135 218.4619 425.3359 220.6924 421.9854 c222.832 418.4326 227.751 416.5615 232.1523 414.6914 c236.0811 413.04 240.7686 411.2412 243.7441 408.2324 c246.749 405.3389 247.4111 400.9346 245.4336 400.2891 c243.7813 398.4014 239.4971 395.8926 235.1123 391.2412 c230.1235 385.0742 228.3486 379.4746 228.4092 371.7412 c228.5498 364.4014 234.2993 356.9707 239.5811 354.2373 c244.8857 351.1846 249.7705 350.2432 254.3506 349.5518 c263.4482 348.3779 271.5732 349.2549 278.668 349.083 c287.2383 349.0205 297.8203 344.2217 306.8945 340.9014 c311.6631 338.8291 317.3604 338.7168 320.7793 343.4092 c324.2002 347.626 325.5293 351.8877 329.627 355.3955 c333.1143 358.4912 338.0645 361.46 342.8125 358.4121 c347.6816 355.4541 347.7148 348.2646 346.0732 343.2451 c339.4336 333.8213 354.4727 321.5 365.3672 330.6895 c373.7754 336.5859 379.1807 352.9404 386.1611 339.0986 c392.501 338.2773 393.5303 345.2061 395.7217 349.4736 c397.8115 354.2988 400.6934 359.1445 404.6514 363.2041 c400.7344 359.2822 396.7842 354.5781 393.541 349.7158 c391.8477 347.2119 390.4063 344.9766 389.0117 343.9746 c387.748 342.7822 387.5684 344.0723 388.0391 343.4463 c387.3477 343.2354 388.373 346.292 382.9854 349.8359 c377.5254 351.2021 375.3027 348.3369 373.4375 347.042 c369.8623 343.7373 367.5273 340.3076 364.7373 337.376 c361.2695 333.6348 357.7178 331.4805 353.9834 332.4082 c349.4033 333.8828 347.0127 335.4805 347.9922 338.7031 c348.3135 342.5059 351.9629 348.3574 349.3389 356.1494 c347.9717 359.5107 345.125 363.0947 340.8242 364.0156 c336.7441 365.0586 333.1514 363.9287 330.4326 362.458 c319.3506 357.6055 315.4141 341.9658 312.709 345.5898 c309.2988 346.7803 303.1016 352.1982 294.5293 357.665 c289.9756 360.5303 283.4531 362.6533 278.6172 362.7627 CfUu0.662745 0.592157 0.580392 0.411765 0.278431 0.278431 0.278431 Xa227.7632 494.918 m226.0952 491.8174 224.3979 490.04 224.1733 490.6875 c222.4316 487.2544 219.3398 484.9482 217.0947 481.3071 c215.291 477.4731 216.0039 472.4688 219.3027 469.6836 c222.6655 467.0176 226.8086 466.5391 230.5103 465.5781 c234.4097 465.0269 237.8574 462.2998 235.9829 458.3101 c234.3628 450.5464 223.4946 448.7856 222.2437 439.8911 c220.1611 432.2822 223.3218 422.4482 231.7881 420.3027 c239.0488 417.501 247.9482 417.1279 252.8008 410.5078 c259.1455 403.29 250.4609 396.0107 246.8096 389.6455 c243.0811 382.8154 242.7051 372.0674 250.8164 367.9697 c257.8271 363.458 266.4395 363.0283 274.543 361.7744 c290.2236 361.4443 300.7021 344.6377 316.8086 347.3594 c324.2314 350.4609 324.3867 360.8584 332.3633 363.1328 c335.666 364.7412 340.0596 365.001 342.7871 362.2998 c345.5078 359.6543 346.2285 355.6318 345.5957 351.9463 c345.2236 348.2734 343.7773 344.4043 345.2432 340.6426 c347.0068 336.96 351.1953 335.6777 354.8232 334.9941 c363.2676 333.6367 368.2881 341.6094 373.876 345.9971 c376.2422 348.3936 381.3789 350.9424 382.4375 346.333 c382.9453 342.1055 388.9971 340.376 391.6553 343.833 c396.5996 349.7158 400.0166 356.54 406.0791 361.2178 c399.001 356.376 396.4922 347.3369 389.0918 342.2803 c386.9111 341.4941 384.3535 342.5146 383.2969 344.5635 c382.3857 346.4453 381.9932 349.1973 379.5889 349.085 c375.3467 348.4717 372.3076 344.6572 369.0977 341.9248 c366.0107 338.9912 362.6396 335.6865 358.2012 335.2539 c353.9873 334.8896 349.3408 336.2256 346.4678 339.2979 c341.9912 346.5479 350.6855 356.8779 342.5059 363.1807 c337.4805 366.7988 330.9883 363.8584 327.0781 360.2988 c323.0625 356.374 322.0439 349.9697 316.9258 348.0439 c306.3398 345.7139 296.918 353.873 287.5898 358.7676 c277.5313 363.833 265.918 362.3174 255.8965 366.3311 c250.9482 368.0635 245.9824 371.5576 245.252 376.9502 c244.6553 382.1689 246.2012 387.8213 249.4844 392.1826 c252.0986 396.3154 257.7979 401.1748 255.418 407.8154 c253.2686 413.8936 246.8799 417.0322 241.0518 418.6152 c235.2793 420.3584 228.5449 421.4756 225.0649 426.4795 c222.0674 431.3945 222.3452 438.8271 225.1362 443.7983 c228.251 448.6831 235.8813 451.082 237.4072 458.1533 c239.0635 461.3691 236.3662 465.8379 233.0488 466.3389 c230.001 467.3711 226.9819 467.7764 224.2383 468.7461 c218.3203 470.0083 215.9307 476.9033 218.9502 481.3267 c222.2773 485.3823 226.4028 489.8398 227.7632 494.918 CfUu0.670588 0.603922 0.592157 0.45098 0.258824 0.258824 0.258824 Xa227.7544 494.8164 m226.3018 491.8887 224.8271 490.1338 224.5376 490.7383 c223.1821 487.4126 220.4663 485.103 218.7178 481.4609 c217.4727 477.7305 218.3716 473.1895 221.5601 470.7246 c224.7144 468.3135 228.5303 467.7686 231.9761 466.853 c235.4932 466.2114 239.0088 464.1777 238.0859 460.4561 c237.3867 453.2271 227.123 450.5913 227.4487 442.0176 c226.3379 434.6069 230.6294 426.5073 238.0459 424.2881 c244.6973 421.4775 252.7969 420.2861 256.7852 413.7354 c262.2715 406.9912 254.9092 400.0771 252.209 393.6416 c249.1758 387.0449 248.8994 377.3877 256.3037 373.3564 c262.8066 369.042 270.9404 369.1709 278.501 368.4912 c285.71 368.1631 292.043 364.6787 297.6895 360.4316 c303.5195 356.5762 310.5361 353.8174 317.6445 354.7021 c325.1748 356.5889 326.0469 366.3145 333.3613 368.0889 c336.5361 369.4404 340.5439 369.2412 343.042 366.7627 c345.4912 364.252 346.2275 360.6006 346.085 357.1611 c345.9775 353.7217 344.9756 350.0654 346.417 346.6357 c348.1084 343.2314 351.9961 342.0654 355.3652 341.4092 c363 339.7783 368.542 346.1973 374.0518 349.9238 c376.5986 352.1943 381.1504 353.249 382.0039 349.0947 c382.7451 345.2705 388.1055 343.6143 390.8262 346.5605 c395.7568 351.751 399.4238 357.7646 405.127 361.9912 c398.4971 357.6416 395.5039 349.5752 388.3408 345.2764 c386.2637 344.7119 383.9883 345.6211 382.8477 347.4541 c381.9258 349.2539 381.5488 351.542 379.5957 352.0771 c375.6152 352.2988 372.4912 348.7227 369.251 346.6016 c363.5957 340.5615 353.4121 339.6621 347.6016 345.4209 c343.5264 352.1006 349.9541 361.79 342.8027 367.5967 c338.3428 371.085 332.0527 369.0635 328.2979 365.7334 c324.7666 361.9707 322.6719 356.8174 317.7979 355.4053 c307.7246 353.6787 298.9639 360.4004 290.665 365.8135 c281.3408 371.1045 270.3174 368.2021 261.043 371.9131 c256.418 373.4229 251.9521 376.833 251.2529 381.7881 c250.6631 386.6201 252.001 391.8271 254.459 396.2256 c256.5576 400.3408 261.2412 405.0771 259.2021 411.1807 c257.2695 416.7197 252.042 420.4639 246.5869 422.2891 c241.251 424.2988 235.3447 425.7412 231.6533 429.999 c228.0786 434.1709 227.9868 440.9678 229.5864 446.0195 c231.6543 450.9268 238.8213 453.6401 239.5127 460.4609 c240.4131 463.8667 237.2109 467.1855 234.3657 467.668 c231.542 468.6099 228.7485 469.0513 226.2085 469.9722 c220.7954 471.2485 218.2563 477.2197 220.5356 481.6089 c223.2607 485.5918 226.7158 490.0957 227.7544 494.8164 CfUu0.682353 0.611765 0.603922 0.494118 0.239216 0.239216 0.239216 Xa227.7456 494.7168 m226.5 491.9521 225.2437 490.2168 224.8901 490.7715 c223.9224 487.561 221.5708 485.2246 220.3965 481.5898 c219.6675 478.0264 220.7593 473.9131 223.8276 471.7583 c229.1216 467.3252 239.2676 469.5444 240.0186 462.4985 c240.3232 455.9688 230.8896 452.0195 232.9419 444.1313 c232.7524 436.978 237.7891 430.6489 244.2793 428.1514 c250.3984 425.3804 257.5498 423.2686 260.7803 416.9014 c265.2988 410.624 259.623 403.9268 257.5645 397.6143 c255.1025 391.2949 255.0986 382.4961 261.8447 378.6299 c267.7559 374.1768 275.502 374.8291 282.4785 375.4902 c289.2744 375.7236 294.8984 371.5684 299.9297 367.4873 c305.0811 363.2783 311.9414 361.6387 318.4707 362.2324 c325.623 363.0596 327.6357 371.8174 334.2881 373.1074 c341.1455 375.8008 346.9629 368.9053 346.5078 362.4063 c346.6738 359.1963 346.0674 355.7725 347.5039 352.6377 c349.1553 349.499 352.7734 348.4551 355.8965 347.8164 c362.8281 345.9502 368.6162 350.9561 374.1797 353.7959 c381.5283 360.6494 381.501 343.2529 389.9619 349.2529 c394.9502 353.6904 398.8076 358.9502 404.1748 362.7627 c397.9678 358.8662 394.5479 351.7061 387.5488 348.2559 c385.582 347.9229 383.5508 348.751 382.3896 350.4092 c381.4619 352.0713 381.0811 354.1006 379.4951 354.958 c375.9121 356.0264 372.5859 352.7734 369.3418 351.3213 c363.4209 346.5771 354.0947 346.6104 348.6738 351.5615 c344.7725 357.6689 349.5449 366.7783 343.0635 372.0674 c339.0869 375.4697 333.1621 374.1924 329.4121 371.2646 c326.0957 367.9229 323.2158 363.6611 318.6738 362.8584 c309.0967 361.46 301.0283 366.9736 293.7617 372.96 c285.2373 379.4619 274.5781 373.1494 266.2383 377.2451 c261.9922 378.7451 257.9678 382.04 257.2383 386.5352 c256.585 390.9678 257.5918 395.874 259.5264 400.1631 c261.1328 404.2783 264.6973 408.8701 262.998 414.4697 c261.2324 419.4951 257.1367 423.6729 252.1338 425.8496 c247.3105 428.1914 241.959 429.7627 238.3096 433.5552 c234.5049 437.2065 233.8071 443.0552 234.3154 448.1489 c234.9697 453.0698 241.8105 456.1768 241.416 462.7397 c240.4063 470.2002 232.1226 469.1206 228.21 471.1787 c223.25 472.4746 220.6016 477.5825 222.1499 481.9058 c224.2339 485.8188 227.001 490.3438 227.7456 494.7168 CfUu0.690196 0.623529 0.615686 0.537255 0.219608 0.219608 0.219608 Xa227.7383 494.6226 m226.6924 492.0166 225.6504 490.3032 225.2373 490.7983 c224.6372 487.7251 222.7217 485.3184 222.125 481.7749 c221.8794 478.4277 223.1284 474.7441 226.0254 472.834 c231.166 468.7939 239.75 470.3467 241.8154 464.5234 c242.8779 458.8408 235.6689 453.2529 238.6055 446.5005 c239.4082 439.8843 244.6504 434.8726 250.2959 432.0757 c255.9307 429.2495 261.8555 426.207 264.6377 420.248 c268.3887 414.501 264.7617 407.8984 263.1162 401.8604 c261.29 395.9893 260.8125 387.6982 267.1396 384.0439 c272.8545 380.1689 280.0371 381.3135 286.5215 381.7207 c292.917 382.5811 298.2637 378.792 302.4883 374.4268 c307.0059 370.1455 313.6182 368.7803 319.6152 369.8379 c326.125 370.3789 329.29 377.6768 335.4619 378.1982 c341.9463 379.7822 346.6943 373.29 346.876 367.4033 c347.2783 364.4404 347.0859 361.2314 348.6455 358.4395 c350.3818 355.6904 353.6943 354.6885 356.6426 354.2637 c362.8906 352.5029 368.7246 355.8975 374.3574 357.6582 c377.2539 359.123 380.3848 358.0283 381.1367 354.7197 c382.2158 351.668 386.3076 350.0791 389.1123 351.9346 c394.1787 355.5479 398.1768 360.1025 403.2227 363.5342 c397.4307 360.042 393.6143 353.7764 386.7832 351.2207 c382.3867 350.6143 381.2012 355.4619 379.375 357.7822 c376.3047 359.499 372.7188 356.9707 369.5205 356.1924 c363.3379 353.1504 355.1357 353.3213 349.8105 357.5225 c345.7871 363.0088 349.1406 371.4424 343.5039 376.4092 c340.0986 379.8262 334.5566 379.4521 330.752 377.1152 c327.3018 374.3916 323.9746 371.2549 319.7881 370.4912 c315.6436 369.9033 311.0869 370.1084 307.3262 371.9385 c303.4893 373.8076 300.748 377.2666 297.1387 379.9316 c288.8789 385.2959 279.3408 380.043 271.29 382.9541 c267.332 384.2578 263.6768 387.2979 263.0205 391.5049 c262.3037 395.6748 263.4883 400.1523 264.8604 404.3428 c265.9785 408.4043 268.335 412.9482 266.707 417.9795 c265.0107 422.5303 261.8896 426.8247 257.4443 429.4023 c253.1719 432.0693 248.3604 433.8398 244.8184 437.2603 c241.1191 440.582 239.6816 445.4863 239.3818 450.4697 c238.9414 455.0732 244.4678 459.0522 243.1533 465.0674 c240.7344 471.1597 234.0557 470.3989 230.1548 472.3896 c225.6104 473.7305 222.959 478.0806 223.8081 482.272 c225.2183 486.0986 227.252 490.5908 227.7383 494.6226 CfUu0.694118 0.631373 0.619608 0.584314 0.2 0.2 0.2 Xa227.728 494.5332 m226.8735 492.064 226.04 490.3662 225.5742 490.7939 c225.3135 487.8667 223.8989 485.354 223.8916 481.979 c224.0913 478.8755 225.5142 475.6133 228.229 473.8989 c233.2036 470.228 240.5254 471.0938 243.5469 466.3589 c245.2383 461.4526 241.2012 454.7393 244.4131 449.1455 c246.1689 443.2256 251.2129 439.1006 256.1592 435.9917 c267.1064 430.939 273.5293 417.9307 268.7754 406.1816 c267.3516 400.6494 266.6855 392.9385 272.5986 389.4453 c277.9756 385.7197 284.7441 387.3955 290.7119 388.2471 c296.7217 389.6514 301.7402 385.8896 305.1895 381.3271 c309.0791 376.7998 315.5527 376.0137 321.0439 377.332 c326.7773 378.2061 330.8525 383.9248 336.6338 383.4775 c342.6318 383.5527 346.5029 377.7861 347.2266 372.3184 c347.8115 369.585 348.0596 366.5811 349.8203 364.1895 c351.6709 361.8545 354.7129 360.9658 357.4863 360.5928 c363.2646 358.7275 368.8193 362.1973 374.4102 361.2695 c377.3555 361.96 379.8213 360.6143 380.6768 357.6221 c381.8701 354.8848 385.3809 353.3037 388.2061 354.5654 c393.3877 357.2637 397.5 361.207 402.2695 364.3057 c396.8447 361.1768 392.6582 355.6689 385.959 354.1826 c382.0273 354.0537 380.6328 358.1611 379.0752 360.5713 c376.5732 362.3467 372.7148 361.1455 369.707 361.5098 c363.543 359.7393 356.2793 359.9209 350.959 363.4111 c346.6211 368.2139 348.8447 376.0654 343.9033 380.7275 c340.9883 383.8896 336.1113 385.0361 332.1123 383.2822 c328.4355 381.4629 325.0078 378.8896 321.1777 378.002 c317.2871 377.249 313.0547 377.0254 309.5693 378.7842 c306.0391 380.6289 303.915 384.1885 300.6328 386.8955 c292.8076 392.2725 284.0029 385.9248 276.4902 388.5107 c272.8086 389.667 269.4551 392.5674 268.8652 396.4736 c268.2656 400.3994 269.332 404.5137 270.2949 408.6094 c272.9893 416.5713 270.1592 426.8311 262.624 432.9116 c255.0068 438.1519 245.8662 443.0151 244.7354 452.9604 c243.2246 457.2822 247.0518 461.833 244.7461 467.1997 c241.457 471.9253 235.978 471.7114 232.1431 473.5693 c227.9443 474.9614 225.3135 478.6558 225.481 482.6816 c226.1758 486.4043 227.4678 490.7983 227.728 494.5332 CfU0.701961 0.639216 0.631373 0.635294 0.176471 0.176471 0.176471 Xa227.7163 494.4502 m227.0464 492.0918 226.4194 490.4009 225.9082 490.7554 c225.1641 485.6704 224.9404 478.3716 230.4932 474.999 c235.2837 471.6055 241.5859 471.7285 245.292 467.9609 c247.5762 463.5649 247.2754 457.0918 250.2539 452.2725 c252.8369 447.1396 257.3164 443.3765 261.7441 440.0127 c270.6738 433.7817 276.6572 421.8887 274.5254 410.792 c273.416 405.5518 272.4355 398.3066 278.002 394.8818 c283.1182 391.2598 289.5498 393.4404 295.0127 394.8252 c297.6045 395.334 300.4854 395.5146 302.8086 394.1338 c305.0635 392.6748 306.3301 390.1328 308.1846 388.1865 c311.6172 383.7979 317.9746 382.6426 322.9336 384.8857 c327.9385 386.2822 332.7109 390.9033 337.9932 388.8252 c343.3203 387.373 346.3779 382.1855 347.5928 377.0771 c348.2266 371.6045 352.6729 366.708 358.4922 366.8867 c363.8125 365.8896 369.2949 366.6865 374.457 365.2158 c377.2393 365.0107 379.1689 363.2881 380.1563 360.6523 c381.4102 358.124 384.4658 356.6904 387.209 357.2061 c392.54 358.7783 396.7568 362.2881 401.3145 365.0771 c396.2021 362.2959 391.6045 357.3164 385.0752 357.2256 c381.623 357.6055 380.0244 360.9941 378.6367 363.4658 c376.5625 365.6709 372.9688 365.499 370.1162 366.2305 c364.0732 366.7637 357.5117 366.3145 352.1738 369.2119 c347.3848 373.1797 348.5752 380.5283 344.3926 385.0537 c341.8574 388.1104 337.9912 390.3662 333.8203 389.8193 c329.9111 389.0654 326.5215 386.6943 323 385.5625 c319.3623 384.167 315.5566 383.832 312.2402 385.6875 c308.9355 387.4756 307.1807 390.9229 304.3789 393.8525 c296.7656 399.4561 288.7842 391.6807 281.6855 394.0811 c278.2285 395.0908 275.1309 397.9248 274.6709 401.6025 c274.2041 405.3311 275.2598 409.1641 275.8545 413.1797 c276.7891 421.2656 273.0615 429.498 267.5527 436.5039 c261.0957 442.5771 252.6885 447.1201 250.1504 455.917 c247.9893 459.938 249.2461 464.4907 246.291 469.0146 c242.6426 472.6079 237.9258 472.9717 234.2241 474.7339 c230.3418 476.2236 227.665 479.3096 227.1719 483.1494 c227.0713 486.7402 227.6675 490.9492 227.7163 494.4502 Cfu0.709804 0.647059 0.639216 0.678431 0.156863 0.156863 0.156863 Xa227.7007 494.3745 m227.2148 492.0864 226.8008 490.3853 226.252 490.6621 c226.2808 485.4951 227.6099 479.0444 232.7266 476.02 c237.3984 472.9014 243.1211 472.5054 247.1875 469.3872 c252.9941 460.9561 258.3652 450.9883 266.9561 444.2949 c271.3174 440.9063 273.5996 436.0537 275.7344 430.9956 c277.665 426.0391 281.7773 421.3662 280.3438 415.7725 c279.5342 410.7412 278.0332 403.7988 283.3701 400.3389 c288.3594 396.6982 294.4961 399.6514 299.5498 401.3818 c301.9512 402.085 304.8359 402.5117 306.9141 400.8975 c308.9033 399.251 309.7227 396.6182 311.2764 394.5498 c314.1582 389.4814 320.8955 390.1914 325.2354 392.5869 c329.5381 394.7002 335.2578 398.0215 339.4629 394.1475 c343.8281 391.29 346.3438 386.5479 348.001 381.7031 c349.2256 376.3955 354.3857 372.8838 359.7266 373.1494 c364.8164 372.6191 370.1045 372.1807 374.3271 369.0439 c379.3584 367.6143 379.5889 359.6729 386.0918 359.8145 c391.4893 360.1777 395.9404 363.2998 400.3604 365.8486 c395.4775 363.3037 390.3311 358.9014 384.0791 360.2119 c380.9863 361.085 379.417 364.0957 378.0537 366.5459 c376.125 368.666 373.1582 369.8232 370.6719 371.2754 c365.1797 373.6367 358.8613 372.7354 353.4736 374.9033 c348.1816 377.9248 348.3555 384.9033 344.874 389.3916 c342.6318 392.4795 339.8955 395.3467 335.9922 396.4541 c332.0029 396.8994 328.4307 394.7822 325.2148 393.2617 c321.9092 391.7754 318.1953 390.6123 314.9854 391.9961 c311.835 393.6338 310.7119 397.3369 308.4004 400.4541 c301.1133 406.8096 293.6592 397.4229 286.9111 399.6475 c283.6045 400.5029 280.7109 403.374 280.4531 406.9053 c280.1494 410.5107 281.248 414.1768 281.5283 418.1523 c280.3027 426.0903 275.9785 432.5137 272.1855 440.3652 c266.667 447.0605 259.1641 451.7935 255.2734 459.5859 c252.6299 463.2964 251.2227 466.8857 248 470.5894 c244.25 473.4292 239.9541 474.1357 236.353 475.8384 c228.0137 478.6108 227.7905 487.7168 227.7007 494.3745 CfUu0.713725 0.654902 0.643137 0.717647 0.137255 0.137255 0.137255 Xa227.6826 494.3047 m227.5054 492.0684 227.2329 490.3301 226.6572 490.5283 c227.5 485.3198 230.1387 479.835 234.9883 477.0454 c239.6191 474.1709 245.0137 473.3564 249.3301 470.6938 c257.751 464.5542 264.4531 456.4551 271.9297 448.9443 c275.9004 445.2202 277.3809 440.2148 279.2021 435.0991 c280.6377 429.8394 287.0605 426.8809 286.1836 421.1592 c285.7822 416.2295 283.499 409.5068 288.6621 405.8408 c293.6533 402.0459 299.5117 405.9971 304.2383 408.001 c306.4502 408.8623 309.5225 409.5928 311.1846 407.4482 c312.7246 405.4658 313.248 402.8525 314.6152 400.6904 c317.4482 395.2607 324.416 397.8193 328.0391 400.626 c331.9688 403.5635 338.5596 404.4248 341.0703 399.2598 c344.2988 395.3389 346.3848 390.7236 348.5273 386.1221 c350.501 380.9746 356.2627 379.1113 361.252 379.4033 c366.3174 379.3369 371.1406 377.1504 374.1875 372.9971 c378.2129 370.0869 379.1865 363.7783 384.8916 362.5049 c390.1846 361.5361 395.0557 364.2412 399.4043 366.6182 c394.6699 364.1758 388.7861 360.5674 383.0381 363.2666 c380.3105 364.6006 378.8213 367.4199 377.3555 369.8105 c375.5195 371.9893 373.4063 374.1016 371.3936 376.1318 c366.9004 380.3115 360.3848 379.2783 354.9629 380.5098 c349.1699 382.4033 348.1709 389.0811 345.4043 393.6533 c343.5303 396.8896 341.6045 400.0498 338.7051 402.5918 c335.1826 404.7129 330.9072 403.1807 327.9385 401.2881 c324.8506 399.3838 321.5996 397.3877 318.2725 398.4404 c314.9678 399.458 314.2451 403.5205 312.5488 406.7549 c310.4766 411.1738 304.9219 409.4619 302.0977 407.9424 c298.8271 406.376 295.4863 404.6572 292.1221 405.2139 c288.8926 405.9307 286.1904 408.96 286.2314 412.4307 c286.0576 415.9932 287.4619 419.5479 287.0693 423.6504 c286.2266 427.8911 282.6299 429.8862 281.166 433.4395 c279.1709 436.7158 278.75 440.7305 276.6484 444.606 c271.9434 451.8135 265.1572 456.9941 259.7861 463.6221 c256.4463 466.8511 253.458 469.0073 250.001 472.0244 c246.1973 474.3276 242.1299 475.2715 238.5674 476.9409 c230.8262 479.7339 228.3218 487.749 227.6826 494.3047 CfUu0.721569 0.662745 0.647059 0.752941 0.117647 0.117647 0.117647 Xa227.6567 494.2427 m227.7349 492.0371 227.6719 490.2529 227.0771 490.3721 c230.2944 478.8545 242.6611 475.6191 251.7656 472.0342 c256.2998 469.478 261.4473 467.7764 265.5273 464.6987 c269.5566 461.3555 273.498 457.8652 276.8193 453.8008 c280.5264 449.7817 281.3994 444.6616 282.6563 439.3521 c283.7451 433.5303 291.3926 432.3096 291.9102 426.7861 c292.1914 421.8604 288.915 415.2764 294.0107 411.3428 c299.1445 407.3184 304.627 412.6025 309.1416 414.7588 c311.2285 415.9619 314.5654 416.3955 315.4863 413.6094 c316.5156 411.3174 316.6982 408.6689 318.0664 406.458 c321.8486 401.332 327.8525 406.2881 331.1602 409.0928 c335.5947 412.5049 341.625 409.2207 342.6787 404.0693 c344.8213 399.5 346.4297 394.6514 349.2734 390.3857 c352.1367 385.4951 358.2607 385.4785 363.0439 385.6914 c368.2979 385.7578 371.9414 381.4453 374.1504 377.0283 c376.8926 372.918 378.7969 367.6846 383.6914 365.3057 c388.624 363.0137 394.0977 365.0869 398.4482 367.3896 c393.7217 364.8916 387.0625 362.4834 382.0166 366.3818 c377.4014 370.1758 375.4053 375.9648 372.1406 380.7129 c369.0137 386.3037 362.1543 386.1982 356.6836 386.1904 c350.5879 386.7695 348.041 393.0361 345.9805 397.8115 c344.4443 401.1816 343.2227 404.6455 341.3545 407.9209 c339.2383 411.3662 334.2051 411.9404 331.041 409.7471 c327.8867 407.7393 325.4834 404.6807 321.9199 404.8906 c318.3262 404.9873 317.6563 409.2568 316.6484 412.6465 c316.3027 414.3193 314.7852 416.7598 312.3926 416.4854 c310.3281 416.3379 308.6045 415.4619 307.0059 414.542 c303.8555 412.7178 300.7676 410.4404 297.4219 410.749 c294.21 411.3018 291.6436 414.5723 292.0273 418.042 c291.9863 421.5391 293.832 425.3286 292.1914 429.4292 c290.0039 433.1221 286.1865 434.1538 284.5732 437.6768 c282.5342 440.8169 282.9297 445.0161 281.1836 449.1104 c277.1572 456.7158 270.6143 462.4863 263.6152 467.6138 c256.0791 471.7324 248.2998 475.3652 240.8115 478.0605 c233.3857 480.9834 228.916 487.7202 227.6567 494.2427 CfUu0.72549 0.666667 0.65098 0.788235 0.098039 0.098039 0.098039 Xa227.6235 494.186 m227.8545 491.9487 228.0669 490.1504 227.4912 490.207 c239.9189 469.3975 268.8379 477.2578 281.7764 458.7886 c285.5186 454.5986 285.5195 449.1367 286.2012 443.6934 c287.0137 437.2627 295.1221 437.2817 297.3428 432.5015 c298.9648 427.6211 294.1533 420.9795 299.4326 416.791 c304.9131 412.6377 309.7451 419.5 314.2129 421.7002 c316.458 423.5518 319.6074 422.4502 319.583 419.3574 c320.1543 416.8975 319.9922 414.0811 321.7041 411.9678 c327.1338 408.3193 330.6084 415.6826 334.5742 417.7041 c340.2168 419.4639 343.7061 413.501 344.1797 408.6221 c345.4004 403.7334 346.3711 398.2617 350.3193 394.6221 c354.1152 390.1357 360.2891 392.0791 365.002 391.9697 c370.3125 391.2998 372.46 385.6123 374.1563 381.0322 c375.7705 376.1943 378.2588 371.293 382.585 368.2139 c386.8965 364.625 393.0195 365.9414 397.4902 368.1602 c392.5674 365.4668 385.3252 364.7061 381.0879 369.5479 c376.4531 373.5576 374.9805 379.6982 372.749 385.0566 c371.5508 387.6973 369.9883 390.4209 367.248 391.7031 c364.4648 392.9033 361.4004 392.1416 358.5576 391.9717 c352.501 391.3975 348.0283 396.709 346.5146 401.8379 c345.3232 405.3877 344.8047 409.0771 343.6699 412.709 c342.7871 416.5332 338.6494 419.4248 334.625 418.3486 c330.6895 416.9502 329.3389 412.5986 325.918 411.8838 c321.9482 410.2412 320.7793 414.5967 320.5537 418.1807 c320.1309 419.7861 320.3115 422.4932 317.6572 423.3135 c315.2793 423.5879 313.6357 422.3096 312.0615 421.333 c308.9521 419.2705 306.1963 416.4004 302.833 416.2549 c299.6064 416.5947 297.0938 420.1553 297.8359 423.6631 c298.0508 427.0044 300.1465 431.6484 296.7412 435.1357 c293.6484 437.6982 289.6426 438.499 287.9482 441.8638 c286.0762 445.0479 287.4287 449.4282 285.8398 453.7178 c282.6641 461.8418 275.3652 468.1797 267.04 471.1211 c251.1445 476.3232 231.8677 480.002 227.6235 494.186 CfUUu277.9336 509.9121 m274.5459 511.6396 269.667 510.8398 266.0537 510.4648 c260.7598 509.915 255.5547 508.6899 250.4375 507.2529 c243.2109 505.2217 236.5859 503.3486 227.4126 503.8765 C227.4111 503.8584 227.4126 503.8418 227.4111 503.8247 C227.7041 503.2744 227.917 502.6777 228.0068 502.0283 c228.0703 501.5596 228.123 501.0879 228.168 500.6143 C241.415 499.2437 253.376 503.9209 266.0742 505.7241 c268.7852 506.1084 271.5137 506.3789 274.248 506.5093 c276.4922 506.6157 279.6416 507.3062 281.7852 506.5264 C280.1553 507.2065 279.4541 509.1367 277.9336 509.9121 cBb1 (Unnamed gradient 66) 254.7358 532.7285 -90.2851 95.9838 1 0 0 1 0 0 Bg-0.477609 -95.9826 -58.3591 0.290395 283.9141 532.5835 Xm-40.5278 -8144.645 -58.3591 0.290395 324.4414 8677.2285 Bc-0.477609 -95.9826 -58.3591 0.290395 283.9141 532.5835 Bm-40.5278 -8144.645 -58.3591 0.290395 283.4365 436.6011 Bcf0 BB297.7695 485.293 m291.3838 489.7681 280.3652 490.46 272.7842 491.1162 c265.9131 491.7109 259.0176 492.0264 252.1289 492.3511 c243.6875 492.7495 235.6255 493.8555 227.3789 494.5146 C227.2241 494.1982 227.0532 493.8867 226.8496 493.583 c226.3672 492.8569 225.8491 492.2202 225.29 491.666 C229.0469 491.1392 232.7788 490.9209 236.5479 490.0664 c250.4014 486.9268 264.3887 485.1089 278.624 485.7295 c294.3789 486.4141 308.3848 477.8809 295.3018 462.3125 c300.5801 468.5928 307.3486 478.5732 297.7695 485.293 cBb1 (Unnamed gradient 70) 262.4902 506.2476 -86.1863 48.7157 1 0 0 1 0 0 Bg3.2402 -48.6078 -85.8032 -5.71965 308.2939 509.3008 Xm543.0161 -8146.0396 -85.8032 -5.71965 -234.7222 8655.3398 Bc3.2402 -48.6078 -85.8032 -5.71965 308.2939 509.3008 Bm543.0161 -8146.0396 -85.8032 -5.71965 311.5342 460.6929 Bcf0 BB363.5889 493.3862 m362.5488 494.8877 361.1113 496.3076 359.1934 497.6528 c345.6582 507.1489 339.9893 522.5713 333.7617 537.1797 c331.9121 541.5137 317.1055 587.458 316.4473 587.2383 c315.4102 586.8911 314.3154 586.731 313.2432 586.7842 C314.4258 584.0601 315.6152 581.3418 316.8477 578.6504 c325.1367 560.2344 325.1201 547.5342 333.2539 529.4688 c340.418 513.5601 360.1133 498.833 358.4668 480.0684 c356.9063 462.2754 342.2119 452.627 329.9863 442.2676 c319.6309 433.4927 312.3584 425.2339 309.7451 411.6709 c306.5459 395.0732 306.2451 378.3467 303.8037 361.6611 c300.6982 340.4287 295.7607 319.5811 296.2813 297.0645 c296.6797 281.8984 299.5215 268.8311 299.6611 252.4697 c299.5234 236.0283 297.0742 228.4092 293.0332 215.2646 c289.4258 204.21 284.6885 193.1787 278.4033 182.7227 C283.1035 187.9414 284.3359 185.8975 285.7285 185.0039 C293.0156 199.4004 299.1865 217.0986 300.7988 235.6309 c302.5781 254.127 300.9375 272.5791 300.3379 289.1064 c298.9717 312.1816 302.1455 335.9063 305.1836 360.167 c306.5947 369.1904 307.874 378.1592 309.5273 387.1611 c312.7695 404.8447 314.8877 421.6064 327.5645 435.4009 c339.3242 448.1978 356.7861 456.582 363.085 473.8237 c365.9004 481.5308 367.332 487.9795 363.5889 493.3862 cBb1 (Unnamed gradient 70) 279.2041 415.1953 121.1166 104.0879 1 0 0 1 0 0 Bg-53.7907 89.1114 210.8561 127.2799 174.0532 351.7227 Xm-4336.1304 7183.3784 210.8561 127.2799 4510.1836 -6831.6553 Bc-53.7907 89.1114 210.8561 127.2799 174.0532 351.7227 Bm-4336.1304 7183.3784 210.8561 127.2799 120.2627 440.834 Bcf0 BB314.5693 557.9863 m312.3721 562.998 310.2324 567.9482 308.9707 573.2734 c308.2451 576.335 306.9424 580.9839 306.0664 584.3687 C305.4365 584.0244 305.3066 582.4878 304.6162 582.3027 C307.1729 572.8184 309.7891 563.3398 312.6221 553.9731 c316.2373 542.0146 318.8984 529.7783 321.0732 517.4814 c324.3691 500.4492 320.1729 482.9307 305.1221 466.1079 C301.9863 462.272 298.5449 458.4355 294.1914 455.5195 c290.0859 452.939 284.0518 450.0635 279.0508 453.6201 C274.8672 457.0688 272.8418 461.585 269.4199 465.0352 C266.1787 468.6016 262.3203 471.5391 258.1768 473.7329 c249.9043 478.1343 240.5332 479.9287 231.3223 481.1221 C224.3721 481.9287 L222.833 482.0923 L226.0957 484.9648 228.9326 488.6323 230.2349 492.9741 c234.1377 507.1689 224.2949 516.1807 221.7861 530.4897 C221.4292 533.3955 221.8481 536.6709 223.481 539.165 c225.3525 542.0195 226.7549 543.5742 224.585 546.6782 c222.3584 549.8599 219.6689 552.5127 217.708 555.9541 C212.3931 564.3721 212.3662 575.8135 219.5811 583.5142 C214.8887 579.8936 213.8794 581.335 212.438 582.4253 C208.3384 575.6274 207.9937 565.895 211.7192 558.3516 c213.4697 554.5249 215.9233 551.0928 218.7534 548.0532 c221.6421 544.8677 224.314 544.7314 221.8442 540.3481 c220.6304 538.1943 219.7856 535.8438 219.7813 533.3423 C219.5713 528.5444 220.9409 524.4736 222.2036 520.7163 c224.9609 513.3452 227.4668 506.6865 227.5171 500.1807 c227.5903 495.7046 226.0728 491.4585 223.1855 487.792 c221.7261 485.9766 219.9766 484.3193 218.0918 482.7715 C218.0049 482.6978 L217.9614 482.6606 L218.1484 481.9546 217.9927 482.5298 217.9102 482.8354 c218.0078 482.4775 218.2871 481.438 218.9517 478.9688 C218.9814 478.9668 L219.2227 478.9526 L219.7056 478.9229 L220.6685 478.8647 L222.5981 478.7446 L226.4497 478.5215 L236.644 477.9038 247.1338 477.123 256.5254 472.7822 c265.8018 468.6484 270.2012 461.8013 275.5391 454.3115 C277.0088 452.4961 279.4658 450.4053 282.6084 449.8955 c285.6914 449.4141 288.4102 450.1411 290.7656 450.9771 c295.5928 452.7695 299.7881 455.9751 303.3594 459.5669 C309.6982 466.4463 315.0547 472.6187 319.5596 480.6162 c323.7412 488.4004 325.9932 496.9146 326.4082 505.3389 c326.917 522.4233 321.1221 542.0654 314.5693 557.9863 cBb1 (Unnamed gradient 70) 318.0732 365.8594 108.5009 159.7036 1 0 0 1 0 0 Bg-50.6771 151.4499 114.6628 38.3676 261.0728 346.7861 Xm-2582.897 7719.062 114.6628 38.3676 2843.9697 -7372.2764 Bc-50.6771 151.4499 114.6628 38.3676 261.0728 346.7861 Bm-2582.897 7719.062 114.6628 38.3676 210.3955 498.2358 Bcf0 BB250.4746 436.144 m250.6582 437.1602 250.8867 438.165 251.0859 439.1768 C242.9639 444.5576 234.2329 450.1538 226.8877 455.0044 c220.1719 459.5894 212.3604 464.8457 209.0283 472.8896 C206.1167 480.9517 209.834 486.2896 212.0864 494.1636 c216.3408 509.3442 212.3647 523.5313 207.2246 537.0522 c203.4209 547.3413 202.2246 556.0088 201.2778 567.0488 c200.2065 576.8486 206.3257 585.8037 214.9482 587.0303 C214.5356 588.8677 212.0488 589.7446 210.9648 591.3306 C200.8198 584.0542 199.9014 574.0591 200.3057 561.3804 c200.4941 553.9946 199.9624 548.7485 201.3022 541.6558 c203.0737 533.6934 205.6826 528.0879 207.5122 521.248 c209.5723 513.9189 211.2188 506.8301 209.6782 497.271 c208.0454 488.8882 204.7798 480.7617 207.3833 472.7007 c209.9531 465.0068 215.1626 458.3574 222.0464 453.6289 C226.877 450.5825 231.8027 449.2207 236.9209 446.1362 c242.0508 442.9995 243.5928 440.1758 247.4102 436.7275 c248.3486 435.8687 249.3242 435.0469 250.3145 434.2373 C250.3086 434.8667 250.3574 435.5049 250.4746 436.144 cBb1 (Unnamed gradient 47) 271.2891 350.2051 108.5009 159.7042 1 0 0 1 0 0 Bg-50.6773 151.4505 45.1868 15.1201 248.7783 342.6729 Xm-2569.0012 7677.5342 45.1868 15.1201 2817.7793 -7334.8613 Bc-50.6773 151.4505 45.1868 15.1201 248.7783 342.6729 Bm-2569.0012 7677.5342 45.1868 15.1201 198.1011 494.1235 Bcf0 BB281.0068 268.248 m279.2236 272.6621 277.291 276.6328 276.6621 279.8994 C276.2617 283.3838 276.2412 287.5977 277.3359 291.5273 c279.2939 299.5342 284.042 308.1924 283.4658 317.7246 c282.6875 330.5986 279.1895 342.083 276.4248 354.5615 c274.9297 361.3037 271.2871 375.0127 279.3047 379.1514 C275.5898 379.5752 275.1777 381.2139 273.1299 378.2324 c271.8145 376.3174 272.6299 371.1465 272.7695 368.9307 c273.1924 362.2412 274.9775 355.7461 276.3555 349.2158 c278.3057 339.9736 278.4238 333.5303 278.8096 325.1553 c279.3916 315.4609 278.3682 308.6494 275.0342 299.7842 c271.8496 289.9141 270.8574 280.1211 276.957 269.8545 C279.2197 265.0742 281.7959 260.0723 282.9326 254.5449 c284.1396 248.9277 282.249 243.332 279.7998 239.0811 c277.123 234.7686 272.5313 232.5967 267.7705 231.8184 c264.1338 231.3301 l263.6787 231.2637 l263.5654 231.2461 263.5439 231.2432 V263.7793 231.7129 261.4512 227.1533 262.4385 229.0801 c262.4521 229.0547 l262.4785 229.0029 l262.582 228.7939 l263.002 227.96 l263.8652 226.3018 l264.9785 224.0693 266.0879 221.7988 267.0664 219.4248 c269.7969 213.1035 272.4512 206.8945 271.8496 198.9531 c271.0088 191.0303 268.1152 187.8818 264.5488 182.6143 c261.3994 178.207 257.9697 173.8477 253.582 170.2568 C256.8857 171.2852 257.9492 169.4023 259.0049 168.1416 C264.4805 173.9785 269.667 181.7031 272.1689 190.5557 c274.8115 199.3379 274.5811 208.9932 272.0225 216.8896 c271.1777 219.6709 270.0518 222.3711 268.6934 224.9346 c268.0596 226.2393 267.3555 227.5049 266.5664 228.7236 c265.4336 230.5762 l265.3652 230.6924 l265.3457 230.7197 265.3428 230.7285 V262.4785 225.127 264.5537 229.1768 263.9326 227.9316 c264.001 227.9463 l264.2695 228.0107 l264.8086 228.1338 l265.8848 228.3818 l271.4434 229.6406 277.7471 232.1357 280.8672 237.7637 c283.5781 242.9482 285.3682 247.7139 285.0469 253.3545 c284.6035 258.6865 282.9385 263.4248 281.0068 268.248 cBb1 (Unnamed gradient 6) 244.2119 341.1445 108.5009 159.704 1 0 0 1 0 0 Bg-50.6772 151.4503 89.7865 30.0437 199.3188 326.123 Xm-2641.3579 7893.7744 89.7865 30.0437 2840.6768 -7567.6514 Bc-50.6772 151.4503 89.7865 30.0437 199.3188 326.123 Bm-2641.3579 7893.7744 89.7865 30.0437 148.6416 477.5732 Bcf0 BB322.793 359.1514 m322.5732 357.5205 322.293 355.8545 321.959 354.8682 C321.8818 354.543 321.8135 354.5781 321.7949 354.4365 C322.8633 354.0537 323.8535 352.9814 323.9756 352.8037 c324.0654 352.6133 l324.084 352.5605 l324.2725 352.1963 323.6699 353.3389 324.5098 351.7383 c324.4707 351.8359 l324.3359 352.2314 l324.1846 352.7666 324.1387 353.3154 324.2031 353.8486 C324.1846 355.0693 325.3633 355.9014 324.9238 355.626 c324.2578 355.8877 l321.7158 357.082 318.7031 358.8877 315.9023 360.5205 c310.2051 363.8545 304.5527 367.1865 298.8701 370.4268 c293.3096 373.6709 287.291 377.0791 280.9609 379.2197 c277.8818 380.4609 274.5498 381.3057 271.8662 383.1445 c269.0566 385.0459 268.9248 389.001 269.1631 392.3623 c269.5527 397.4453 270.1279 402.6992 273.7109 405.9775 C275.1426 407.7822 277.7773 408.5605 278.3896 411.6729 C278.2197 414.7021 276.3066 416.3516 274.6846 418.2822 C268.6084 420.9639 264.4932 417.0977 260.0107 417.7588 C255.9365 417.6592 252.9834 422.0615 251.582 426.8213 c249.4053 435.6348 251.9932 444.9941 252.9326 453.8506 c254.0195 460.5259 254.124 469.915 249.3076 475.333 c245.1943 479.9644 239.2109 479.5767 233.8149 481.269 C238.9521 479.6582 245.7695 472.8677 248.4766 468.2998 c252.0098 462.3408 250.7031 454.585 250.6748 448.0596 c250.6338 438.8643 246.7031 426.9019 255.6572 417.6396 C261.3457 413.6768 269.1787 418.0986 272.6484 416.292 C273.3877 415.5488 275.8232 411.1689 274.8066 411.8252 C274.6738 411.7275 270.7051 409.374 268.4326 406.0146 c265.4873 401.9209 265.2188 397.3057 264.707 393.8115 C264.5078 390.3564 263.4355 384.9072 268.0879 380.1533 C272.3818 376.7041 275.5508 376.3525 278.7109 374.9912 c281.6729 373.8877 285.2227 372.5889 287.7031 371.3594 c294.1875 368.0283 300.3867 364.7314 306.8281 361.3076 c310.0547 359.5801 313.3584 357.7842 316.8398 355.9111 c318.5781 354.9932 320.3721 354.001 322.2207 353.1846 c324.5908 352.1533 324.2383 351.8506 325.085 354.3828 C326.4971 361.7744 325.9258 370.2451 327.7852 378.2783 c328.3359 380.2529 328.8223 382.4258 330.6523 384.0049 c332.7793 385.6865 335.3262 384.1943 336.6797 382.998 c339.6104 380.3271 342.1133 377.1279 343.75 373.9443 C344.1445 370.3428 342.1387 366.8916 341.292 363.1982 c340.8438 361.3369 340.4092 359.3545 340.8623 357.1709 c341.25 354.876 343.3926 353.0967 345.3623 352.4873 c349.2041 351.335 353.876 350.8467 357.5625 354.0469 C360.9854 357.583 360.5977 362.3799 359.7549 366.165 c358.4873 371.4814 355.9648 375.9873 352.8496 379.915 c352.4795 380.4248 352.0186 380.8457 351.6045 381.3027 C351.7305 383.748 352.7617 382.0439 353.3076 382.6123 C354.6299 382.6533 355.9805 382.5859 357.334 382.3857 c360.0439 382.0029 362.7676 381.1436 365.4131 379.8965 c375.9414 374.5732 378.5244 369.3584 387.0547 364.3369 c394.1484 359.7656 404.3828 359.8271 412.0117 364.4365 C406.875 363.4795 407.0254 366.1357 406.4355 367.5703 C397.7764 362.5439 386.7578 367.9463 376.5605 375.4756 c371.2949 378.9922 365.5313 382.749 358.6973 384.4326 c356.9941 384.8252 355.2578 385.1055 353.5098 385.1865 c352.2002 385.2256 l351.873 385.2334 l351.792 385.2354 351.7715 385.2354 V352.3008 386.4131 347.0605 375.002 349.2842 379.8271 c349.3018 379.8027 l349.374 379.7109 l349.6582 379.3457 l350.0488 378.8936 350.4219 378.3369 350.79 377.7676 c352.2627 375.4912 353.4941 372.9346 354.4834 370.4209 c357.375 363.5859 358.2568 354.1885 349.5459 354.7842 C345.5869 354.7686 342.4004 356.3086 343.0645 360.5342 C343.29 364.5186 345.3906 368.2451 345.4229 373.2471 C343.7725 378.4541 341.0879 380.3047 338.3838 383.5137 C336.8945 384.7607 335.3242 386.5596 331.9795 386.3701 C328.4512 385.6377 327.4512 382.7764 326.6553 381.0967 C323.9648 373.5742 323.8252 366.5264 322.793 359.1514 cBb1 (Unnamed gradient 70) 338.8809 372.8223 108.5009 159.7036 1 0 0 1 0 0 Bg-50.6771 151.4499 133.6592 44.7241 270.3623 349.8945 Xm-2628.3545 7854.9126 133.6592 44.7241 2898.7168 -7505.0186 Bc-50.6771 151.4499 133.6592 44.7241 270.3623 349.8945 Bm-2628.3545 7854.9126 133.6592 44.7241 219.6851 501.3442 Bcf0 BB318.459 405.4619 m315.7676 402.1318 313.8516 398.6025 312.3047 395.1328 C311.209 392.5518 L310.9492 391.916 L310.8223 391.5967 l318.3799 395.3857 312.9121 392.6455 314.5967 393.4922 C314.5859 393.4922 L314.5654 393.4922 L314.5244 393.4951 L314.4443 393.4961 L314.2813 393.5 L312.9824 393.5225 l311.2402 393.5361 309.5557 393.6436 307.8848 393.8232 c304.6836 394.2705 301.1934 395.0752 300.2979 398.0625 c299.5371 401.2217 301.7051 404.9756 304.083 407.873 c305.8926 410.1787 308.0078 411.7471 309.7646 414.0186 c309.8691 417.2305 308.041 419.4414 306.1123 421.4795 c301.9131 425.2866 296.5049 427.1133 290.6963 428.7529 c285.6934 430.1533 280.5781 431.8384 278.417 435.7021 c276.2578 439.5537 278.0332 444.3271 280.6377 447.8086 c279.1191 448.9111 276.5977 447.8193 274.7275 448.2744 c273.0498 442.4888 274.2734 435.272 279.2725 432.3496 c283.9023 429.3838 289.502 428.563 295.9873 425.5308 c299.5391 423.874 302.2822 421.8564 304.0586 419.5264 c304.9229 418.3564 305.543 417.1543 305.8232 415.9639 c305.9248 415.3486 306.0498 414.7852 306.0313 414.168 C306.0547 413.7285 l305.834 414.1904 305.9287 415.2607 306.0742 415.54 C306.1611 415.8701 l306.0977 415.9219 305.8418 415.6924 305.5479 415.4619 c302.6055 413.0811 299.2432 409.999 297.0693 405.7568 c296.0137 403.6309 295.0459 400.9775 295.5264 397.8057 c295.9912 394.5596 298.4648 392.1699 300.5205 391.2158 c305.2822 389.082 309.2939 389.5518 313.4326 389.627 c315.8535 392.4639 316.4297 397.3604 319.3848 401.4912 c321.7646 405.3076 324.7432 409.042 328.668 411.6533 c332.4014 414.4395 337.8711 415.1309 341.2832 412.6201 c345.2539 410.5254 345.4629 406.2998 344.4111 402.4551 c344.0127 400.458 343.4121 398.3955 343.4717 395.9521 c343.2842 393.457 345.3408 390.4834 347.9727 390.042 c351.4678 389.0303 354.4297 391.4736 355.5576 393.8721 c356.9531 396.3076 357.7891 398.9932 359.6016 401.7705 c361.1387 404.4873 364.5889 406.6904 367.1309 405.1924 c369.3721 403.9561 370.3125 401.9756 371.7549 399.7686 c374.0684 395.9482 376.5381 392.041 378.7813 387.8584 c378.7617 390.8877 380.8242 391.5088 382.2822 392.2744 c380.4463 394.8535 378.5801 397.6611 376.375 400.5439 c373.8389 403.0713 372.4492 407.2197 365.5781 408.0361 c358.3906 406.5576 357.8516 401.7402 355.7217 399.291 c354.0088 396.4014 352.208 394.0244 350.876 393.7061 c348.2676 392.8896 346.1895 394.7451 347.0977 399.915 c347.8359 404.0479 347.9502 411.1738 342.4785 413.7598 c338.1836 416.6172 332.6602 415.9395 328.6963 413.9297 c324.6846 411.8896 321.3848 409.0303 318.459 405.4619 CBb1 (Unnamed gradient 66) 345.9531 435.6812 -137.463 76.6811 1 0 0 1 0 0 Bg-56.5018 -51.8415 -80.3594 87.5834 386.1328 391.8896 Xm-6084.27 -5582.4351 -80.3594 87.5834 6470.4023 5974.3247 Bc-56.5018 -51.8415 -80.3594 87.5834 386.1328 391.8896 Bm-6084.27 -5582.4351 -80.3594 87.5834 329.6309 340.0479 Bcf0 BB211.9604 504.3193 m211.9512 504.7471 211.9619 504.8853 211.9917 504.7402 C211.959 505.1689 211.959 505.5952 211.9795 506.0166 C208.8345 506.6177 205.7451 507.2505 202.7642 507.7949 c195.1509 509.1885 187.4111 510.4497 179.3745 509.2134 c173.9258 508.3965 169.3716 506.1865 163.6499 505.3037 c159.5693 504.6563 155.2349 504.832 151.2612 505.6948 c143.9585 507.2803 140.4502 509.1748 134.0854 503.8438 c131.5903 501.751 125.1592 493.334 121.0313 495.1616 c126.959 492.5391 135.0918 500.2324 140.0688 502.6055 c144.9756 504.9448 151.6748 502.3477 156.9219 502.5625 c163.5522 502.833 170.1177 504.3496 176.7285 505.0498 C184.9092 506.2227 193.4609 507.3105 202.1797 506.2808 c205.7588 505.8535 208.8955 505.0898 211.9468 504.2529 C211.9512 504.2749 211.9565 504.2974 211.9604 504.3193 CBb1 (Unnamed gradient 66) 166.6772 533.1636 -90.2851 95.9738 1 0 0 1 0 0 Bg-0.47756 -95.9726 -94.9109 0.472277 214.1323 532.9272 Xm-40.0815 -8054.9673 -94.9109 0.472277 254.2139 8587.8945 Bc-0.47756 -95.9726 -94.9109 0.472277 214.1323 532.9272 Bm-40.0815 -8054.9673 -94.9109 0.472277 213.6548 436.9546 Bcf0 BB211.459 497.0527 m208.7803 497.6689 206.1509 498.3174 203.6108 498.9014 c196.5762 500.4287 189.4629 502.2056 181.8999 501.1836 C176.7207 500.7979 172.5732 498.3296 167.6016 496.7075 c162.52 495.0176 159.603 495.4478 154.9824 494.8057 c146.1499 493.5781 140.7456 491.8477 133.0713 487.3936 c140.126 491.4873 148.6396 491.708 156.519 492.7363 c164.2383 493.7432 171.6094 496.2593 179.3218 497.1606 c186.8892 498.0439 194.9282 498.6289 203.0005 497.4087 c206.041 496.918 208.981 496.0674 211.9048 495.1543 C211.7056 495.792 211.5605 496.4229 211.459 497.0527 CBb1 (Unnamed gradient 70) 171.8936 500.2085 -86.1863 48.7135 1 0 0 1 0 0 Bg3.24005 -48.6056 -82.9911 -5.5322 213.3877 502.9746 Xm537.6684 -8065.8174 -82.9911 -5.5322 -324.2808 8568.792 Bc3.24005 -48.6056 -82.9911 -5.5322 213.3877 502.9746 Bm537.6684 -8065.8174 -82.9911 -5.5322 216.6279 454.3691 Bcf0 BB293.3184 499.7549 m293.4434 499.7271 293.5664 499.7007 293.6924 499.6738 C291.5039 500.144 288.9531 501.6455 287.2275 503.0288 c284.9531 504.8516 282.7656 506.7432 280.7129 508.8154 c271.4951 518.1167 272.2881 534.814 282.0645 541.7593 c286.1416 544.6563 291.6445 544.2832 296.1807 543.0376 c297.9824 542.543 299.7949 542.0552 301.2012 540.7607 c302.5703 539.4985 303.3994 537.833 304.9463 536.7036 c307.8262 534.5967 311.2109 535.8491 313.4209 532.4731 c316.21 528.21 319.8906 519.3604 317.4824 514.4272 c314.1855 507.6768 302.4834 511.4409 297.3584 513.4395 c290.6572 516.0513 283.9238 520.0918 280.7578 525.4541 c277.0322 531.7656 282.7646 537.9243 289.0381 539.0112 C289.1123 539.0078 289.1143 539.0039 289.0381 538.9995 C282.3506 540.5361 274.0293 534.1514 276.3311 527.0239 c278.0703 521.6353 281.6719 517.8223 285.6846 515.127 c291.3838 511.2979 298.3994 511.4043 303.666 506.9805 c308.3828 503.0186 312.0059 497.0669 311.9951 490.7607 C312.001 492.8818 312.4971 494.2461 311.8545 496.4839 c311.2109 498.7256 310.0068 500.7881 309.4023 503.0342 c307.5332 509.9751 313.582 507.6938 317.8564 509.9912 c321.373 511.8823 319.835 518.5313 319.3975 521.6401 c318.7295 526.3521 317.3154 531.0361 314.1592 534.708 c311.9678 537.2583 308.9043 537.4629 306.6738 540.0996 c302.8164 544.6563 294.3027 546.4912 288.5986 546.0283 c278.5781 545.6138 272.8672 535.2969 272.582 526.3857 c271.9824 516.9316 277.8418 508.2813 285.252 502.9751 c287.6768 501.2432 290.4404 500.3936 293.3184 499.7549 cBb1 (Unnamed gradient 6) 272.5396 518.4292 0 47.5698 1 0 0 1 0 0 Bg47.5698 0 0 -59.7305 272.5396 548.4912 Xm8184.5835 0 0 -59.7305 -7912.0439 548.4912 Bc47.5698 0 0 -59.7305 272.5396 548.4912 Bm8184.5835 0 0 -59.7305 320.1094 548.4912 Bcf0 BB261.4102 530.6206 m259.833 530.6694 258.1367 530.6641 257.3008 531.5791 c252.7061 525.8057 254.0137 516.7461 260.0039 512.7837 c266.9531 508.6641 274.4209 515.167 275.4199 521.416 c276.334 528.0635 272.5908 534.6382 266.8838 537.7817 c260.8545 541.3281 252.8701 536.8662 251.2324 530.4165 c249.7227 524.3613 252.915 518.1162 257.5508 514.394 c259.8652 512.5791 263.1309 511.2036 266.1699 512.4556 c269.1563 513.7612 270.6484 516.874 271.3594 519.7686 c272.2432 522.6436 271.6357 526.4448 268.8066 528.3237 c266.084 530.1567 262.6699 530.1792 259.6904 529.4648 c253.4893 528.123 248.8359 522.3271 248.3018 516.0981 c248.7529 523.1465 255.1963 529.334 262.2822 529.4131 c265.6768 529.5913 269.4961 527.9985 270.5088 524.8345 c271.3535 521.7236 270.0771 518.3955 268.4922 515.8906 c266.1484 512.2183 261.4834 512.8203 258.5234 515.4512 c255.4609 517.9346 253.2764 521.626 252.7061 525.4053 c250.998 533.0015 260.5107 540.4316 266.8916 535.2148 c273.4912 531.3726 276.0381 518.5352 266.9648 515.1108 c263.4121 513.4087 259.5889 516.4805 258.625 520.3633 c257.499 524.2222 258.9092 528.1069 261.4102 530.6206 CBb1 (Unnamed gradient 6) 314.2676 364.5908 108.5009 159.6986 1 0 0 1 0 0 Bg-50.6755 151.4452 32.6035 10.9096 298.6387 359.3613 Xm-2561.9194 7656.3701 32.6035 10.9096 2860.5586 -7297.0088 Bc-50.6755 151.4452 32.6035 10.9096 298.6387 359.3613 Bm-2561.9194 7656.3701 32.6035 10.9096 247.9634 510.8066 Bcf0 BBu313.582 585.9258 m313.9824 586.9902 316.6846 584.6348 317.4033 584.7227 c311.9102 600.6523 305.8125 617.4531 295.1748 631.9063 c290.3398 638.481 284.2158 644.2207 276.7969 647.748 c269.4316 651.5366 260.7852 651.249 253.7207 655.1494 c261.5322 650.9385 272.0615 650.8018 279.3877 645.6597 c289.499 639.4404 296.0195 629.8418 301.6426 619.3745 c307.1494 609.2407 310.0771 596.3286 313.582 585.9258 CBb1 (Unnamed gradient 70) 376.918 474.1763 121.1166 104.0894 1 0 0 1 0 0 Bg-53.7915 89.1127 24.9265 15.0465 364.9775 466.9683 Xm-4218.2397 6988.0767 24.9265 15.0465 4583.2168 -6521.1084 Bc-53.7915 89.1127 24.9265 15.0465 364.9775 466.9683 Bm-4218.2397 6988.0767 24.9265 15.0465 311.1865 556.0811 Bcf0 BB306.9854 573.6826 m307.457 574.6279 307.8252 574.9541 308.542 575.0273 C304.3438 589.2075 303.8008 598.5938 294.1924 618.6919 c291.124 625.1123 287.7256 631.626 282.2188 636.3506 c281.4873 636.9839 280.6709 637.541 279.8057 637.9766 c278.7227 638.5205 277.6797 639.1826 276.5381 639.6284 c274.6914 640.3496 272.4902 640.2251 270.5508 640.2148 c268.9346 640.2061 267.3096 640.2915 265.7148 640.5742 c264.3896 640.8081 262.9727 641.5986 261.6406 641.5986 c260.2803 641.5996 258.832 640.6577 257.5 641.3589 C257.708 641.25 257.8398 640.9478 258.0957 640.8237 c258.4971 640.6284 259.1289 640.6821 259.5664 640.6724 c260.5586 640.6523 261.5537 640.7686 262.543 640.6304 c264.5498 640.3496 266.3779 639.5049 268.4297 639.3257 c270.3926 639.1533 272.4033 639.6104 274.3369 639.2554 c276.2646 638.8999 277.8887 638.0498 279.5723 637.0996 c282.1895 635.623 284.6289 633.3784 286.2959 630.8784 c291.3125 623.3462 294.623 615.2549 297.7363 606.8027 c301.207 597.293 303.0225 584.3687 306.9854 573.6826 CBb1 (Unnamed gradient 70) 360.1914 379.9541 108.5009 159.7617 1 0 0 1 0 0 Bg-50.6955 151.505 32.5633 10.8961 344.6055 374.7393 Xm-2560.9565 7653.4927 32.5633 10.8961 2905.5625 -7278.7529 Bc-50.6955 151.505 32.5633 10.8961 344.6055 374.7393 Bm-2560.9565 7653.4927 32.5633 10.8961 293.9102 526.2441 Bcf0 BBUu259.6904 643.7441 m259.5508 644.083 259.4463 644.4316 259.4521 644.7891 c257.1035 644.4136 254.792 644.0874 252.3135 644.3823 c250.0293 644.6436 247.9648 645.6538 246.0381 646.7852 c247.1191 646.1738 248.1904 645.2983 249.3486 644.7549 c250.9111 644.1055 252.5234 643.6914 254.25 643.6387 c255.8984 643.5747 258.166 643.4326 259.6904 643.7441 CBb1 (Unnamed gradient 70) 361.8379 465.061 121.1166 104.0941 1 0 0 1 0 0 Bg-53.7939 89.1168 12.3736 7.46911 355.6514 461.3267 Xm-4168.9155 6906.3643 12.3736 7.46911 4524.5664 -6445.0381 Bc-53.7939 89.1168 12.3736 7.46911 355.6514 461.3267 Bm-4168.9155 6906.3643 12.3736 7.46911 301.8574 550.4434 Bcf0 BB248.9053 641.9419 m248.8545 641.6035 248.7949 641.2568 248.6777 640.9194 c249.9971 640.8677 251.1523 640.9253 252.4082 641.0156 c253.5488 641.1201 254.7002 640.9961 255.8271 641.1572 c255.2021 641.0732 254.4912 641.3159 253.8643 641.3926 c253.0264 641.5322 252.2402 641.5337 251.4375 641.5913 c250.6221 641.541 249.6797 642.0396 248.9053 641.9419 CBb1 (Unnamed gradient 70) 341.667 373.8193 108.5009 159.6683 1 0 0 1 0 0 Bg-50.6659 151.4164 10.294 3.4445 336.5205 372.0967 Xm-2529.6421 7559.9082 10.294 3.4445 2866.1621 -7187.8115 Bc-50.6659 151.4164 10.294 3.4445 336.5205 372.0967 Bm-2529.6421 7559.9082 10.294 3.4445 285.8545 523.5132 Bcf0 BB249.583 654.6221 m249.4492 654.2666 249.457 654.2642 249.1523 654.0723 c250.6641 652.459 252.5596 651.6411 254.4463 650.6797 c255.4297 650.2822 256.3359 649.707 257.3809 649.4341 c258.1055 648.9409 260.4717 648.9653 258.4346 648.8584 c254.4473 648.2222 250.4443 648.8242 246.5576 649.6221 c248.7236 649.1982 251.0439 648.5356 253.2383 648.2983 c254.709 648.2407 256.166 648.0635 257.6143 648.2627 c258.1641 648.7334 259.7051 647.5273 259.6523 649.4307 C257.3799 650.0898 l254.7451 651.1001 251.3135 652.688 249.583 654.6221 CBb1 (Unnamed gradient 70) 363.7461 466.2344 121.1166 104.086 1 0 0 1 0 0 Bg-53.7897 89.1099 13.3321 8.04771 357.2773 462.3296 Xm-4168.2412 6905.2476 13.3321 8.04771 4525.5186 -6442.918 Bc-53.7897 89.1099 13.3321 8.04771 357.2773 462.3296 Bm-4168.2412 6905.2476 13.3321 8.04771 303.4873 551.4395 Bcf0 BB245.543 648.895 m245.4658 648.5449 245.3613 648.1978 245.1436 647.9141 c247.7725 646.5518 250.5449 646.1436 253.4717 646.0469 c256.1416 645.9873 258.8906 646.0996 261.4072 647.1943 c260.001 646.6221 258.3525 646.5054 256.915 646.4834 c254.9736 646.394 253.1553 646.5869 251.2393 646.8159 c249.377 647.0908 247.0732 648.1099 245.543 648.895 CBb1 (Unnamed gradient 70) 363.0068 465.7695 121.1166 104.0925 1 0 0 1 0 0 Bg-53.7931 89.1154 15.0259 9.07017 355.4941 461.2344 Xm-4168.4526 6905.5977 15.0259 9.07017 4523.9473 -6444.3633 Bc-53.7931 89.1154 15.0259 9.07017 355.4941 461.2344 Bm-4168.4526 6905.5977 15.0259 9.07017 301.7012 550.3496 Bcf0 BBU291.8262 455.0376 m300.0254 458.8086 316.7637 478.4067 303.6533 486.0659 C318.9551 484.0654 304.9463 467.436 300.0352 462.3589 C291.8262 455.0376 LBb1 (Unnamed gradient 47) 333.6777 371.0791 108.5009 159.707 1 0 0 1 0 0 Bg-50.6782 151.4532 36.9256 12.3558 319.4082 366.3047 Xm-2586.7185 7730.4824 36.9256 12.3558 2906.127 -7364.1777 Bc-50.6782 151.4532 36.9256 12.3558 319.4082 366.3047 Bm-2586.7185 7730.4824 36.9256 12.3558 268.73 517.7578 Bcf0 BB288.7305 515.7539 m293.8447 510.6162 301.4414 508.187 306.2246 501.7754 c310.2783 496.3442 312.9658 490.2964 311.9854 483.4194 C313.959 493.2822 314.1406 504.5303 304.1348 509.3242 c302.3037 510.2007 300.3037 510.7559 298.4395 511.5659 c288.7305 515.7539 lBb1 (Unnamed gradient 6) 288.7305 499.5869 0 24.3242 1 0 0 1 0 0 Bg24.3242 0 0 -36.3345 288.7305 517.7539 Xm8199.7305 0 0 -36.3345 -7911 517.7539 Bc24.3242 0 0 -36.3345 288.7305 517.7539 Bm8199.7305 0 0 -36.3345 313.0547 517.7539 Bcf0 BBUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF